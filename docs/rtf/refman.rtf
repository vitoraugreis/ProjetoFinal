{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment Projeto Locadora  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
2.0 \par
}}Projeto Locadora}
{\comment Gerado por doxygen 1.9.8.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Projeto Locadora}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o 2.0\par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Projeto Final PDS2\par \pard\plain 
{\tc\tcl1 \v Projeto Final PDS2}
{\xe \v Projeto Final PDS2}
{\bkmkstart AAAAAAABED}
{\bkmkend AAAAAAABED}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAABEE}
{\bkmkend AAAAAAABEE}
\par
{\bkmkstart AAAAAAABEF}
{\bkmkend AAAAAAABEF}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Problema
\par}
{\tc\tcl2 \v Problema}
Uma v\'EDdeo-locadora entrou em contato com nosso grupo pedindo a cria\'E7\'E3o de um sistema que possibilite um melhor controle de toda a loja. Este sistema deveria ser capaz de :{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Gerenciar o estoque de filmes;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Gerenciar os clientes da v\'EDdeo-locadora;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Gerenciar os alugu\'E9is de filmes;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Calcular autom\'E1ticamente o quanto o cliente deve pagar na devolu\'E7\'E3o dos filmes.\par}
\par
\par}
{\bkmkstart AAAAAAABEG}
{\bkmkend AAAAAAABEG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Solu\'E7\'E3o
\par}
{\tc\tcl2 \v Solu\'E7\'E3o}
Ap\'F3s reuni\'F5es, discuss\'F5es e cria\'E7\'E3o de CRCs, o grupo definiu como o projeto seria feito e suas caracter\'EDsticas:{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O sistema ser\'E1 programado em linguagem C++;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Teremos um m\'F3dulo do sistema respons\'E1vel apenas pelo Controle de Clientes;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Teremos um m\'F3dulo respons\'E1vel somente pelo Controle das M\'EDdias da locadora;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
E um m\'F3dulo respons\'E1vel pela loca\'E7\'E3o, devolu\'E7\'E3o e c\'E1lculo de pagamento.\par}
\par
{\bkmkstart AAAAAAABEH}
{\bkmkend AAAAAAABEH}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controle dos Clientes
\par}
{\tc\tcl3 \v Controle dos Clientes}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O m\'F3dulo de controle de clientes \'E9 respons\'E1vel por controlar o banco de dados de clientes da loja, assim como gerar relat\'F3rios.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Cada cliente possui como caracter\'EDstica \'FAnica o seu CPF, que \'E9 armazenado junto de seu nome.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Estes clientes s\'E3o armazenados em um vetor, onde \'E9 poss\'EDvel fazer remo\'E7\'F5es, adi\'E7\'F5es (cadastros), e outras opera\'E7\'F5es.\par}
\par
\par}
{\bkmkstart AAAAAAABEI}
{\bkmkend AAAAAAABEI}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controle das M\'EDdias
\par}
{\tc\tcl3 \v Controle das M\'EDdias}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O m\'F3dulo de controle de m\'EDdias \'E9 respons\'E1vel por todo o gerenciamento do estoque da v\'EDdeo-locadora.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Atrav\'E9s dele \'E9 poss\'EDvel adicionar, remover, atualizar quantidades dispon\'EDveis, gerar relat\'F3rios, e outras fun\'E7\'F5es.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A video-locadora possui dois tipos de m\'EDdias, cada um com suas categorias e valor:{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dvd} \'E2\'86\'92 Lan\'C3\'A7amento: 20R$ p/dia || Estoque: 10R$ p/dia || Promo\'C3\'A7\'C3\'A3o: 10R$ fixo\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fita} \'E2\'86\'92 Rebobinada: 5R$ fixo || N\'C3\'A3o rebobinada: 5R$ fixo + Multa de 2R$\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
As m\'EDdias s\'E3o todas armazenadas em um vetor, onde \'E9 poss\'EDvel fazer todas as opera\'E7\'F5es necess\'E1rias.\par}
\par
\par}
{\bkmkstart AAAAAAABEJ}
{\bkmkend AAAAAAABEJ}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Controle das loca\'E7\'F5es
\par}
{\tc\tcl3 \v Controle das loca\'E7\'F5es}
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O m\'F3dulo de controle de loca\'E7\'F5es \'E9 respons\'E1vel por fazer as loca\'E7\'F5es das m\'EDdias e calcular o pre\'E7o final do aluguel para o cliente.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
No ato da loca\'E7\'E3o, o sistema atualiza a quantidade dispon\'EDvel da m\'EDdia no banco de dados.\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Na devolu\'E7\'E3o, o sistema calcula automaticamente o pre\'E7o final, de acordo com o pre\'E7o de cada m\'EDdia, e retorna ao cliente.{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Tamb\'E9m \'E9 feita a atualiza\'E7\'E3o da quantidade da m\'EDdia no estoque.\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
O sistema foi implementado usando a estutura de dados "unordered_map"{
\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Atrav\'C3\'A9s dela \'C3\'A9 poss\'C3\'ADvel fazer a rela\'C3\'A7\'C3\'A3o cliente \'E2\'86\'92 m\'C3\'ADdias.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
A chave da estrutura \'E9 o cliente, j\'E1 o valor \'E9 um vetor de m\'EDdias, que se refere as m\'EDdias alugadas pelo cliente.\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
N\'E3o \'E9 necess\'E1ria a ordena\'E7\'E3o da estrutura, por isso optamos pela "unordered_map" ao inv\'E9s do "map". Isso faz com que o sistema use menos mem\'F3ria.\par}
}
\par
\par}
\par}
{\bkmkstart AAAAAAABEK}
{\bkmkend AAAAAAABEK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Dificuldades no desenvolvimento
\par}
{\tc\tcl2 \v Dificuldades no desenvolvimento}
O desenvolvimento do c\'F3digo em si foi tranquilo, por\'E9m encontramos uma grande dificuldade na hora de fazer os testes do programa. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespaces\par \pard\plain 
{\tc \v Namespaces}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Namespaces\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os Namespaces com suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b clientes_excp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::assertType} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABRG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Color} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABTR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABUH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::assertAction} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::binaryAssertComparison} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseFailureReason} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest_detail_test_suite_ns} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice Hier\'E1rquico\par \pard\plain 
{\tc \v \'CDndice Hier\'E1rquico}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Hierarquia de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta lista de hierarquias est\'E1 parcialmente ordenada (ordem alfab\'E9tica):}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Alocacao\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Approx\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::AssertData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ResultBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ResultBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::basic_istream< charT, traits >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::basic_ostream< charT, traits >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::char_traits< charT >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Cliente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Contains\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::Context\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::ContextOptions\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ControleClientes\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ControleLocacao\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ControleMidia\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::CurrentTestCaseStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::enable_if< COND, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::enable_if< true, T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::exception
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
clientes_excp::cpf_curto\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
clientes_excp::cpf_inexistente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
clientes_excp::cpf_repetido\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
clientes_excp::ordem_invalida\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::categoria_invalida\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::codigo_inexistente\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::codigo_repetido\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::erro_de_abertura\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::ordem_invalida\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
midia_excp::tipo_desconhecido\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::Expression_lhs< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ExpressionDecomposer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::false_type\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAN \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::deferred_false< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::deferred_false< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator< T, typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator< T, typename >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::filldata< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< const char[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< const void * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::filldata< T[N]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IContextScope\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScopeBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ContextScope< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ContextScope< L >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::ContextScopeBase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::IExceptionTranslator\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXC \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::ExceptionTranslator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::ExceptionTranslator< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::IReporter\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_enum< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::IsNaN< F >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::MessageData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::MessageBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::MessageBuilder\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Midia\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Dvd\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Fita\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::QueryData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::RelationalComparator< int, L, R >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_const< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_const< const T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T & >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::remove_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Result\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::String\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::AssertData::StringContains\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< C >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::StringMakerBase< detail::has_insertion_operator< T >::value||detail::types::is_pointer< T >::value||detail::types::is_array< T >::value >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::StringMaker< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::StringMaker< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::detail::StringMakerBase< true >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::Subcase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::SubcaseSignature\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestCaseData\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestCase\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
doctest::TestCaseException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestFailureException\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::TestRunStats\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::TestSuite\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::true_type\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBH \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T[SIZE]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_array< T[SIZE]>\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_pointer< T * >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::is_rvalue_reference< T && >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
std::tuple< Types >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
doctest::detail::types::underlying_type< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Componentes\par \pard\plain 
{\tc \v \'CDndice dos Componentes}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Classes\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Aqui est\'E3o as classes, estruturas, uni\'F5es e interfaces e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Alocacao} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Approx} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABJP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::AssertData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::basic_istream< charT, traits >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::basic_ostream< charT, traits >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::categoria_invalida} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::char_traits< charT >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Cliente} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABEW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::codigo_inexistente} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::codigo_repetido} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Contains} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::Context} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::ContextOptions} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABLZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScope< L >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ContextScopeBase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABVR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ControleClientes} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ControleLocacao} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ControleMidia} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABFS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b clientes_excp::cpf_curto} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b clientes_excp::cpf_inexistente} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b clientes_excp::cpf_repetido} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::CurrentTestCaseStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::deferred_false< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Dvd} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::enable_if< COND, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::enable_if< true, T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::erro_de_abertura} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExceptionTranslator< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Expression_lhs< L >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ExpressionDecomposer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::false_type} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< const char[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< const void * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::filldata< T[N]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABWY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Fita} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator< T, typename >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IContextScope} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::IExceptionTranslator} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IReporter} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABNU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_array< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_array< T[SIZE]>} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_enum< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_pointer< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_pointer< T * >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_rvalue_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::is_rvalue_reference< T && >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::IsNaN< F >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::MessageBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::MessageData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Midia} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABGM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b clientes_excp::ordem_invalida} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABHI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::ordem_invalida} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::QueryData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABOW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::RelationalComparator< int, L, R >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_const< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_const< const T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T & >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::remove_reference< T && >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Result} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::ResultBuilder} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABXY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::String} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABPA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::AssertData::StringContains} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABKX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::StringMaker< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< C >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::StringMakerBase< true >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::Subcase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::SubcaseSignature} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestCase} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABYV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseData} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestCaseException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestFailureException} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::TestRunStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABQZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::TestSuite} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAABZK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b midia_excp::tipo_desconhecido} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACCV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::true_type} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b std::tuple< Types >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACDI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b doctest::detail::types::underlying_type< T >} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAACBJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Arquivos\par \pard\plain 
{\tc \v \'CDndice dos Arquivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Arquivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os arquivos e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b Cliente.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientes.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientesExceptions.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/{\b ControleLocacao.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidia.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Dvd.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Fita.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Midia.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/{\b main.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b Cliente.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientes.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientesExceptions.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleLocacao/{\b ControleLocacao.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidia.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Dvd.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Fita.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Midia.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/{\b FuncoesClientes.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/{\b FuncoesMain.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/{\b FuncoesMidia.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABN \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAQK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleClientes/{\b test_controleclientes.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleLocacao/{\b test_controlelocacao.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b test_controlemidia.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAPX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace clientes_excp\par \pard\plain 
{\tc\tcl2 \v clientes_excp}
{\xe \v clientes_excp}
{\bkmkstart AAAAAAABGV}
{\bkmkend AAAAAAABGV}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b cpf_curto}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b cpf_inexistente}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b cpf_repetido}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ordem_invalida}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest\par \pard\plain 
{\tc\tcl2 \v doctest}
{\xe \v doctest}
{\bkmkstart AAAAAAABHM}
{\bkmkend AAAAAAABHM}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Approx}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Contains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CurrentTestCaseStats}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IReporter}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IsNaN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b String}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMaker}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestRunStats}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b operator+} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (const {\b Contains} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator==} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b operator!=} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b toString} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::types::is_enum}< T >::value, bool >::type  = true> {\b String} {\b toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b String} in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b std::nullptr_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< float > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< double > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b toString} ({\b IsNaN}< double long > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (no_breaks, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (no_output, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Vari\'E1veis\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b is_running_in_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< float >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< double >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b IsNaN< long double >}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v assertString\:doctest}
{\xe \v doctest\:assertString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::assertString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABHN}
{\bkmkend AAAAAAABHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (description , const char * , "" )}}
\par
{\bkmkstart AAAAAAABHO}
{\bkmkend AAAAAAABHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (expected_failures , int , 0 )}}
\par
{\bkmkstart AAAAAAABHP}
{\bkmkend AAAAAAABHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (may_fail , bool , true )}}
\par
{\bkmkstart AAAAAAABHQ}
{\bkmkend AAAAAAABHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (no_breaks , bool , true )}}
\par
{\bkmkstart AAAAAAABHR}
{\bkmkend AAAAAAABHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (no_output , bool , true )}}
\par
{\bkmkstart AAAAAAABHS}
{\bkmkend AAAAAAABHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (should_fail , bool , true )}}
\par
{\bkmkstart AAAAAAABHT}
{\bkmkend AAAAAAABHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (skip , bool , true )}}
\par
{\bkmkstart AAAAAAABHU}
{\bkmkend AAAAAAABHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (test_suite , const char * , "" )}}
\par
{\bkmkstart AAAAAAABHV}
{\bkmkend AAAAAAABHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest}
{\xe \v doctest\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::DOCTEST_DEFINE_DECORATOR (timeout , double , 0 )}}
\par
{\bkmkstart AAAAAAABHW}
{\bkmkend AAAAAAABHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v failureString\:doctest}
{\xe \v doctest\:failureString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::failureString ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABHX}
{\bkmkend AAAAAAABHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getContextOptions\:doctest}
{\xe \v doctest\:getContextOptions}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * doctest::getContextOptions ()}}
\par
{\bkmkstart AAAAAAABHY}
{\bkmkend AAAAAAABHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b Contains} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABHZ}
{\bkmkend AAAAAAABHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b String} &  {\i lhs}, const {\b Contains} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIA}
{\bkmkend AAAAAAABIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest}
{\xe \v doctest\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator!= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIB}
{\bkmkend AAAAAAABIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+\:doctest}
{\xe \v doctest\:operator+}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::operator+ (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIC}
{\bkmkend AAAAAAABIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest}
{\xe \v doctest\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator< (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABID}
{\bkmkend AAAAAAABID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest}
{\xe \v doctest\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator<= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIE}
{\bkmkend AAAAAAABIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b Contains} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIF}
{\bkmkend AAAAAAABIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b String} &  {\i lhs}, const {\b Contains} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIG}
{\bkmkend AAAAAAABIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest}
{\xe \v doctest\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator== (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIH}
{\bkmkend AAAAAAABIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest}
{\xe \v doctest\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator> (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABII}
{\bkmkend AAAAAAABII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest}
{\xe \v doctest\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::operator>= (const {\b String} &  {\i lhs}, const {\b String} &  {\i rhs})}}
\par
{\bkmkstart AAAAAAABIJ}
{\bkmkend AAAAAAABIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerExceptionTranslator\:doctest}
{\xe \v doctest\:registerExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::registerExceptionTranslator ({\b String}(*)(T)  {\i translateFunction})}}
\par
{\bkmkstart AAAAAAABIK}
{\bkmkend AAAAAAABIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1893                                                                 \{\par
1894     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})\par
1895     static detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);\par
1896     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1897     detail::registerExceptionTranslatorImpl(&exceptionTranslator);\par
1898     return 0;\par
1899 \}\par
}
}
{\xe \v registerReporter\:doctest}
{\xe \v doctest\:registerReporter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > int doctest::registerReporter (const char *  {\i name}, int  {\i priority}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAABIL}
{\bkmkend AAAAAAABIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2068                                                                       \{\par
2069     detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);\par
2070     {\cf19 return} 0;\par
2071 \}\par
}
}
{\xe \v skipPathFromFilename\:doctest}
{\xe \v doctest\:skipPathFromFilename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} const char * doctest::skipPathFromFilename (const char *  {\i file})}}
\par
{\bkmkstart AAAAAAABIM}
{\bkmkend AAAAAAABIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::toString ()}}
\par
{\bkmkstart AAAAAAABIN}
{\bkmkend AAAAAAABIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1065                   \{\par
1066 {\cf21 #if DOCTEST_MSVC >= 0 && DOCTEST_CLANG == 0 && DOCTEST_GCC == 0}\par
1067     String ret = __FUNCSIG__; {\cf20 // class doctest::String __cdecl doctest::toString<TYPE>(void)}\par
1068     String::size_type beginPos = ret.find({\cf23 '<'});\par
1069     {\cf19 return} ret.substr(beginPos + 1, ret.size() - beginPos - {\cf17 static_cast<}String::size_type{\cf17 >}({\cf17 sizeof}({\cf22 ">(void)"})));\par
1070 {\cf21 #else}\par
1071     String ret = __PRETTY_FUNCTION__; {\cf20 // doctest::String toString() [with T = TYPE]}\par
1072     String::size_type begin = ret.find({\cf23 '='}) + 2;\par
1073     {\cf19 return} ret.substr(begin, ret.size() - begin - 1);\par
1074 {\cf21 #endif}\par
1075 \}\par
}
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (bool  {\i in})}}
\par
{\bkmkstart AAAAAAABIO}
{\bkmkend AAAAAAABIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char  {\i in})}}
\par
{\bkmkstart AAAAAAABIP}
{\bkmkend AAAAAAABIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char signed  {\i in})}}
\par
{\bkmkstart AAAAAAABIQ}
{\bkmkend AAAAAAABIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (char unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABIR}
{\bkmkend AAAAAAABIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (const {\b Approx} &  {\i in})}}
\par
{\bkmkstart AAAAAAABIS}
{\bkmkend AAAAAAABIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (const {\b Contains} &  {\i in})}}
\par
{\bkmkstart AAAAAAABIT}
{\bkmkend AAAAAAABIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::types::is_enum}< T >::value, bool >::type  = true> {\b String} doctest::toString (const {\b DOCTEST_REF_WRAP}(T)  {\i value})}}
\par
{\bkmkstart AAAAAAABIU}
{\bkmkend AAAAAAABIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1078                                                  \{\par
1079     {\cf19 return} StringMaker<T>::convert(value);\par
1080 \}\par
}
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double  {\i in})}}
\par
{\bkmkstart AAAAAAABIV}
{\bkmkend AAAAAAABIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (double long  {\i in})}}
\par
{\bkmkstart AAAAAAABIW}
{\bkmkend AAAAAAABIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (float  {\i in})}}
\par
{\bkmkstart AAAAAAABIX}
{\bkmkend AAAAAAABIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< double >  {\i in})}}
\par
{\bkmkstart AAAAAAABIY}
{\bkmkend AAAAAAABIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< double long >  {\i in})}}
\par
{\bkmkstart AAAAAAABIZ}
{\bkmkend AAAAAAABIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b IsNaN}< float >  {\i in})}}
\par
{\bkmkstart AAAAAAABJA}
{\bkmkend AAAAAAABJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long  {\i in})}}
\par
{\bkmkstart AAAAAAABJB}
{\bkmkend AAAAAAABJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long long  {\i in})}}
\par
{\bkmkstart AAAAAAABJC}
{\bkmkend AAAAAAABJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABJD}
{\bkmkend AAAAAAABJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (long unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABJE}
{\bkmkend AAAAAAABJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (short  {\i in})}}
\par
{\bkmkstart AAAAAAABJF}
{\bkmkend AAAAAAABJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (short unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABJG}
{\bkmkend AAAAAAABJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (signed  {\i in})}}
\par
{\bkmkstart AAAAAAABJH}
{\bkmkend AAAAAAABJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b std::nullptr_t} )}}
\par
{\bkmkstart AAAAAAABJI}
{\bkmkend AAAAAAABJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString ({\b String}  {\i in})}}
\par
{\bkmkstart AAAAAAABJJ}
{\bkmkend AAAAAAABJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toString\:doctest}
{\xe \v doctest\:toString}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::toString (unsigned  {\i in})}}
\par
{\bkmkstart AAAAAAABJK}
{\bkmkend AAAAAAABJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Vari\'E1veis\par
\pard\plain 
{\xe \v is_running_in_test\:doctest}
{\xe \v doctest\:is_running_in_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::is_running_in_test{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAABJL}
{\bkmkend AAAAAAABJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< double >\:doctest}
{\xe \v doctest\:IsNaN< double >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< double >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAABJM}
{\bkmkend AAAAAAABJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< float >\:doctest}
{\xe \v doctest\:IsNaN< float >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< float >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAABJN}
{\bkmkend AAAAAAABJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v IsNaN< long double >\:doctest}
{\xe \v doctest\:IsNaN< long double >}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN}< long double >{\f2 [extern]}}}
\par
{\bkmkstart AAAAAAABJO}
{\bkmkend AAAAAAABJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::assertType\par \pard\plain 
{\tc\tcl2 \v doctest::assertType}
{\xe \v doctest::assertType}
{\bkmkstart AAAAAAABRG}
{\bkmkend AAAAAAABRG}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
, {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
, {\b is_warn} = 1
, {\b is_check} = 2 * is_warn
, {\b is_require} = 2 * is_check
, {\b is_normal} = 2 * is_require
, {\b is_throws} = 2 * is_normal
, {\b is_throws_as} = 2 * is_throws
, {\b is_throws_with} = 2 * is_throws_as
, {\b is_nothrow} = 2 * is_throws_with
, {\b is_false} = 2 * is_nothrow
, {\b is_unary} = 2 * is_false
, {\b is_eq} = 2 * is_unary
, {\b is_ne} = 2 * is_eq
, {\b is_lt} = 2 * is_ne
, {\b is_gt} = 2 * is_lt
, {\b is_ge} = 2 * is_gt
, {\b is_le} = 2 * is_ge
, {\b DT_WARN} = is_normal | is_warn
, {\b DT_CHECK} = is_normal | is_check
, {\b DT_REQUIRE} = is_normal | is_require
, {\b DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b DT_WARN_THROWS} = is_throws | is_warn
, {\b DT_CHECK_THROWS} = is_throws | is_check
, {\b DT_REQUIRE_THROWS} = is_throws | is_require
, {\b DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b DT_WARN_LE} = is_normal | is_le | is_warn
, {\b DT_CHECK_LE} = is_normal | is_le | is_check
, {\b DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Enum\:doctest::assertType}
{\xe \v doctest::assertType\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::assertType::Enum}}}
\par
{\bkmkstart AAAAAAABRH}
{\bkmkend AAAAAAABRH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
\cell }{\cell }{\row }
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 692     \{\par
693         {\cf20 // macro traits}\par
694 \par
695         is_warn    = 1,\par
696         is_check   = 2 * is_warn,\par
697         is_require = 2 * is_check,\par
698 \par
699         is_normal      = 2 * is_require,\par
700         is_throws      = 2 * is_normal,\par
701         is_throws_as   = 2 * is_throws,\par
702         is_throws_with = 2 * is_throws_as,\par
703         is_nothrow     = 2 * is_throws_with,\par
704 \par
705         is_false = 2 * is_nothrow,\par
706         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
707 \par
708         is_eq = 2 * is_unary,\par
709         is_ne = 2 * is_eq,\par
710 \par
711         is_lt = 2 * is_ne,\par
712         is_gt = 2 * is_lt,\par
713 \par
714         is_ge = 2 * is_gt,\par
715         is_le = 2 * is_ge,\par
716 \par
717         {\cf20 // macro types}\par
718 \par
719         DT_WARN    = is_normal | is_warn,\par
720         DT_CHECK   = is_normal | is_check,\par
721         DT_REQUIRE = is_normal | is_require,\par
722 \par
723         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
724         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
725         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
726 \par
727         DT_WARN_THROWS    = is_throws | is_warn,\par
728         DT_CHECK_THROWS   = is_throws | is_check,\par
729         DT_REQUIRE_THROWS = is_throws | is_require,\par
730 \par
731         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
732         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
733         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
734 \par
735         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
736         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
737         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
738 \par
739         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
740         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
741         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
742 \par
743         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
744         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
745         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
746 \par
747         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
748         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
749         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
750 \par
751         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
752         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
753         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
754 \par
755         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
756         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
757         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
758 \par
759         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
760         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
761         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
762 \par
763         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
764         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
765         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
766 \par
767         DT_WARN_LE    = is_normal | is_le | is_warn,\par
768         DT_CHECK_LE   = is_normal | is_le | is_check,\par
769         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
770 \par
771         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
772         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
773         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
774 \par
775         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
776         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
777         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
778     \};\par
}
}
{\xe \v Enum\:doctest::assertType}
{\xe \v doctest::assertType\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::assertType::Enum}}}
\par
{\bkmkstart AAAAAAABRH}
{\bkmkend AAAAAAABRH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
\cell }{\cell }{\row }
{\xe \v is_warn\:doctest::assertType}
{\xe \v doctest::assertType\:is_warn}
{\qr is_warn{\bkmkstart AAAAAAABRI}
{\bkmkend AAAAAAABRI}
\cell }{\cell }{\row }
{\xe \v is_check\:doctest::assertType}
{\xe \v doctest::assertType\:is_check}
{\qr is_check{\bkmkstart AAAAAAABRJ}
{\bkmkend AAAAAAABRJ}
\cell }{\cell }{\row }
{\xe \v is_require\:doctest::assertType}
{\xe \v doctest::assertType\:is_require}
{\qr is_require{\bkmkstart AAAAAAABRK}
{\bkmkend AAAAAAABRK}
\cell }{\cell }{\row }
{\xe \v is_normal\:doctest::assertType}
{\xe \v doctest::assertType\:is_normal}
{\qr is_normal{\bkmkstart AAAAAAABRL}
{\bkmkend AAAAAAABRL}
\cell }{\cell }{\row }
{\xe \v is_throws\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws}
{\qr is_throws{\bkmkstart AAAAAAABRM}
{\bkmkend AAAAAAABRM}
\cell }{\cell }{\row }
{\xe \v is_throws_as\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_as}
{\qr is_throws_as{\bkmkstart AAAAAAABRN}
{\bkmkend AAAAAAABRN}
\cell }{\cell }{\row }
{\xe \v is_throws_with\:doctest::assertType}
{\xe \v doctest::assertType\:is_throws_with}
{\qr is_throws_with{\bkmkstart AAAAAAABRO}
{\bkmkend AAAAAAABRO}
\cell }{\cell }{\row }
{\xe \v is_nothrow\:doctest::assertType}
{\xe \v doctest::assertType\:is_nothrow}
{\qr is_nothrow{\bkmkstart AAAAAAABRP}
{\bkmkend AAAAAAABRP}
\cell }{\cell }{\row }
{\xe \v is_false\:doctest::assertType}
{\xe \v doctest::assertType\:is_false}
{\qr is_false{\bkmkstart AAAAAAABRQ}
{\bkmkend AAAAAAABRQ}
\cell }{\cell }{\row }
{\xe \v is_unary\:doctest::assertType}
{\xe \v doctest::assertType\:is_unary}
{\qr is_unary{\bkmkstart AAAAAAABRR}
{\bkmkend AAAAAAABRR}
\cell }{\cell }{\row }
{\xe \v is_eq\:doctest::assertType}
{\xe \v doctest::assertType\:is_eq}
{\qr is_eq{\bkmkstart AAAAAAABRS}
{\bkmkend AAAAAAABRS}
\cell }{\cell }{\row }
{\xe \v is_ne\:doctest::assertType}
{\xe \v doctest::assertType\:is_ne}
{\qr is_ne{\bkmkstart AAAAAAABRT}
{\bkmkend AAAAAAABRT}
\cell }{\cell }{\row }
{\xe \v is_lt\:doctest::assertType}
{\xe \v doctest::assertType\:is_lt}
{\qr is_lt{\bkmkstart AAAAAAABRU}
{\bkmkend AAAAAAABRU}
\cell }{\cell }{\row }
{\xe \v is_gt\:doctest::assertType}
{\xe \v doctest::assertType\:is_gt}
{\qr is_gt{\bkmkstart AAAAAAABRV}
{\bkmkend AAAAAAABRV}
\cell }{\cell }{\row }
{\xe \v is_ge\:doctest::assertType}
{\xe \v doctest::assertType\:is_ge}
{\qr is_ge{\bkmkstart AAAAAAABRW}
{\bkmkend AAAAAAABRW}
\cell }{\cell }{\row }
{\xe \v is_le\:doctest::assertType}
{\xe \v doctest::assertType\:is_le}
{\qr is_le{\bkmkstart AAAAAAABRX}
{\bkmkend AAAAAAABRX}
\cell }{\cell }{\row }
{\xe \v DT_WARN\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN}
{\qr DT_WARN{\bkmkstart AAAAAAABRY}
{\bkmkend AAAAAAABRY}
\cell }{\cell }{\row }
{\xe \v DT_CHECK\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK}
{\qr DT_CHECK{\bkmkstart AAAAAAABRZ}
{\bkmkend AAAAAAABRZ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE}
{\qr DT_REQUIRE{\bkmkstart AAAAAAABSA}
{\bkmkend AAAAAAABSA}
\cell }{\cell }{\row }
{\xe \v DT_WARN_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_FALSE}
{\qr DT_WARN_FALSE{\bkmkstart AAAAAAABSB}
{\bkmkend AAAAAAABSB}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_FALSE}
{\qr DT_CHECK_FALSE{\bkmkstart AAAAAAABSC}
{\bkmkend AAAAAAABSC}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_FALSE}
{\qr DT_REQUIRE_FALSE{\bkmkstart AAAAAAABSD}
{\bkmkend AAAAAAABSD}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS}
{\qr DT_WARN_THROWS{\bkmkstart AAAAAAABSE}
{\bkmkend AAAAAAABSE}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS}
{\qr DT_CHECK_THROWS{\bkmkstart AAAAAAABSF}
{\bkmkend AAAAAAABSF}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS}
{\qr DT_REQUIRE_THROWS{\bkmkstart AAAAAAABSG}
{\bkmkend AAAAAAABSG}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_AS}
{\qr DT_WARN_THROWS_AS{\bkmkstart AAAAAAABSH}
{\bkmkend AAAAAAABSH}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_AS}
{\qr DT_CHECK_THROWS_AS{\bkmkstart AAAAAAABSI}
{\bkmkend AAAAAAABSI}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_AS}
{\qr DT_REQUIRE_THROWS_AS{\bkmkstart AAAAAAABSJ}
{\bkmkend AAAAAAABSJ}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH}
{\qr DT_WARN_THROWS_WITH{\bkmkstart AAAAAAABSK}
{\bkmkend AAAAAAABSK}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH}
{\qr DT_CHECK_THROWS_WITH{\bkmkstart AAAAAAABSL}
{\bkmkend AAAAAAABSL}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH}
{\qr DT_REQUIRE_THROWS_WITH{\bkmkstart AAAAAAABSM}
{\bkmkend AAAAAAABSM}
\cell }{\cell }{\row }
{\xe \v DT_WARN_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_THROWS_WITH_AS}
{\qr DT_WARN_THROWS_WITH_AS{\bkmkstart AAAAAAABSN}
{\bkmkend AAAAAAABSN}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_THROWS_WITH_AS}
{\qr DT_CHECK_THROWS_WITH_AS{\bkmkstart AAAAAAABSO}
{\bkmkend AAAAAAABSO}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_THROWS_WITH_AS\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_THROWS_WITH_AS}
{\qr DT_REQUIRE_THROWS_WITH_AS{\bkmkstart AAAAAAABSP}
{\bkmkend AAAAAAABSP}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NOTHROW}
{\qr DT_WARN_NOTHROW{\bkmkstart AAAAAAABSQ}
{\bkmkend AAAAAAABSQ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NOTHROW}
{\qr DT_CHECK_NOTHROW{\bkmkstart AAAAAAABSR}
{\bkmkend AAAAAAABSR}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NOTHROW\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NOTHROW}
{\qr DT_REQUIRE_NOTHROW{\bkmkstart AAAAAAABSS}
{\bkmkend AAAAAAABSS}
\cell }{\cell }{\row }
{\xe \v DT_WARN_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_EQ}
{\qr DT_WARN_EQ{\bkmkstart AAAAAAABST}
{\bkmkend AAAAAAABST}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_EQ}
{\qr DT_CHECK_EQ{\bkmkstart AAAAAAABSU}
{\bkmkend AAAAAAABSU}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_EQ\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_EQ}
{\qr DT_REQUIRE_EQ{\bkmkstart AAAAAAABSV}
{\bkmkend AAAAAAABSV}
\cell }{\cell }{\row }
{\xe \v DT_WARN_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_NE}
{\qr DT_WARN_NE{\bkmkstart AAAAAAABSW}
{\bkmkend AAAAAAABSW}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_NE}
{\qr DT_CHECK_NE{\bkmkstart AAAAAAABSX}
{\bkmkend AAAAAAABSX}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_NE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_NE}
{\qr DT_REQUIRE_NE{\bkmkstart AAAAAAABSY}
{\bkmkend AAAAAAABSY}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GT}
{\qr DT_WARN_GT{\bkmkstart AAAAAAABSZ}
{\bkmkend AAAAAAABSZ}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GT}
{\qr DT_CHECK_GT{\bkmkstart AAAAAAABTA}
{\bkmkend AAAAAAABTA}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GT}
{\qr DT_REQUIRE_GT{\bkmkstart AAAAAAABTB}
{\bkmkend AAAAAAABTB}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LT}
{\qr DT_WARN_LT{\bkmkstart AAAAAAABTC}
{\bkmkend AAAAAAABTC}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LT}
{\qr DT_CHECK_LT{\bkmkstart AAAAAAABTD}
{\bkmkend AAAAAAABTD}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LT\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LT}
{\qr DT_REQUIRE_LT{\bkmkstart AAAAAAABTE}
{\bkmkend AAAAAAABTE}
\cell }{\cell }{\row }
{\xe \v DT_WARN_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_GE}
{\qr DT_WARN_GE{\bkmkstart AAAAAAABTF}
{\bkmkend AAAAAAABTF}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_GE}
{\qr DT_CHECK_GE{\bkmkstart AAAAAAABTG}
{\bkmkend AAAAAAABTG}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_GE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_GE}
{\qr DT_REQUIRE_GE{\bkmkstart AAAAAAABTH}
{\bkmkend AAAAAAABTH}
\cell }{\cell }{\row }
{\xe \v DT_WARN_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_LE}
{\qr DT_WARN_LE{\bkmkstart AAAAAAABTI}
{\bkmkend AAAAAAABTI}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_LE}
{\qr DT_CHECK_LE{\bkmkstart AAAAAAABTJ}
{\bkmkend AAAAAAABTJ}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_LE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_LE}
{\qr DT_REQUIRE_LE{\bkmkstart AAAAAAABTK}
{\bkmkend AAAAAAABTK}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY}
{\qr DT_WARN_UNARY{\bkmkstart AAAAAAABTL}
{\bkmkend AAAAAAABTL}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY}
{\qr DT_CHECK_UNARY{\bkmkstart AAAAAAABTM}
{\bkmkend AAAAAAABTM}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY}
{\qr DT_REQUIRE_UNARY{\bkmkstart AAAAAAABTN}
{\bkmkend AAAAAAABTN}
\cell }{\cell }{\row }
{\xe \v DT_WARN_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_WARN_UNARY_FALSE}
{\qr DT_WARN_UNARY_FALSE{\bkmkstart AAAAAAABTO}
{\bkmkend AAAAAAABTO}
\cell }{\cell }{\row }
{\xe \v DT_CHECK_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_CHECK_UNARY_FALSE}
{\qr DT_CHECK_UNARY_FALSE{\bkmkstart AAAAAAABTP}
{\bkmkend AAAAAAABTP}
\cell }{\cell }{\row }
{\xe \v DT_REQUIRE_UNARY_FALSE\:doctest::assertType}
{\xe \v doctest::assertType\:DT_REQUIRE_UNARY_FALSE}
{\qr DT_REQUIRE_UNARY_FALSE{\bkmkstart AAAAAAABTQ}
{\bkmkend AAAAAAABTQ}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 692     \{\par
693         {\cf20 // macro traits}\par
694 \par
695         is_warn    = 1,\par
696         is_check   = 2 * is_warn,\par
697         is_require = 2 * is_check,\par
698 \par
699         is_normal      = 2 * is_require,\par
700         is_throws      = 2 * is_normal,\par
701         is_throws_as   = 2 * is_throws,\par
702         is_throws_with = 2 * is_throws_as,\par
703         is_nothrow     = 2 * is_throws_with,\par
704 \par
705         is_false = 2 * is_nothrow,\par
706         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
707 \par
708         is_eq = 2 * is_unary,\par
709         is_ne = 2 * is_eq,\par
710 \par
711         is_lt = 2 * is_ne,\par
712         is_gt = 2 * is_lt,\par
713 \par
714         is_ge = 2 * is_gt,\par
715         is_le = 2 * is_ge,\par
716 \par
717         {\cf20 // macro types}\par
718 \par
719         DT_WARN    = is_normal | is_warn,\par
720         DT_CHECK   = is_normal | is_check,\par
721         DT_REQUIRE = is_normal | is_require,\par
722 \par
723         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
724         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
725         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
726 \par
727         DT_WARN_THROWS    = is_throws | is_warn,\par
728         DT_CHECK_THROWS   = is_throws | is_check,\par
729         DT_REQUIRE_THROWS = is_throws | is_require,\par
730 \par
731         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
732         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
733         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
734 \par
735         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
736         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
737         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
738 \par
739         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
740         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
741         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
742 \par
743         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
744         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
745         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
746 \par
747         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
748         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
749         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
750 \par
751         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
752         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
753         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
754 \par
755         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
756         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
757         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
758 \par
759         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
760         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
761         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
762 \par
763         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
764         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
765         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
766 \par
767         DT_WARN_LE    = is_normal | is_le | is_warn,\par
768         DT_CHECK_LE   = is_normal | is_le | is_check,\par
769         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
770 \par
771         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
772         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
773         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
774 \par
775         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
776         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
777         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
778     \};\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::Color\par \pard\plain 
{\tc\tcl2 \v doctest::Color}
{\xe \v doctest::Color}
{\bkmkstart AAAAAAABTR}
{\bkmkend AAAAAAABTR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
, {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
, {\b None} = 0
, {\b White}
, {\b Red}
, {\b Green}
, {\b Blue}
, {\b Cyan}
, {\b Yellow}
, {\b Grey}
, {\b Bright} = 0x10
, {\b BrightRed} = Bright | Red
, {\b BrightGreen} = Bright | Green
, {\b LightGrey} = Bright | Grey
, {\b BrightWhite} = Bright | White
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Enum\:doctest::Color}
{\xe \v doctest::Color\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::Color::Enum}}}
\par
{\bkmkstart AAAAAAABTS}
{\bkmkend AAAAAAABTS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
\cell }{\cell }{\row }
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 669     \{\par
670         None = 0,\par
671         White,\par
672         Red,\par
673         Green,\par
674         Blue,\par
675         Cyan,\par
676         Yellow,\par
677         Grey,\par
678 \par
679         Bright = 0x10,\par
680 \par
681         BrightRed   = Bright | Red,\par
682         BrightGreen = Bright | Green,\par
683         LightGrey   = Bright | Grey,\par
684         BrightWhite = Bright | White\par
685     \};\par
}
}
{\xe \v Enum\:doctest::Color}
{\xe \v doctest::Color\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::Color::Enum}}}
\par
{\bkmkstart AAAAAAABTS}
{\bkmkend AAAAAAABTS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
\cell }{\cell }{\row }
{\xe \v None\:doctest::Color}
{\xe \v doctest::Color\:None}
{\qr None{\bkmkstart AAAAAAABTT}
{\bkmkend AAAAAAABTT}
\cell }{\cell }{\row }
{\xe \v White\:doctest::Color}
{\xe \v doctest::Color\:White}
{\qr White{\bkmkstart AAAAAAABTU}
{\bkmkend AAAAAAABTU}
\cell }{\cell }{\row }
{\xe \v Red\:doctest::Color}
{\xe \v doctest::Color\:Red}
{\qr Red{\bkmkstart AAAAAAABTV}
{\bkmkend AAAAAAABTV}
\cell }{\cell }{\row }
{\xe \v Green\:doctest::Color}
{\xe \v doctest::Color\:Green}
{\qr Green{\bkmkstart AAAAAAABTW}
{\bkmkend AAAAAAABTW}
\cell }{\cell }{\row }
{\xe \v Blue\:doctest::Color}
{\xe \v doctest::Color\:Blue}
{\qr Blue{\bkmkstart AAAAAAABTX}
{\bkmkend AAAAAAABTX}
\cell }{\cell }{\row }
{\xe \v Cyan\:doctest::Color}
{\xe \v doctest::Color\:Cyan}
{\qr Cyan{\bkmkstart AAAAAAABTY}
{\bkmkend AAAAAAABTY}
\cell }{\cell }{\row }
{\xe \v Yellow\:doctest::Color}
{\xe \v doctest::Color\:Yellow}
{\qr Yellow{\bkmkstart AAAAAAABTZ}
{\bkmkend AAAAAAABTZ}
\cell }{\cell }{\row }
{\xe \v Grey\:doctest::Color}
{\xe \v doctest::Color\:Grey}
{\qr Grey{\bkmkstart AAAAAAABUA}
{\bkmkend AAAAAAABUA}
\cell }{\cell }{\row }
{\xe \v Bright\:doctest::Color}
{\xe \v doctest::Color\:Bright}
{\qr Bright{\bkmkstart AAAAAAABUB}
{\bkmkend AAAAAAABUB}
\cell }{\cell }{\row }
{\xe \v BrightRed\:doctest::Color}
{\xe \v doctest::Color\:BrightRed}
{\qr BrightRed{\bkmkstart AAAAAAABUC}
{\bkmkend AAAAAAABUC}
\cell }{\cell }{\row }
{\xe \v BrightGreen\:doctest::Color}
{\xe \v doctest::Color\:BrightGreen}
{\qr BrightGreen{\bkmkstart AAAAAAABUD}
{\bkmkend AAAAAAABUD}
\cell }{\cell }{\row }
{\xe \v LightGrey\:doctest::Color}
{\xe \v doctest::Color\:LightGrey}
{\qr LightGrey{\bkmkstart AAAAAAABUE}
{\bkmkend AAAAAAABUE}
\cell }{\cell }{\row }
{\xe \v BrightWhite\:doctest::Color}
{\xe \v doctest::Color\:BrightWhite}
{\qr BrightWhite{\bkmkstart AAAAAAABUF}
{\bkmkend AAAAAAABUF}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 669     \{\par
670         None = 0,\par
671         White,\par
672         Red,\par
673         Green,\par
674         Blue,\par
675         Cyan,\par
676         Yellow,\par
677         Grey,\par
678 \par
679         Bright = 0x10,\par
680 \par
681         BrightRed   = Bright | Red,\par
682         BrightGreen = Bright | Green,\par
683         LightGrey   = Bright | Grey,\par
684         BrightWhite = Bright | White\par
685     \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator<<\:doctest::Color}
{\xe \v doctest::Color\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & doctest::Color::operator<< ({\b std::ostream} &  {\i s}, {\b Color::Enum}  {\i code})}}
\par
{\bkmkstart AAAAAAABUG}
{\bkmkend AAAAAAABUG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::detail\par \pard\plain 
{\tc\tcl2 \v doctest::detail}
{\xe \v doctest::detail}
{\bkmkstart AAAAAAABUH}
{\bkmkend AAAAAAABUH}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b types}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ContextScope}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ContextScopeBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b deferred_false}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ExceptionTranslator}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Expression_lhs}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< const char[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< const void * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b filldata< T[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b has_insertion_operator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b RelationalComparator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b TestSuite}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es de Tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b funcType} = void(*)()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b assert_handler} = void(*)(const {\b AssertData} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b reporterCreatorFunc} = {\b IReporter} *(*)(const {\b ContextOptions} &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T && {\b declval} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b forward} (typename {\b types::remove_reference}< T >::type &t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b forward} (typename {\b types::remove_reference}< T >::type &&t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b tlssPush} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b tlssPop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b filloss} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , size_t N> void {\b filloss} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b toStream} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b Result} &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b reporterCreator} (const {\b ContextOptions} &o)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Vari\'E1veis\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b DOCTEST_INTERFACE} {\b TestCase}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es dos tipos\par
\pard\plain 
{\xe \v assert_handler\:doctest::detail}
{\xe \v doctest::detail\:assert_handler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* {\b doctest::detail::assert_handler})(const {\b AssertData} &)}}
\par
{\bkmkstart AAAAAAABUI}
{\bkmkend AAAAAAABUI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v funcType\:doctest::detail}
{\xe \v doctest::detail\:funcType}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef void(* {\b doctest::detail::funcType})()}}
\par
{\bkmkstart AAAAAAABUJ}
{\bkmkend AAAAAAABUJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreatorFunc\:doctest::detail}
{\xe \v doctest::detail\:reporterCreatorFunc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b IReporter} *(* {\b doctest::detail::reporterCreatorFunc})(const {\b ContextOptions} &)}}
\par
{\bkmkstart AAAAAAABUK}
{\bkmkend AAAAAAABUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail}
{\xe \v doctest::detail\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool doctest::detail::binary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABUL}
{\bkmkend AAAAAAABUL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1724                                                                        \{\par
1725         {\cf18 bool} failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1726 \par
1727         {\cf20 // ###################################################################################}\par
1728         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1729         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1730         {\cf20 // ###################################################################################}\par
1731         DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1732         DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1733         {\cf19 return} !failed;\par
1734     \}\par
}
}
{\xe \v checkIfShouldThrow\:doctest::detail}
{\xe \v doctest::detail\:checkIfShouldThrow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::checkIfShouldThrow ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABUM}
{\bkmkend AAAAAAABUM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v declval\:doctest::detail}
{\xe \v doctest::detail\:declval}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T && doctest::detail::declval ()}}
\par
{\bkmkstart AAAAAAABUN}
{\bkmkend AAAAAAABUN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v decomp_assert\:doctest::detail}
{\xe \v doctest::detail\:decomp_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::decomp_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b Result} &  {\i result})}}
\par
{\bkmkstart AAAAAAABUO}
{\bkmkend AAAAAAABUO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v failed_out_of_a_testing_context\:doctest::detail}
{\xe \v doctest::detail\:failed_out_of_a_testing_context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::failed_out_of_a_testing_context (const {\b AssertData} &  {\i ad})}}
\par
{\bkmkstart AAAAAAABUP}
{\bkmkend AAAAAAABUP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v filloss\:doctest::detail}
{\xe \v doctest::detail\:filloss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > void doctest::detail::filloss ({\b std::ostream} *  {\i stream}, const T &  {\i in})}}
\par
{\bkmkstart AAAAAAABUQ}
{\bkmkend AAAAAAABUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1024                                                   \{\par
1025         filldata<T>::fill(stream, in);\par
1026     \}\par
}
}
{\xe \v filloss\:doctest::detail}
{\xe \v doctest::detail\:filloss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , size_t N> void doctest::detail::filloss ({\b std::ostream} *  {\i stream}, const T(&)  {\i in}[N])}}
\par
{\bkmkstart AAAAAAABUR}
{\bkmkend AAAAAAABUR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1029                                                        \{ {\cf20 // NOLINT(*-avoid-c-arrays)}\par
1030         {\cf20 // T[N], T(&)[N], T(&&)[N] have same behaviour.}\par
1031         {\cf20 // Hence remove reference.}\par
1032         filloss<{\cf17 typename} types::remove_reference<{\cf17 decltype}(in)>::type>(stream, in);\par
1033     \}\par
}
}
{\xe \v forward\:doctest::detail}
{\xe \v doctest::detail\:forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && doctest::detail::forward (typename {\b types::remove_reference}< T >::type &&  {\i t})}}
\par
{\bkmkstart AAAAAAABUS}
{\bkmkend AAAAAAABUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 965                                                                                                    \{\par
966         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
967     \}\par
}
}
{\xe \v forward\:doctest::detail}
{\xe \v doctest::detail\:forward}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && doctest::detail::forward (typename {\b types::remove_reference}< T >::type &  {\i t})}}
\par
{\bkmkstart AAAAAAABUT}
{\bkmkend AAAAAAABUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 960                                                                                                   \{\par
961         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
962     \}\par
}
}
{\xe \v instantiationHelper\:doctest::detail}
{\xe \v doctest::detail\:instantiationHelper}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int doctest::detail::instantiationHelper (const T & )}}
\par
{\bkmkstart AAAAAAABUU}
{\bkmkend AAAAAAABUU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1611 \{ {\cf19 return} 0; \}\par
}
}
{\xe \v isDebuggerActive\:doctest::detail}
{\xe \v doctest::detail\:isDebuggerActive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} bool doctest::detail::isDebuggerActive ()}}
\par
{\bkmkstart AAAAAAABUV}
{\bkmkend AAAAAAABUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MakeContextScope\:doctest::detail}
{\xe \v doctest::detail\:MakeContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope}< L > doctest::detail::MakeContextScope (const L &  {\i lambda})}}
\par
{\bkmkstart AAAAAAABUW}
{\bkmkend AAAAAAABUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1867                                                       \{\par
1868         {\cf19 return} ContextScope<L>(lambda);\par
1869     \}\par
}
}
{\xe \v registerExceptionTranslatorImpl\:doctest::detail}
{\xe \v doctest::detail\:registerExceptionTranslatorImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerExceptionTranslatorImpl (const {\b IExceptionTranslator} *  {\i et})}}
\par
{\bkmkstart AAAAAAABUX}
{\bkmkend AAAAAAABUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v registerReporterImpl\:doctest::detail}
{\xe \v doctest::detail\:registerReporterImpl}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::registerReporterImpl (const char *  {\i name}, int  {\i prio}, {\b reporterCreatorFunc}  {\i c}, bool  {\i isReporter})}}
\par
{\bkmkstart AAAAAAABUY}
{\bkmkend AAAAAAABUY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v regTest\:doctest::detail}
{\xe \v doctest::detail\:regTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::regTest (const {\b TestCase} &  {\i tc})}}
\par
{\bkmkstart AAAAAAABUZ}
{\bkmkend AAAAAAABUZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v reporterCreator\:doctest::detail}
{\xe \v doctest::detail\:reporterCreator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename Reporter > {\b IReporter} * doctest::detail::reporterCreator (const {\b ContextOptions} &  {\i o})}}
\par
{\bkmkstart AAAAAAABVA}
{\bkmkend AAAAAAABVA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2062                                                         \{\par
2063         {\cf19 return} {\cf17 new} Reporter(o);\par
2064     \}\par
}
}
{\xe \v setTestSuite\:doctest::detail}
{\xe \v doctest::detail\:setTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} int doctest::detail::setTestSuite (const {\b TestSuite} &  {\i ts})}}
\par
{\bkmkstart AAAAAAABVB}
{\bkmkend AAAAAAABVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stringifyBinaryExpr\:doctest::detail}
{\xe \v doctest::detail\:stringifyBinaryExpr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename R > {\b String} doctest::detail::stringifyBinaryExpr (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const char *  {\i op}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs})}}
\par
{\bkmkstart AAAAAAABVC}
{\bkmkend AAAAAAABVC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1317                                                               \{\par
1318         {\cf19 return} (DOCTEST_STRINGIFY(lhs)) + op + (DOCTEST_STRINGIFY(rhs));\par
1319     \}\par
}
}
{\xe \v throwException\:doctest::detail}
{\xe \v doctest::detail\:throwException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} void doctest::detail::throwException ()}}
\par
{\bkmkstart AAAAAAABVD}
{\bkmkend AAAAAAABVD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tlssPop\:doctest::detail}
{\xe \v doctest::detail\:tlssPop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b String} doctest::detail::tlssPop ()}}
\par
{\bkmkstart AAAAAAABVE}
{\bkmkend AAAAAAABVE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tlssPush\:doctest::detail}
{\xe \v doctest::detail\:tlssPush}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} * doctest::detail::tlssPush ()}}
\par
{\bkmkstart AAAAAAABVF}
{\bkmkend AAAAAAABVF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v toStream\:doctest::detail}
{\xe \v doctest::detail\:toStream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b String} doctest::detail::toStream (const T &  {\i in})}}
\par
{\bkmkstart AAAAAAABVG}
{\bkmkend AAAAAAABVG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1036                                  \{\par
1037         std::ostream* stream = tlssPush();\par
1038         filloss(stream, in);\par
1039         {\cf19 return} tlssPop();\par
1040     \}\par
}
}
{\xe \v unary_assert\:doctest::detail}
{\xe \v doctest::detail\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} bool doctest::detail::unary_assert ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const {\b DOCTEST_REF_WRAP}(L)  {\i val})}}
\par
{\bkmkstart AAAAAAABVH}
{\bkmkend AAAAAAABVH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
OCLINT bitwise operator in conditional\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1738                                                                                         \{\par
1739         {\cf18 bool} failed = !val;\par
1740 \par
1741         {\cf19 if}(at & assertType::is_false) \par
1742             failed = !failed;\par
1743 \par
1744         {\cf20 // ###################################################################################}\par
1745         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1746         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1747         {\cf20 // ###################################################################################}\par
1748         DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));\par
1749         DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));\par
1750         {\cf19 return} !failed;\par
1751     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Vari\'E1veis\par
\pard\plain 
{\xe \v TestCase\:doctest::detail}
{\xe \v doctest::detail\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
struct {\b DOCTEST_INTERFACE} {\b doctest::detail::TestCase}}}
\par
{\bkmkstart AAAAAAABVI}
{\bkmkend AAAAAAABVI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::detail::assertAction\par \pard\plain 
{\tc\tcl2 \v doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction}
{\bkmkstart AAAAAAABZW}
{\bkmkend AAAAAAABZW}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
, {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
, {\b nothing} = 0
, {\b dbgbreak} = 1
, {\b shouldthrow} = 2
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Enum\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::assertAction::Enum}}}
\par
{\bkmkstart AAAAAAABZX}
{\bkmkend AAAAAAABZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\cell }{\cell }{\row }
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1682         \{\par
1683             nothing     = 0,\par
1684             dbgbreak    = 1,\par
1685             shouldthrow = 2\par
1686         \};\par
}
}
{\xe \v Enum\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::assertAction::Enum}}}
\par
{\bkmkstart AAAAAAABZX}
{\bkmkend AAAAAAABZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\cell }{\cell }{\row }
{\xe \v nothing\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:nothing}
{\qr nothing{\bkmkstart AAAAAAABZY}
{\bkmkend AAAAAAABZY}
\cell }{\cell }{\row }
{\xe \v dbgbreak\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:dbgbreak}
{\qr dbgbreak{\bkmkstart AAAAAAABZZ}
{\bkmkend AAAAAAABZZ}
\cell }{\cell }{\row }
{\xe \v shouldthrow\:doctest::detail::assertAction}
{\xe \v doctest::detail::assertAction\:shouldthrow}
{\qr shouldthrow{\bkmkstart AAAAAAACAA}
{\bkmkend AAAAAAACAA}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1682         \{\par
1683             nothing     = 0,\par
1684             dbgbreak    = 1,\par
1685             shouldthrow = 2\par
1686         \};\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::detail::binaryAssertComparison\par \pard\plain 
{\tc\tcl2 \v doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison}
{\bkmkstart AAAAAAACAB}
{\bkmkend AAAAAAACAB}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
, {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
, {\b eq} = 0
, {\b ne}
, {\b gt}
, {\b lt}
, {\b ge}
, {\b le}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Enum\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::binaryAssertComparison::Enum}}}
\par
{\bkmkstart AAAAAAACAC}
{\bkmkend AAAAAAACAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\cell }{\cell }{\row }
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1615         \{\par
1616             eq = 0,\par
1617             ne,\par
1618             gt,\par
1619             lt,\par
1620             ge,\par
1621             le\par
1622         \};\par
}
}
{\xe \v Enum\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::detail::binaryAssertComparison::Enum}}}
\par
{\bkmkstart AAAAAAACAC}
{\bkmkend AAAAAAACAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\cell }{\cell }{\row }
{\xe \v eq\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:eq}
{\qr eq{\bkmkstart AAAAAAACAD}
{\bkmkend AAAAAAACAD}
\cell }{\cell }{\row }
{\xe \v ne\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ne}
{\qr ne{\bkmkstart AAAAAAACAE}
{\bkmkend AAAAAAACAE}
\cell }{\cell }{\row }
{\xe \v gt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:gt}
{\qr gt{\bkmkstart AAAAAAACAF}
{\bkmkend AAAAAAACAF}
\cell }{\cell }{\row }
{\xe \v lt\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:lt}
{\qr lt{\bkmkstart AAAAAAACAG}
{\bkmkend AAAAAAACAG}
\cell }{\cell }{\row }
{\xe \v ge\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:ge}
{\qr ge{\bkmkstart AAAAAAACAH}
{\bkmkend AAAAAAACAH}
\cell }{\cell }{\row }
{\xe \v le\:doctest::detail::binaryAssertComparison}
{\xe \v doctest::detail::binaryAssertComparison\:le}
{\qr le{\bkmkstart AAAAAAACAI}
{\bkmkend AAAAAAACAI}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1615         \{\par
1616             eq = 0,\par
1617             ne,\par
1618             gt,\par
1619             lt,\par
1620             ge,\par
1621             le\par
1622         \};\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::detail::types\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types}
{\xe \v doctest::detail::types}
{\bkmkstart AAAAAAACAJ}
{\bkmkend AAAAAAACAJ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b enable_if}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b enable_if< true, T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b false_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_array}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_array< T[SIZE]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_enum}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_pointer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_pointer< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_rvalue_reference}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b is_rvalue_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b true_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b underlying_type}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest::TestCaseFailureReason\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason}
{\bkmkstart AAAAAAACBL}
{\bkmkend AAAAAAACBL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
, {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b Enum} \{ {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
, {\b None} = 0
, {\b AssertFailure} = 1
, {\b Exception} = 2
, {\b Crash} = 4
, {\b TooManyFailedAsserts} = 8
, {\b Timeout} = 16
, {\b ShouldHaveFailedButDidnt} = 32
, {\b ShouldHaveFailedAndDid} = 64
, {\b DidntFailExactlyNumTimes} = 128
, {\b FailedExactlyNumTimes} = 256
, {\b CouldHaveFailedAndDid} = 512
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 
{\xe \v Enum\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::TestCaseFailureReason::Enum}}}
\par
{\bkmkstart AAAAAAACBM}
{\bkmkend AAAAAAACBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\cell }{\cell }{\row }
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1960     \{\par
1961         None                     = 0,\par
1962         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
1963         Exception                = 2,   {\cf20 // test case threw an exception}\par
1964         Crash                    = 4,   {\cf20 // a crash...}\par
1965         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
1966         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
1967         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
1968         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
1969         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
1970         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
1971         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
1972     \};\par
}
}
{\xe \v Enum\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Enum}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b doctest::TestCaseFailureReason::Enum}}}
\par
{\bkmkstart AAAAAAACBM}
{\bkmkend AAAAAAACBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Enumeradores:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\cell }{\cell }{\row }
{\xe \v None\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:None}
{\qr None{\bkmkstart AAAAAAACBN}
{\bkmkend AAAAAAACBN}
\cell }{\cell }{\row }
{\xe \v AssertFailure\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:AssertFailure}
{\qr AssertFailure{\bkmkstart AAAAAAACBO}
{\bkmkend AAAAAAACBO}
\cell }{\cell }{\row }
{\xe \v Exception\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Exception}
{\qr Exception{\bkmkstart AAAAAAACBP}
{\bkmkend AAAAAAACBP}
\cell }{\cell }{\row }
{\xe \v Crash\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Crash}
{\qr Crash{\bkmkstart AAAAAAACBQ}
{\bkmkend AAAAAAACBQ}
\cell }{\cell }{\row }
{\xe \v TooManyFailedAsserts\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:TooManyFailedAsserts}
{\qr TooManyFailedAsserts{\bkmkstart AAAAAAACBR}
{\bkmkend AAAAAAACBR}
\cell }{\cell }{\row }
{\xe \v Timeout\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:Timeout}
{\qr Timeout{\bkmkstart AAAAAAACBS}
{\bkmkend AAAAAAACBS}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedButDidnt\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedButDidnt}
{\qr ShouldHaveFailedButDidnt{\bkmkstart AAAAAAACBT}
{\bkmkend AAAAAAACBT}
\cell }{\cell }{\row }
{\xe \v ShouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:ShouldHaveFailedAndDid}
{\qr ShouldHaveFailedAndDid{\bkmkstart AAAAAAACBU}
{\bkmkend AAAAAAACBU}
\cell }{\cell }{\row }
{\xe \v DidntFailExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:DidntFailExactlyNumTimes}
{\qr DidntFailExactlyNumTimes{\bkmkstart AAAAAAACBV}
{\bkmkend AAAAAAACBV}
\cell }{\cell }{\row }
{\xe \v FailedExactlyNumTimes\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:FailedExactlyNumTimes}
{\qr FailedExactlyNumTimes{\bkmkstart AAAAAAACBW}
{\bkmkend AAAAAAACBW}
\cell }{\cell }{\row }
{\xe \v CouldHaveFailedAndDid\:doctest::TestCaseFailureReason}
{\xe \v doctest::TestCaseFailureReason\:CouldHaveFailedAndDid}
{\qr CouldHaveFailedAndDid{\bkmkstart AAAAAAACBX}
{\bkmkend AAAAAAACBX}
\cell }{\cell }{\row }
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1960     \{\par
1961         None                     = 0,\par
1962         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
1963         Exception                = 2,   {\cf20 // test case threw an exception}\par
1964         Crash                    = 4,   {\cf20 // a crash...}\par
1965         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
1966         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
1967         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
1968         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
1969         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
1970         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
1971         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
1972     \};\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace doctest_detail_test_suite_ns\par \pard\plain 
{\tc\tcl2 \v doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns}
{\bkmkstart AAAAAAACBY}
{\bkmkend AAAAAAACBY}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b getCurrentTestSuite} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v getCurrentTestSuite\:doctest_detail_test_suite_ns}
{\xe \v doctest_detail_test_suite_ns\:getCurrentTestSuite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & doctest_detail_test_suite_ns::getCurrentTestSuite ()}}
\par
{\bkmkstart AAAAAAACBZ}
{\bkmkend AAAAAAACBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace midia_excp\par \pard\plain 
{\tc\tcl2 \v midia_excp}
{\xe \v midia_excp}
{\bkmkstart AAAAAAACCA}
{\bkmkend AAAAAAACCA}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b categoria_invalida}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b codigo_inexistente}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b codigo_repetido}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b erro_de_abertura}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ordem_invalida}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b tipo_desconhecido}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Ref\'EAncia do Namespace std\par \pard\plain 
{\tc\tcl2 \v std}
{\xe \v std}
{\bkmkstart AAAAAAACCZ}
{\bkmkend AAAAAAACCZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b basic_istream}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b basic_ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b char_traits}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b tuple}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es de Tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(nullptr) {\b nullptr_t}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(sizeof(void *) {\b size_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_istream}< char, {\b char_traits}< char > > {\b istream}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class traits > {\b basic_ostream}< char, traits > & {\b operator<<} ({\b basic_ostream}< char, traits > &, const char *)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es dos tipos\par
\pard\plain 
{\xe \v istream\:std}
{\xe \v std\:istream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b basic_istream}< char, {\b char_traits}< char > > {\b std::istream}}}
\par
{\bkmkstart AAAAAAACDA}
{\bkmkend AAAAAAACDA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v nullptr_t\:std}
{\xe \v std\:nullptr_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
decltype(nullptr) typedef {\b std::nullptr_t}}}
\par
{\bkmkstart AAAAAAACDB}
{\bkmkend AAAAAAACDB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ostream\:std}
{\xe \v std\:ostream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b std::ostream}}}
\par
{\bkmkstart AAAAAAACDC}
{\bkmkend AAAAAAACDC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size_t\:std}
{\xe \v std\:size_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef decltype(sizeof(void*) std::size_t) }}
\par
{\bkmkstart AAAAAAACDD}
{\bkmkend AAAAAAACDD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator<<\:std}
{\xe \v std\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class traits > {\b basic_ostream}< char, traits > & std::operator<< ({\b basic_ostream}< char, traits > & , const char * )}}
\par
{\bkmkstart AAAAAAACDE}
{\bkmkend AAAAAAACDE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Classes{\tc \v Classes}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura Alocacao\par \pard\plain 
{\tc\tcl2 \v Alocacao}
{\xe \v Alocacao}
{\bkmkstart AAAAAAABEL}
{\bkmkend AAAAAAABEL}
\par
{
{\f2 #include <Cliente.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Alocacao} (int codigo, std::tm momento_de_locacao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b devolver} (std::tm momento_de_devolucao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getCodigo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b getDevolvido} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::tm {\b getAlocacao} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printInformacao} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _codigo}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::tm {\b _momento_de_locacao}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::tm {\b _momento_de_devolucao} = \{\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b _devolvido}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Alocacao\:Alocacao}
{\xe \v Alocacao\:Alocacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Alocacao::Alocacao (int  {\i codigo}, std::tm  {\i momento_de_locacao}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABEM}
{\bkmkend AAAAAAABEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 18                                                    :\par
19     _codigo(codigo),\par
20     _momento_de_locacao(momento_de_locacao),\par
21     _devolvido({\cf17 false}) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v devolver\:Alocacao}
{\xe \v Alocacao\:devolver}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Alocacao::devolver (std::tm  {\i momento_de_devolucao}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABEN}
{\bkmkend AAAAAAABEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                              \{\par
24         _momento_de_devolucao = momento_de_devolucao;\par
25         _devolvido = {\cf17 true};\par
26     \}\par
}
}
{\xe \v getAlocacao\:Alocacao}
{\xe \v Alocacao\:getAlocacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::tm Alocacao::getAlocacao (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABEO}
{\bkmkend AAAAAAABEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 32 \{{\cf19 return} _momento_de_locacao;\}\par
}
}
{\xe \v getCodigo\:Alocacao}
{\xe \v Alocacao\:getCodigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Alocacao::getCodigo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABEP}
{\bkmkend AAAAAAABEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 28 \{{\cf19 return} _codigo;\}\par
}
}
{\xe \v getDevolvido\:Alocacao}
{\xe \v Alocacao\:getDevolvido}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Alocacao::getDevolvido (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABEQ}
{\bkmkend AAAAAAABEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 30 \{{\cf19 return} _devolvido;\}\par
}
}
{\xe \v printInformacao\:Alocacao}
{\xe \v Alocacao\:printInformacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Alocacao::printInformacao (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABER}
{\bkmkend AAAAAAABER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 34                           \{\par
35         {\cf19 if} (_devolvido)\{\par
36             std::cout << _codigo << {\cf22 " "} << \par
37             std::put_time(&_momento_de_locacao, FORMATO_DATA) << {\cf22 " "} << \par
38             std::put_time(&_momento_de_devolucao, FORMATO_DATA) << std::endl;\par
39         \} {\cf19 else} \{\par
40             std::cout << _codigo << {\cf22 " "} << \par
41             std::put_time(&_momento_de_locacao, FORMATO_DATA) << {\cf22 " "} << \par
42             {\cf22 "--/--/----"} << std::endl;\par
43         \}\par
44     \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v _codigo\:Alocacao}
{\xe \v Alocacao\:_codigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Alocacao::_codigo}}
\par
{\bkmkstart AAAAAAABES}
{\bkmkend AAAAAAABES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v _devolvido\:Alocacao}
{\xe \v Alocacao\:_devolvido}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Alocacao::_devolvido}}
\par
{\bkmkstart AAAAAAABET}
{\bkmkend AAAAAAABET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v _momento_de_devolucao\:Alocacao}
{\xe \v Alocacao\:_momento_de_devolucao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::tm Alocacao::_momento_de_devolucao = \{\}}}
\par
{\bkmkstart AAAAAAABEU}
{\bkmkend AAAAAAABEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 15 \{\};\par
}
}
{\xe \v _momento_de_locacao\:Alocacao}
{\xe \v Alocacao\:_momento_de_locacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::tm Alocacao::_momento_de_locacao}}
\par
{\bkmkstart AAAAAAABEV}
{\bkmkend AAAAAAABEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b Cliente.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::Approx\par \pard\plain 
{\tc\tcl2 \v doctest::Approx}
{\xe \v doctest::Approx}
{\bkmkstart AAAAAAABJP}
{\bkmkend AAAAAAABJP}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b operator()} (double value) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b epsilon} (double newEpsilon)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b scale} (double newScale)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} (double value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} {\b operator()} (double value) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b epsilon} (double newEpsilon)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Approx} & {\b scale} (double newScale)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_epsilon}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_scale}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_value}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator==} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator!=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>=} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator<} (const {\b Approx} &lhs, double rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (double lhs, const {\b Approx} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} friend bool {\b operator>} (const {\b Approx} &lhs, double rhs)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Approx\:doctest::Approx}
{\xe \v doctest::Approx\:Approx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Approx::Approx (double  {\i value})}}
\par
{\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Approx\:doctest::Approx}
{\xe \v doctest::Approx\:Approx}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Approx::Approx (double  {\i value})}}
\par
{\bkmkstart AAAAAAABJQ}
{\bkmkend AAAAAAABJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::epsilon (double  {\i newEpsilon})}}
\par
{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::epsilon (double  {\i newEpsilon})}}
\par
{\bkmkstart AAAAAAABJR}
{\bkmkend AAAAAAABJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator()\:doctest::Approx}
{\xe \v doctest::Approx\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} doctest::Approx::operator() (double  {\i value}) const}}
\par
{\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator()\:doctest::Approx}
{\xe \v doctest::Approx\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} doctest::Approx::operator() (double  {\i value}) const}}
\par
{\bkmkstart AAAAAAABJS}
{\bkmkend AAAAAAABJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v scale\:doctest::Approx}
{\xe \v doctest::Approx\:scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::scale (double  {\i newScale})}}
\par
{\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v scale\:doctest::Approx}
{\xe \v doctest::Approx\:scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Approx} & doctest::Approx::scale (double  {\i newScale})}}
\par
{\bkmkstart AAAAAAABJT}
{\bkmkend AAAAAAABJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos s\'EDmbolos amigos e relacionados\par
\pard\plain 
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJU}
{\bkmkend AAAAAAABJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!=\:doctest::Approx}
{\xe \v doctest::Approx\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator!= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJV}
{\bkmkend AAAAAAABJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJW}
{\bkmkend AAAAAAABJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::Approx}
{\xe \v doctest::Approx\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator< (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJX}
{\bkmkend AAAAAAABJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJY}
{\bkmkend AAAAAAABJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<=\:doctest::Approx}
{\xe \v doctest::Approx\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator<= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABJZ}
{\bkmkend AAAAAAABJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKA}
{\bkmkend AAAAAAABKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::Approx}
{\xe \v doctest::Approx\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator== (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKB}
{\bkmkend AAAAAAABKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKC}
{\bkmkend AAAAAAABKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>\:doctest::Approx}
{\xe \v doctest::Approx\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator> (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKD}
{\bkmkend AAAAAAABKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (const {\b Approx} &  {\i lhs}, double  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKE}
{\bkmkend AAAAAAABKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator>=\:doctest::Approx}
{\xe \v doctest::Approx\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} friend bool operator>= (double  {\i lhs}, const {\b Approx} &  {\i rhs}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABKF}
{\bkmkend AAAAAAABKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_epsilon\:doctest::Approx}
{\xe \v doctest::Approx\:m_epsilon}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_epsilon}}
\par
{\bkmkstart AAAAAAABKG}
{\bkmkend AAAAAAABKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_scale\:doctest::Approx}
{\xe \v doctest::Approx\:m_scale}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_scale}}
\par
{\bkmkstart AAAAAAABKH}
{\bkmkend AAAAAAABKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_value\:doctest::Approx}
{\xe \v doctest::Approx\:m_value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::Approx::m_value}}
\par
{\bkmkstart AAAAAAABKI}
{\bkmkend AAAAAAABKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::AssertData\par \pard\plain 
{\tc\tcl2 \v doctest::AssertData}
{\xe \v doctest::AssertData}
{\bkmkstart AAAAAAABKJ}
{\bkmkend AAAAAAABKJ}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::AssertData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_assert_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b StringContains}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} * {\b m_test_case}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_expr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_failed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_exception}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw_as}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} {\b m_exception_string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v AssertData\:doctest::AssertData}
{\xe \v doctest::AssertData\:AssertData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::AssertData ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b StringContains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AssertData\:doctest::AssertData}
{\xe \v doctest::AssertData\:AssertData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::AssertData ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b StringContains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAABKK}
{\bkmkend AAAAAAABKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_at\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::AssertData::m_at}}
\par
{\bkmkstart AAAAAAABKL}
{\bkmkend AAAAAAABKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_decomp\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_decomp}}
\par
{\bkmkstart AAAAAAABKM}
{\bkmkend AAAAAAABKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::AssertData::m_exception}}
\par
{\bkmkstart AAAAAAABKN}
{\bkmkend AAAAAAABKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_string\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} doctest::AssertData::m_exception_string}}
\par
{\bkmkstart AAAAAAABKO}
{\bkmkend AAAAAAABKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_exception_type\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_exception_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::m_exception_type}}
\par
{\bkmkstart AAAAAAABKP}
{\bkmkend AAAAAAABKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expr\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_expr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::m_expr}}
\par
{\bkmkstart AAAAAAABKQ}
{\bkmkend AAAAAAABKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_failed\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_failed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_failed}}
\par
{\bkmkstart AAAAAAABKR}
{\bkmkend AAAAAAABKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::m_file}}
\par
{\bkmkstart AAAAAAABKS}
{\bkmkend AAAAAAABKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::AssertData::m_line}}
\par
{\bkmkstart AAAAAAABKT}
{\bkmkend AAAAAAABKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_case\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_test_case}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData} * doctest::AssertData::m_test_case}}
\par
{\bkmkstart AAAAAAABKU}
{\bkmkend AAAAAAABKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw}}
\par
{\bkmkstart AAAAAAABKV}
{\bkmkend AAAAAAABKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_threw_as\:doctest::AssertData}
{\xe \v doctest::AssertData\:m_threw_as}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::m_threw_as}}
\par
{\bkmkstart AAAAAAABKW}
{\bkmkend AAAAAAABKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Classe std::basic_istream< charT, traits >\par \pard\plain 
{\tc\tcl2 \v std::basic_istream< charT, traits >}
{\xe \v std::basic_istream< charT, traits >}
{\bkmkstart AAAAAAACDF}
{\bkmkend AAAAAAACDF}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Classe std::basic_ostream< charT, traits >\par \pard\plain 
{\tc\tcl2 \v std::basic_ostream< charT, traits >}
{\xe \v std::basic_ostream< charT, traits >}
{\bkmkstart AAAAAAACDG}
{\bkmkend AAAAAAACDG}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::categoria_invalida\par \pard\plain 
{\tc\tcl2 \v midia_excp::categoria_invalida}
{\xe \v midia_excp::categoria_invalida}
{\bkmkstart AAAAAAACCB}
{\bkmkend AAAAAAACCB}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::categoria_invalida:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1categoria__invalida.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b categoria_invalida} (std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_categoria} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v categoria_invalida\:midia_excp::categoria_invalida}
{\xe \v midia_excp::categoria_invalida\:categoria_invalida}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::categoria_invalida::categoria_invalida (std::string  {\i categoria})}}
\par
{\bkmkstart AAAAAAACCC}
{\bkmkend AAAAAAACCC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 15 : _categoria(categoria) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_categoria\:midia_excp::categoria_invalida}
{\xe \v midia_excp::categoria_invalida\:get_categoria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string midia_excp::categoria_invalida::get_categoria (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCD}
{\bkmkend AAAAAAACCD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 74 \{ {\cf19 return} _categoria; \};\par
}
}
{\xe \v what\:midia_excp::categoria_invalida}
{\xe \v midia_excp::categoria_invalida\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::categoria_invalida::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCE}
{\bkmkend AAAAAAACCE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 72 \{ {\cf19 return} {\cf22 "ERRO: a categoria de cadastro \'E9 inv\'E1lida"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura std::char_traits< charT >\par \pard\plain 
{\tc\tcl2 \v std::char_traits< charT >}
{\xe \v std::char_traits< charT >}
{\bkmkstart AAAAAAACDH}
{\bkmkend AAAAAAACDH}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Cliente\par \pard\plain 
{\tc\tcl2 \v Cliente}
{\xe \v Cliente}
{\bkmkstart AAAAAAABEW}
{\bkmkend AAAAAAABEW}
\par
{
{\f2 #include <Cliente.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cliente} (std::string nome, std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getNome} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCPF} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b fazerLocacao} (int codigo, std::tm momento_de_locacao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b fazerDevolucao} (int codigo, std::tm momento_de_devolucao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::tm {\b getDataLocacao} (int codigo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b printHistorico} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isHistoricoVazio} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Cliente\:Cliente}
{\xe \v Cliente\:Cliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Cliente::Cliente (std::string  {\i nome}, std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABEX}
{\bkmkend AAAAAAABEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4                                              \{\par
5     this->nome = nome;\par
6     this->cpf = cpf;\par
7 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fazerDevolucao\:Cliente}
{\xe \v Cliente\:fazerDevolucao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Cliente::fazerDevolucao (int  {\i codigo}, std::tm  {\i momento_de_devolucao})}}
\par
{\bkmkstart AAAAAAABEY}
{\bkmkend AAAAAAABEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                                                  \{\par
24     {\cf19 for} ({\cf17 auto} & it : historico)\{\par
25         {\cf19 if} (it->getCodigo() == codigo) \{\par
26             it->devolver(momento_de_devolucao);\par
27         \}\par
28     \}\par
29     {\cf19 return} 0;\par
30 \}\par
}
}
{\xe \v fazerLocacao\:Cliente}
{\xe \v Cliente\:fazerLocacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Cliente::fazerLocacao (int  {\i codigo}, std::tm  {\i momento_de_locacao})}}
\par
{\bkmkstart AAAAAAABEZ}
{\bkmkend AAAAAAABEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 17                                                              \{\par
18     Alocacao * alocacao = {\cf17 new} Alocacao(codigo, momento_de_locacao);\par
19     historico.push_back(alocacao); \par
20     {\cf19 return} 0;\par
21 \}\par
}
}
{\xe \v getCPF\:Cliente}
{\xe \v Cliente\:getCPF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Cliente::getCPF ()}}
\par
{\bkmkstart AAAAAAABFA}
{\bkmkend AAAAAAABFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 13                          \{\par
14     {\cf19 return} this->cpf;\par
15 \}\par
}
}
{\xe \v getDataLocacao\:Cliente}
{\xe \v Cliente\:getDataLocacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::tm Cliente::getDataLocacao (int  {\i codigo})}}
\par
{\bkmkstart AAAAAAABFB}
{\bkmkend AAAAAAABFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 32                                        \{\par
33     {\cf19 for} ({\cf17 auto} & it : historico)\{\par
34         {\cf19 if} (it->getCodigo() == codigo) \{\par
35             {\cf19 return} it->getAlocacao(); \par
36         \}\par
37     \}\par
38 \}\par
}
}
{\xe \v getNome\:Cliente}
{\xe \v Cliente\:getNome}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Cliente::getNome ()}}
\par
{\bkmkstart AAAAAAABFC}
{\bkmkend AAAAAAABFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9                           \{\par
10     {\cf19 return} this->nome;\par
11 \}\par
}
}
{\xe \v isHistoricoVazio\:Cliente}
{\xe \v Cliente\:isHistoricoVazio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Cliente::isHistoricoVazio ()}}
\par
{\bkmkstart AAAAAAABFD}
{\bkmkend AAAAAAABFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 61 \{{\cf19 return} historico.empty();\}\par
}
}
{\xe \v printHistorico\:Cliente}
{\xe \v Cliente\:printHistorico}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Cliente::printHistorico ()}}
\par
{\bkmkstart AAAAAAABFE}
{\bkmkend AAAAAAABFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 40                             \{\par
41     {\cf19 if} (historico.empty()) \{\par
42         {\cf19 return} {\cf17 false};\par
43     \}\par
44 \par
45     std::sort(historico.begin(), historico.end(),\par
46               [](Alocacao *a, Alocacao *b) \{\par
47                   return std::mktime(&a->_momento_de_locacao) < std::mktime(&b->_momento_de_locacao);\par
48               \});\par
49 \par
50     std::cout << {\cf22 "COD"} << {\cf22 "   "} <<\par
51                  {\cf22 "Alugado"} << {\cf22 "   "} <<\par
52                  {\cf22 "Devolvido"} << std::endl;\par
53 \par
54     {\cf19 for} ({\cf17 auto} &alocacaoPtr : historico) \{\par
55         alocacaoPtr->printInformacao();\par
56     \}\par
57 \par
58     {\cf19 return} {\cf17 true};\par
59 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b Cliente.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b Cliente.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::codigo_inexistente\par \pard\plain 
{\tc\tcl2 \v midia_excp::codigo_inexistente}
{\xe \v midia_excp::codigo_inexistente}
{\bkmkstart AAAAAAACCF}
{\bkmkend AAAAAAACCF}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::codigo_inexistente:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1codigo__inexistente.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b codigo_inexistente} (int codigo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_codigo} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v codigo_inexistente\:midia_excp::codigo_inexistente}
{\xe \v midia_excp::codigo_inexistente\:codigo_inexistente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::codigo_inexistente::codigo_inexistente (int  {\i codigo})}}
\par
{\bkmkstart AAAAAAACCG}
{\bkmkend AAAAAAACCG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7 : _codigo(codigo) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_codigo\:midia_excp::codigo_inexistente}
{\xe \v midia_excp::codigo_inexistente\:get_codigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int midia_excp::codigo_inexistente::get_codigo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCH}
{\bkmkend AAAAAAACCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 26 \{ {\cf19 return} _codigo; \};\par
}
}
{\xe \v what\:midia_excp::codigo_inexistente}
{\xe \v midia_excp::codigo_inexistente\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::codigo_inexistente::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCI}
{\bkmkend AAAAAAACCI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 24 \{ {\cf19 return} {\cf22 "ERRO: c\'F3digo inexistente"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::codigo_repetido\par \pard\plain 
{\tc\tcl2 \v midia_excp::codigo_repetido}
{\xe \v midia_excp::codigo_repetido}
{\bkmkstart AAAAAAACCJ}
{\bkmkend AAAAAAACCJ}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::codigo_repetido:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1codigo__repetido.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b codigo_repetido} (int codigo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_codigo} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v codigo_repetido\:midia_excp::codigo_repetido}
{\xe \v midia_excp::codigo_repetido\:codigo_repetido}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::codigo_repetido::codigo_repetido (int  {\i codigo})}}
\par
{\bkmkstart AAAAAAACCK}
{\bkmkend AAAAAAACCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5 : _codigo(codigo) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_codigo\:midia_excp::codigo_repetido}
{\xe \v midia_excp::codigo_repetido\:get_codigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int midia_excp::codigo_repetido::get_codigo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCL}
{\bkmkend AAAAAAACCL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 14 \{ {\cf19 return} _codigo; \};\par
}
}
{\xe \v what\:midia_excp::codigo_repetido}
{\xe \v midia_excp::codigo_repetido\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::codigo_repetido::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCM}
{\bkmkend AAAAAAACCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12 \{ {\cf19 return} {\cf22 "ERRO: c\'F3digo repetido"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe doctest::Contains\par \pard\plain 
{\tc\tcl2 \v doctest::Contains}
{\xe \v doctest::Contains}
{\bkmkstart AAAAAAABLD}
{\bkmkend AAAAAAABLD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Contains} (const {\b String} &{\b string})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b checkWith} (const {\b String} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Contains} (const {\b String} &{\b string})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b checkWith} (const {\b String} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Contains\:doctest::Contains}
{\xe \v doctest::Contains\:Contains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Contains::Contains (const {\b String} &  {\i string}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Contains\:doctest::Contains}
{\xe \v doctest::Contains\:Contains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Contains::Contains (const {\b String} &  {\i string}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABLE}
{\bkmkend AAAAAAABLE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v checkWith\:doctest::Contains}
{\xe \v doctest::Contains\:checkWith}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Contains::checkWith (const {\b String} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v checkWith\:doctest::Contains}
{\xe \v doctest::Contains\:checkWith}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Contains::checkWith (const {\b String} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABLF}
{\bkmkend AAAAAAABLF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v string\:doctest::Contains}
{\xe \v doctest::Contains\:string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::Contains::string}}
\par
{\bkmkstart AAAAAAABLG}
{\bkmkend AAAAAAABLG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe doctest::Context\par \pard\plain 
{\tc\tcl2 \v doctest::Context}
{\xe \v doctest::Context}
{\bkmkstart AAAAAAABLH}
{\bkmkend AAAAAAABLH}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (int argc=0, const char *const *argv=nullptr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Context} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyCommandLine} (int argc, const char *const *argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addFilter} (const char *filter, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearFilters} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, bool value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b shouldExit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAsDefaultForAssertsOutOfTestCases} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAssertHandler} ({\b detail::assert_handler} ah)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCout} ({\b std::ostream} *out)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b run} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (int argc=0, const char *const *argv=nullptr)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} (const {\b Context} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Context} & {\b operator=} ({\b Context} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Context} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b applyCommandLine} (int argc, const char *const *argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b addFilter} (const char *filter, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clearFilters} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, bool value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setOption} (const char *option, const char *value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b shouldExit} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAsDefaultForAssertsOutOfTestCases} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setAssertHandler} ({\b detail::assert_handler} ah)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setCout} ({\b std::ostream} *out)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b run} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (int  {\i argc} = {\f2 0}, const char *const *  {\i argv} = {\f2 nullptr}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Context\:doctest::Context}
{\xe \v doctest::Context\:~Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::~Context ()}}
\par
{\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (int  {\i argc} = {\f2 0}, const char *const *  {\i argv} = {\f2 nullptr}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABLI}
{\bkmkend AAAAAAABLI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLJ}
{\bkmkend AAAAAAABLJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Context\:doctest::Context}
{\xe \v doctest::Context\:Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::Context ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLK}
{\bkmkend AAAAAAABLK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Context\:doctest::Context}
{\xe \v doctest::Context\:~Context}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::Context::~Context ()}}
\par
{\bkmkstart AAAAAAABLL}
{\bkmkend AAAAAAABLL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v addFilter\:doctest::Context}
{\xe \v doctest::Context\:addFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::addFilter (const char *  {\i filter}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v addFilter\:doctest::Context}
{\xe \v doctest::Context\:addFilter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::addFilter (const char *  {\i filter}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAABLM}
{\bkmkend AAAAAAABLM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v applyCommandLine\:doctest::Context}
{\xe \v doctest::Context\:applyCommandLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::applyCommandLine (int  {\i argc}, const char *const *  {\i argv})}}
\par
{\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v applyCommandLine\:doctest::Context}
{\xe \v doctest::Context\:applyCommandLine}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::applyCommandLine (int  {\i argc}, const char *const *  {\i argv})}}
\par
{\bkmkstart AAAAAAABLN}
{\bkmkend AAAAAAABLN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v clearFilters\:doctest::Context}
{\xe \v doctest::Context\:clearFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::clearFilters ()}}
\par
{\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v clearFilters\:doctest::Context}
{\xe \v doctest::Context\:clearFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::clearFilters ()}}
\par
{\bkmkstart AAAAAAABLO}
{\bkmkend AAAAAAABLO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= (const {\b Context} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLP}
{\bkmkend AAAAAAABLP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::Context}
{\xe \v doctest::Context\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Context} & doctest::Context::operator= ({\b Context} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABLQ}
{\bkmkend AAAAAAABLQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run\:doctest::Context}
{\xe \v doctest::Context\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::Context::run ()}}
\par
{\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run\:doctest::Context}
{\xe \v doctest::Context\:run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::Context::run ()}}
\par
{\bkmkstart AAAAAAABLR}
{\bkmkend AAAAAAABLR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAsDefaultForAssertsOutOfTestCases\:doctest::Context}
{\xe \v doctest::Context\:setAsDefaultForAssertsOutOfTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAsDefaultForAssertsOutOfTestCases ()}}
\par
{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAsDefaultForAssertsOutOfTestCases\:doctest::Context}
{\xe \v doctest::Context\:setAsDefaultForAssertsOutOfTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAsDefaultForAssertsOutOfTestCases ()}}
\par
{\bkmkstart AAAAAAABLS}
{\bkmkend AAAAAAABLS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAssertHandler\:doctest::Context}
{\xe \v doctest::Context\:setAssertHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAssertHandler ({\b detail::assert_handler}  {\i ah})}}
\par
{\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setAssertHandler\:doctest::Context}
{\xe \v doctest::Context\:setAssertHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setAssertHandler ({\b detail::assert_handler}  {\i ah})}}
\par
{\bkmkstart AAAAAAABLT}
{\bkmkend AAAAAAABLT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setCout\:doctest::Context}
{\xe \v doctest::Context\:setCout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setCout ({\b std::ostream} *  {\i out})}}
\par
{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setCout\:doctest::Context}
{\xe \v doctest::Context\:setCout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setCout ({\b std::ostream} *  {\i out})}}
\par
{\bkmkstart AAAAAAABLU}
{\bkmkend AAAAAAABLU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, bool  {\i value})}}
\par
{\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, bool  {\i value})}}
\par
{\bkmkstart AAAAAAABLV}
{\bkmkend AAAAAAABLV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, const char *  {\i value})}}
\par
{\bkmkstart AAAAAAABLW}
{\bkmkend AAAAAAABLW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, int  {\i value})}}
\par
{\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setOption\:doctest::Context}
{\xe \v doctest::Context\:setOption}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::Context::setOption (const char *  {\i option}, int  {\i value})}}
\par
{\bkmkstart AAAAAAABLX}
{\bkmkend AAAAAAABLX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v shouldExit\:doctest::Context}
{\xe \v doctest::Context\:shouldExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Context::shouldExit ()}}
\par
{\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v shouldExit\:doctest::Context}
{\xe \v doctest::Context\:shouldExit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::Context::shouldExit ()}}
\par
{\bkmkstart AAAAAAABLY}
{\bkmkend AAAAAAABLY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::ContextOptions\par \pard\plain 
{\tc\tcl2 \v doctest::ContextOptions}
{\xe \v doctest::ContextOptions}
{\bkmkstart AAAAAAABLZ}
{\bkmkend AAAAAAABLZ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b cout} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b binary_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b detail::TestCase} * {\b currentTest} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b out}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b order_by}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b rand_seed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b first}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b last}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b abort_after}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b subcase_filter_levels}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b success}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b case_sensitive}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b exit}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b duration}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b minimal}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b quiet}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_throw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_exitcode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_run}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_intro}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b force_colors}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b gnu_file_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_path_in_filenames}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_line_numbers}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_debug_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_skipped_summary}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b no_time_in_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b version}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b count}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_cases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_test_suites}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b list_reporters}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v abort_after\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:abort_after}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::abort_after}}
\par
{\bkmkstart AAAAAAABMA}
{\bkmkend AAAAAAABMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v binary_name\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:binary_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::binary_name}}
\par
{\bkmkstart AAAAAAABMB}
{\bkmkend AAAAAAABMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v case_sensitive\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:case_sensitive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::case_sensitive}}
\par
{\bkmkstart AAAAAAABMC}
{\bkmkend AAAAAAABMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v count\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:count}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::count}}
\par
{\bkmkstart AAAAAAABMD}
{\bkmkend AAAAAAABMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v cout\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:cout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream} * doctest::ContextOptions::cout = nullptr}}
\par
{\bkmkstart AAAAAAABME}
{\bkmkend AAAAAAABME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v currentTest\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:currentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b detail::TestCase} * doctest::ContextOptions::currentTest = nullptr}}
\par
{\bkmkstart AAAAAAABMF}
{\bkmkend AAAAAAABMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v duration\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:duration}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::duration}}
\par
{\bkmkstart AAAAAAABMG}
{\bkmkend AAAAAAABMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v exit\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:exit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::exit}}
\par
{\bkmkstart AAAAAAABMH}
{\bkmkend AAAAAAABMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v first\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:first}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::first}}
\par
{\bkmkstart AAAAAAABMI}
{\bkmkend AAAAAAABMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v force_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:force_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::force_colors}}
\par
{\bkmkstart AAAAAAABMJ}
{\bkmkend AAAAAAABMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v gnu_file_line\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:gnu_file_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::gnu_file_line}}
\par
{\bkmkstart AAAAAAABMK}
{\bkmkend AAAAAAABMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v help\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::help}}
\par
{\bkmkstart AAAAAAABML}
{\bkmkend AAAAAAABML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v last\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:last}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::last}}
\par
{\bkmkstart AAAAAAABMM}
{\bkmkend AAAAAAABMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_reporters\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_reporters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_reporters}}
\par
{\bkmkstart AAAAAAABMN}
{\bkmkend AAAAAAABMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_cases\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_cases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_cases}}
\par
{\bkmkstart AAAAAAABMO}
{\bkmkend AAAAAAABMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v list_test_suites\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:list_test_suites}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::list_test_suites}}
\par
{\bkmkstart AAAAAAABMP}
{\bkmkend AAAAAAABMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v minimal\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:minimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::minimal}}
\par
{\bkmkstart AAAAAAABMQ}
{\bkmkend AAAAAAABMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_breaks\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_breaks}}
\par
{\bkmkstart AAAAAAABMR}
{\bkmkend AAAAAAABMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_colors\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_colors}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_colors}}
\par
{\bkmkstart AAAAAAABMS}
{\bkmkend AAAAAAABMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_debug_output\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_debug_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_debug_output}}
\par
{\bkmkstart AAAAAAABMT}
{\bkmkend AAAAAAABMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_exitcode\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_exitcode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_exitcode}}
\par
{\bkmkstart AAAAAAABMU}
{\bkmkend AAAAAAABMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_intro\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_intro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_intro}}
\par
{\bkmkstart AAAAAAABMV}
{\bkmkend AAAAAAABMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_line_numbers\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_line_numbers}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_line_numbers}}
\par
{\bkmkstart AAAAAAABMW}
{\bkmkend AAAAAAABMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_path_in_filenames\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_path_in_filenames}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_path_in_filenames}}
\par
{\bkmkstart AAAAAAABMX}
{\bkmkend AAAAAAABMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_run\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_run}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_run}}
\par
{\bkmkstart AAAAAAABMY}
{\bkmkend AAAAAAABMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skip\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skip}}
\par
{\bkmkstart AAAAAAABMZ}
{\bkmkend AAAAAAABMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_skipped_summary\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_skipped_summary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_skipped_summary}}
\par
{\bkmkstart AAAAAAABNA}
{\bkmkend AAAAAAABNA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_throw\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_throw}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_throw}}
\par
{\bkmkstart AAAAAAABNB}
{\bkmkend AAAAAAABNB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_time_in_output\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_time_in_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_time_in_output}}
\par
{\bkmkstart AAAAAAABNC}
{\bkmkend AAAAAAABNC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v no_version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:no_version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::no_version}}
\par
{\bkmkstart AAAAAAABND}
{\bkmkend AAAAAAABND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v order_by\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:order_by}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::order_by}}
\par
{\bkmkstart AAAAAAABNE}
{\bkmkend AAAAAAABNE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v out\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:out}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::ContextOptions::out}}
\par
{\bkmkstart AAAAAAABNF}
{\bkmkend AAAAAAABNF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v quiet\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:quiet}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::quiet}}
\par
{\bkmkstart AAAAAAABNG}
{\bkmkend AAAAAAABNG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rand_seed\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:rand_seed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::ContextOptions::rand_seed}}
\par
{\bkmkstart AAAAAAABNH}
{\bkmkend AAAAAAABNH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_filter_levels\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:subcase_filter_levels}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::ContextOptions::subcase_filter_levels}}
\par
{\bkmkstart AAAAAAABNI}
{\bkmkend AAAAAAABNI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v success\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:success}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::success}}
\par
{\bkmkstart AAAAAAABNJ}
{\bkmkend AAAAAAABNJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v version\:doctest::ContextOptions}
{\xe \v doctest::ContextOptions\:version}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::ContextOptions::version}}
\par
{\bkmkstart AAAAAAABNK}
{\bkmkend AAAAAAABNK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Classe doctest::detail::ContextScope< L >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >}
{\bkmkstart AAAAAAABVJ}
{\bkmkend AAAAAAABVJ}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::ContextScope< L >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (L &&lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} ({\b ContextScope} &&) noexcept=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} ({\b ContextScope} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stringify} ({\b std::ostream} *s) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScope} () override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (L &&lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} ({\b ContextScope} &&) noexcept=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} (const {\b ContextScope} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScope} & {\b operator=} ({\b ContextScope} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b stringify} ({\b std::ostream} *s) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScope} () override\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros protegidos herdados de {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos Protegidos herdados de {\b doctest::detail::ContextScopeBase}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b need_to_destroy} \{true\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const L &  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABVK}
{\bkmkend AAAAAAABVK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1809 : lambda_(lambda) \{\}\par
}
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (L &&  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABVL}
{\bkmkend AAAAAAABVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1810 : lambda_({\cf17 static_cast<}L&&{\cf17 >}(lambda)) \{ \}\par
}
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVM}
{\bkmkend AAAAAAABVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope ({\b ContextScope}< L > && ){\f2 [default]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABVN}
{\bkmkend AAAAAAABVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:~ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::~{\b ContextScope} (){\f2 [inline]}, {\f2 [override]}}}
\par
{\bkmkstart AAAAAAABVO}
{\bkmkend AAAAAAABVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1820                                  \{\par
1821             {\cf19 if} (need_to_destroy) \{\par
1822                 destroy();\par
1823             \}\par
1824         \}\par
}
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const L &  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABVK}
{\bkmkend AAAAAAABVK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1809 : lambda_(lambda) \{\}\par
}
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (L &&  {\i lambda}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABVL}
{\bkmkend AAAAAAABVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1810 : lambda_({\cf17 static_cast<}L&&{\cf17 >}(lambda)) \{ \}\par
}
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVM}
{\bkmkend AAAAAAABVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::ContextScope ({\b ContextScope}< L > && ){\f2 [default]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABVN}
{\bkmkend AAAAAAABVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScope\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:~ContextScope}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::ContextScope}< L >::~{\b ContextScope} (){\f2 [inline]}, {\f2 [override]}}}
\par
{\bkmkstart AAAAAAABVO}
{\bkmkend AAAAAAABVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1820                                  \{\par
1821             {\cf19 if} (need_to_destroy) \{\par
1822                 destroy();\par
1823             \}\par
1824         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVP}
{\bkmkend AAAAAAABVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= (const {\b ContextScope}< L > & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVP}
{\bkmkend AAAAAAABVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= ({\b ContextScope}< L > && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVQ}
{\bkmkend AAAAAAABVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b ContextScope} & {\b doctest::detail::ContextScope}< L >::operator= ({\b ContextScope}< L > && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVQ}
{\bkmkend AAAAAAABVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stringify\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > void {\b doctest::detail::ContextScope}< L >::stringify ({\b std::ostream} *  {\i s}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b doctest::IContextScope} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1818 \{ lambda_(s); \}\par
}
}
{\xe \v stringify\:doctest::detail::ContextScope< L >}
{\xe \v doctest::detail::ContextScope< L >\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > void {\b doctest::detail::ContextScope}< L >::stringify ({\b std::ostream} *  {\i s}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABNT}
{\bkmkend AAAAAAABNT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b doctest::IContextScope} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNS \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1818 \{ lambda_(s); \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::ContextScopeBase\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase}
{\bkmkstart AAAAAAABVR}
{\bkmkend AAAAAAABVR}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::ContextScopeBase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_context_scope_base.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} (const {\b ContextScopeBase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} & {\b operator=} ({\b ContextScopeBase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ContextScopeBase} () override=default\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b doctest::IContextScope}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ContextScopeBase} ({\b ContextScopeBase} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b destroy} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos Protegidos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b need_to_destroy} \{true\}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVS}
{\bkmkend AAAAAAABVS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:~ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::~ContextScopeBase (){\f2 [override]}, {\f2 [default]}}}
\par
{\bkmkstart AAAAAAABVT}
{\bkmkend AAAAAAABVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABVU}
{\bkmkend AAAAAAABVU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase ({\b ContextScopeBase} &&  {\i other}){\f2 [protected]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABVV}
{\bkmkend AAAAAAABVV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVS}
{\bkmkend AAAAAAABVS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:~ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::~ContextScopeBase (){\f2 [override]}, {\f2 [default]}}}
\par
{\bkmkstart AAAAAAABVT}
{\bkmkend AAAAAAABVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABVU}
{\bkmkend AAAAAAABVU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ContextScopeBase\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:ContextScopeBase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ContextScopeBase::ContextScopeBase ({\b ContextScopeBase} &&  {\i other}){\f2 [protected]}, {\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABVV}
{\bkmkend AAAAAAABVV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ContextScopeBase::destroy (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABVW}
{\bkmkend AAAAAAABVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ContextScopeBase::destroy (){\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABVW}
{\bkmkend AAAAAAABVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVX}
{\bkmkend AAAAAAABVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= (const {\b ContextScopeBase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVX}
{\bkmkend AAAAAAABVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= ({\b ContextScopeBase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVY}
{\bkmkend AAAAAAABVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ContextScopeBase} & doctest::detail::ContextScopeBase::operator= ({\b ContextScopeBase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABVY}
{\bkmkend AAAAAAABVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v need_to_destroy\:doctest::detail::ContextScopeBase}
{\xe \v doctest::detail::ContextScopeBase\:need_to_destroy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ContextScopeBase::need_to_destroy \{true\}{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAABVZ}
{\bkmkend AAAAAAABVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1801 \{{\cf17 true}\};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe ControleClientes\par \pard\plain 
{\tc\tcl2 \v ControleClientes}
{\xe \v ControleClientes}
{\bkmkstart AAAAAAABFF}
{\bkmkend AAAAAAABFF}
\par
{
{\f2 #include <ControleClientes.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ControleClientes} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b fazerCadastro} (std::string nome, std::string cpf, bool msg=true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b removerCadastro} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cliente} * {\b pesquisarCliente} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b gerarRelatorio} (char ordem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b limparDatabase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b printHistorico} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ControleClientes} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ControleClientes\:ControleClientes}
{\xe \v ControleClientes\:ControleClientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ControleClientes::ControleClientes ()}}
\par
{\bkmkstart AAAAAAABFG}
{\bkmkend AAAAAAABFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 8                                   \{\par
9     std::ifstream Database({\cf22 "database/dbClientes.txt"});\par
10     {\cf19 if} (Database)\{\par
11         std::string cpf;\par
12         std::string nome;\par
13         std::string verify;\par
14         getline(Database, verify);  {\cf20 // Verifica se o banco de dados est\'E1 vazio.}\par
15         {\cf19 if} (!verify.size())\{\par
16             this->clientes.clear();\par
17         \} {\cf19 else}\{\par
18             Database.seekg(0);\par
19             {\cf19 while} (!Database.eof())\{    {\cf20 // Leitura do banco de dados.}\par
20                 Database >> cpf;\par
21                 {\cf18 int} pos = Database.tellg(); pos++;\par
22                 Database.seekg(pos);\par
23                 getline(Database, nome);\par
24                 this->fazerCadastro(nome, cpf, {\cf17 false});\par
25             \}\par
26             Database.close();\par
27         \}\par
28     \} \par
29 \par
30 \}\par
}
}
{\xe \v ~ControleClientes\:ControleClientes}
{\xe \v ControleClientes\:~ControleClientes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ControleClientes::~ControleClientes ()}}
\par
{\bkmkstart AAAAAAABFH}
{\bkmkend AAAAAAABFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 102                                    \{\par
103     std::ofstream Database({\cf22 "database/dbClientes.txt"});\par
104     std::sort(this->clientes.begin(), this->clientes.end(), compCPF);\par
105     {\cf19 for}({\cf17 auto} it = this->clientes.begin(); it != this->clientes.end(); it++)\{\par
106         {\cf19 if} (it == this->clientes.begin())\{\par
107             Database << (*it)->getCPF() << {\cf22 " "} << (*it)->getNome();\par
108         \} {\cf19 else}\{\par
109             Database << {\cf22 "\\n"} << (*it)->getCPF() << {\cf22 " "} << (*it)->getNome();\par
110         \}\par
111         {\cf17 delete} (*it);\par
112     \}\par
113     Database.close();\par
114 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fazerCadastro\:ControleClientes}
{\xe \v ControleClientes\:fazerCadastro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleClientes::fazerCadastro (std::string  {\i nome}, std::string  {\i cpf}, bool  {\i msg} = {\f2 true})}}
\par
{\bkmkstart AAAAAAABFI}
{\bkmkend AAAAAAABFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 32                                                                            \{\par
33     {\cf19 if} (cpf.length() != 11)\{\par
34         {\cf19 throw} clientes_excp::cpf_curto(cpf);\par
35         {\cf19 return} {\cf17 false};\par
36     \} {\cf19 else} {\cf19 if}(this->pesquisarCliente(cpf))\{\par
37         {\cf19 throw} clientes_excp::cpf_repetido(cpf);\par
38         {\cf19 return} {\cf17 false};\par
39     \}\par
40     Cliente* aux = {\cf17 new} Cliente(nome, cpf);\par
41     this->clientes.push_back(aux);\par
42     {\cf19 if} (msg)\{ \par
43         std::cout << {\cf22 "Cliente "} << cpf <<  {\cf22 " cadastrado com sucesso"} << std::endl;\par
44     \}\par
45     {\cf19 return} {\cf17 true};\par
46 \}\par
}
}
{\xe \v gerarRelatorio\:ControleClientes}
{\xe \v ControleClientes\:gerarRelatorio}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleClientes::gerarRelatorio (char  {\i ordem})}}
\par
{\bkmkstart AAAAAAABFJ}
{\bkmkend AAAAAAABFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 75                                                \{\par
76     {\cf19 if} (this->clientes.empty())\{\par
77         std::cout << {\cf22 "N\'E3o h\'E1 clientes registrados."} << std::endl;\par
78         {\cf19 return} {\cf17 false};\par
79     \}\par
80     {\cf19 if} (ordem != {\cf23 'C'} and ordem != {\cf23 'N'})\{\par
81         {\cf19 throw} clientes_excp::ordem_invalida(ordem);\par
82         {\cf19 return} {\cf17 false};\par
83     \}\par
84     {\cf19 if}(ordem == {\cf23 'C'})\{\par
85         std::sort(this->clientes.begin(), this->clientes.end(), compCPF);\par
86     \} {\cf19 else} \{\par
87         std::sort(this->clientes.begin(), this->clientes.end(), compNome);\par
88     \}\par
89     {\cf19 for}({\cf17 auto} it = this->clientes.begin(); it != this->clientes.end(); it++)\{\par
90         std::cout << (*it)->getCPF() << {\cf22 " "} << (*it)->getNome() << std::endl;\par
91     \}\par
92     {\cf19 return} {\cf17 true};\par
93 \}\par
}
}
{\xe \v limparDatabase\:ControleClientes}
{\xe \v ControleClientes\:limparDatabase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ControleClientes::limparDatabase ()}}
\par
{\bkmkstart AAAAAAABFK}
{\bkmkend AAAAAAABFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 95                                      \{\par
96     {\cf19 while}(!this->clientes.empty())\{\par
97         {\cf17 delete} *this->clientes.begin();\par
98         this->clientes.erase(this->clientes.begin());\par
99     \}\par
100 \}\par
}
}
{\xe \v pesquisarCliente\:ControleClientes}
{\xe \v ControleClientes\:pesquisarCliente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Cliente} * ControleClientes::pesquisarCliente (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABFL}
{\bkmkend AAAAAAABFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 65                                                         \{\par
66     {\cf18 int} totalClientes = this->clientes.size();\par
67     {\cf19 for} ({\cf18 int} i = 0; i<totalClientes; i++)\{\par
68         {\cf19 if} (cpf == this->clientes[i]->getCPF())\{\par
69             {\cf19 return} this->clientes[i];\par
70         \}\par
71     \}\par
72     {\cf19 return} 0;\par
73 \}\par
}
}
{\xe \v printHistorico\:ControleClientes}
{\xe \v ControleClientes\:printHistorico}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleClientes::printHistorico (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABFM}
{\bkmkend AAAAAAABFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 116                                                   \{\par
117     Cliente* cliente = this->pesquisarCliente(cpf);\par
118     {\cf19 if}(!cliente)\{\par
119         {\cf19 throw} clientes_excp::cpf_inexistente(cpf);\par
120         {\cf19 return} {\cf17 false};\par
121     \}\par
122     {\cf19 if} (cliente->isHistoricoVazio())\{\par
123         std::cout << {\cf22 "Cliente n\'E3o fez nenhuma aloca\'E7\'E3o"} << std::endl;\par
124     \}\par
125 \par
126     cliente->printHistorico();\par
127 \}\par
}
}
{\xe \v removerCadastro\:ControleClientes}
{\xe \v ControleClientes\:removerCadastro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleClientes::removerCadastro (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABFN}
{\bkmkend AAAAAAABFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 48                                                    \{\par
49     Cliente* cliente = this->pesquisarCliente(cpf);\par
50     {\cf19 if}(!cliente)\{\par
51         {\cf19 throw} clientes_excp::cpf_inexistente(cpf);\par
52         {\cf19 return} {\cf17 false};\par
53     \}\par
54     {\cf19 for} ({\cf17 auto} it = this->clientes.begin(); it != this->clientes.end(); it++)\{\par
55         {\cf19 if} (*it == cliente)\{\par
56             this->clientes.erase(it);\par
57             {\cf19 break};\par
58         \}\par
59     \}\par
60     {\cf17 delete} cliente;\par
61     std::cout << {\cf22 "Cliente "} << cpf << {\cf22 " removido com sucesso"} << std::endl;\par
62     {\cf19 return} {\cf17 true};\par
63 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientes.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientes.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe ControleLocacao\par \pard\plain 
{\tc\tcl2 \v ControleLocacao}
{\xe \v ControleLocacao}
{\bkmkstart AAAAAAABFO}
{\bkmkend AAAAAAABFO}
\par
{
{\f2 #include <ControleLocacao.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b calculaAluguel} ({\b Midia} &filme, double duracao)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b fazerLocacao} ({\b ControleClientes} &cc, {\b ControleMidia} &cm, std::string cpf, std::vector< int > filmes)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b fazerDevolucao} ({\b ControleClientes} &cc, {\b ControleMidia} &cm, std::string cpf)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v calculaAluguel\:ControleLocacao}
{\xe \v ControleLocacao\:calculaAluguel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double ControleLocacao::calculaAluguel ({\b Midia} &  {\i filme}, double  {\i duracao})}}
\par
{\bkmkstart AAAAAAABFP}
{\bkmkend AAAAAAABFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12                                                                   \{\par
13     {\cf18 double} preco_fita = 5.0;\par
14     {\cf18 double} preco_lancamento = 20.0;\par
15     {\cf18 double} preco_estoque = 10.0;\par
16     {\cf18 double} preco_promocao = 10.0;\par
17     {\cf18 double} multa = 2.0;\par
18 \par
19     {\cf19 if} (filme.getCategoria() == {\cf22 "FITA"})\{\par
20         Fita* fita = {\cf17 dynamic_cast<}Fita*{\cf17 >}(&filme);\par
21         {\cf19 if} (fita->getRebobinada())\{{\cf19 return} preco_fita;\}\par
22         {\cf19 return} preco_fita + multa;\par
23     \} {\cf19 else} \{\par
24         {\cf19 if} (filme.getCategoria() == {\cf22 "Lancamento"})\{{\cf19 return} duracao*preco_lancamento;\}\par
25         {\cf19 if} (filme.getCategoria() == {\cf22 "Estoque"})\{{\cf19 return} duracao*preco_estoque;\}\par
26         {\cf19 if} (filme.getCategoria() == {\cf22 "Promocao"})\{{\cf19 return} preco_promocao;\}\par
27     \}\par
28     {\cf19 throw} midia_excp::categoria_invalida(filme.getCategoria());\par
29     {\cf19 return} 0.0;\par
30 \}\par
}
}
{\xe \v fazerDevolucao\:ControleLocacao}
{\xe \v ControleLocacao\:fazerDevolucao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleLocacao::fazerDevolucao ({\b ControleClientes} &  {\i cc}, {\b ControleMidia} &  {\i cm}, std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABFQ}
{\bkmkend AAAAAAABFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 67                                                                                           \{\par
68     Cliente* cliente = cc.pesquisarCliente(cpf);\par
69     {\cf20 // std::time_t momento_de_devolucao = std::time(0);}\par
70     {\cf20 // std::tm tm_devolucao = *std::localtime(&momento_de_devolucao);}\par
71     std::tm tm_devolucao = \{\};\par
72     std::istringstream date_stream({\cf22 "28/12/2023"}); \par
73     date_stream >> std::get_time(&tm_devolucao, FORMATO_DATA); \par
74     std::time_t momento_de_devolucao = mktime(&tm_devolucao);\par
75 \par
76     {\cf18 double} total_a_pagar = 0.0;\par
77 \par
78     {\cf19 if} (cliente)\{\par
79         std::vector<Midia*> filmes; filmes.clear();\par
80         filmes = locacoes[cliente];\par
81         locacoes.erase(cliente);\par
82         \par
83         std::cout << {\cf22 "Cliente "} << cliente->getCPF() << {\cf22 " "} << cliente->getNome() << {\cf22 " devolveu os filmes: "} << std::endl;\par
84 \par
85         std::cout << std::left << std::setw(12) << {\cf22 "C\'F3digo"} << std::setw(15)<< {\cf22 "Aloca\'E7\'E3o"} << std::setw(16)  << {\cf22 "Devolu\'E7\'E3o"} << std::setw(15)  << {\cf22 "Valor a Pagar"} << std::endl;\par
86 \par
87         {\cf19 for} ({\cf17 auto} it = filmes.begin(); it != filmes.end(); it++)\{\par
88             std::tm tm_alocacao = \{\};\par
89             tm_alocacao = cliente->getDataLocacao((**it).getCodigo());\par
90             std::time_t momento_de_alocacao = mktime(&tm_alocacao);\par
91 \par
92             {\cf18 double} valor_a_pagar = 0.0;\par
93             {\cf18 double} duracao = (momento_de_devolucao - momento_de_alocacao)/DIA_EM_SEGUNDOS;\par
94 \par
95             valor_a_pagar = calculaAluguel(**it, duracao);\par
96             total_a_pagar += valor_a_pagar;\par
97 \par
98             std::cout << {\cf22 " "} << (**it).getCodigo() << {\cf22 "      "} << std::put_time(&tm_alocacao, FORMATO_DATA) << {\cf22 "    "} <<  std::put_time(&tm_devolucao, FORMATO_DATA) << {\cf22 "      "} << valor_a_pagar << std::endl;\par
99         \par
100             (*cliente).fazerDevolucao((*it)->getCodigo(), *std::localtime(&momento_de_devolucao));\par
101             \par
102             (*it)->aumentarUnidadesDisponiveis();\par
103         \}\par
104 \par
105         std::cout << {\cf22 "Total a pagar: "} << total_a_pagar << std::endl;\par
106 \par
107     \} {\cf19 else}\{\par
108         {\cf19 throw} clientes_excp::cpf_inexistente(cpf);\par
109         {\cf19 return} {\cf17 false};\par
110     \}\par
111     {\cf19 return} {\cf17 true};\par
112 \}\par
}
}
{\xe \v fazerLocacao\:ControleLocacao}
{\xe \v ControleLocacao\:fazerLocacao}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleLocacao::fazerLocacao ({\b ControleClientes} &  {\i cc}, {\b ControleMidia} &  {\i cm}, std::string  {\i cpf}, std::vector< int >  {\i filmes})}}
\par
{\bkmkstart AAAAAAABFR}
{\bkmkend AAAAAAABFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 32                                                                                                                \{\par
33     Cliente* cliente = cc.pesquisarCliente(cpf);\par
34     std::time_t momento_de_locacao = std::time(0);\par
35     \par
36     {\cf19 if} (cliente)\{\par
37         std::vector<Midia*> aux; aux.clear();\par
38         this->locacoes.insert(\{cliente, aux\}); \par
39         {\cf17 auto} ind = this->locacoes.find(cliente);\par
40 \par
41         {\cf19 for} ({\cf17 auto} it = filmes.begin(); it != filmes.end(); it++)\{\par
42             {\cf17 auto} verify = cm.pesquisarMidia(*it);\par
43             {\cf19 if} (verify != cm.getEstoqueEnd())\{\par
44                 {\cf19 if} ((*verify)->getUnidadesDisponiveis() == 0)\{\par
45                     std::cout << {\cf22 "ERRO: Filme "} << (*verify)->getCodigo() << {\cf22 " n\'E3o possui mais unidades disponiveis"} << std::endl;\par
46                     {\cf19 return} {\cf17 false};\par
47                 \}\par
48                 (*ind).second.push_back(*verify);\par
49             \} {\cf19 else}\{\par
50                 {\cf19 throw} midia_excp::codigo_inexistente(*it);\par
51                 {\cf19 return} {\cf17 false};\par
52             \}\par
53         \}\par
54         std::cout << {\cf22 "Cliente "} << cliente->getCPF() << {\cf22 " "} << cliente->getNome() << {\cf22 " "} << {\cf22 "alugou os filmes:"} << std::endl;\par
55         {\cf19 for} ({\cf17 auto} it = (*ind).second.begin(); it != (*ind).second.end(); it++)\{\par
56             (*cliente).fazerLocacao((*it)->getCodigo(), *std::localtime(&momento_de_locacao));\par
57             (*it)->imprimirInformacoes({\cf17 false});\par
58             (*it)->diminuirUnidadesDisponiveis();\par
59         \}\par
60     \} {\cf19 else}\{\par
61         {\cf19 throw} clientes_excp::cpf_inexistente(cpf);\par
62         {\cf19 return} {\cf17 false};\par
63     \}\par
64     {\cf19 return} {\cf17 true};\par
65 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/{\b ControleLocacao.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleLocacao/{\b ControleLocacao.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe ControleMidia\par \pard\plain 
{\tc\tcl2 \v ControleMidia}
{\xe \v ControleMidia}
{\bkmkstart AAAAAAABFS}
{\bkmkend AAAAAAABFS}
\par
{
{\f2 #include <ControleMidia.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ControleMidia} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~ControleMidia} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b Midia} * > {\b getEstoque} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b Midia} * >::iterator {\b getEstoqueEnd} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b cadastrarMidia} (int tipoMidia, int codigo, std::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b cadastrarDvd} (int codigo, std ::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b cadastrarFita} (int codigo, std ::string titulo, int unidadesDisponiveis, bool rebobinada)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b lerArquivoCadastro} (std ::string arquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::vector< {\b Midia} * >::iterator {\b pesquisarMidia} (int codigo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b removerMidia} (int codigo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirMidias} (char ordem)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ControleMidia\:ControleMidia}
{\xe \v ControleMidia\:ControleMidia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ControleMidia::ControleMidia ()}}
\par
{\bkmkstart AAAAAAABFT}
{\bkmkend AAAAAAABFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9 : estoque()\{\}\par
}
}
{\xe \v ~ControleMidia\:ControleMidia}
{\xe \v ControleMidia\:~ControleMidia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ControleMidia::~ControleMidia ()}}
\par
{\bkmkstart AAAAAAABFU}
{\bkmkend AAAAAAABFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11                               \{\par
12     \par
13     {\cf19 for}({\cf17 auto} it = estoque.begin(); it != estoque.end(); it++)\{\par
14         \par
15         {\cf19 if} (*it != {\cf17 nullptr}) \{\par
16             {\cf17 delete} (*it);\par
17     \}\par
18     \}\par
19 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v cadastrarDvd\:ControleMidia}
{\xe \v ControleMidia\:cadastrarDvd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleMidia::cadastrarDvd (int  {\i codigo}, std ::string  {\i titulo}, int  {\i unidadesDisponiveis}, std::string  {\i categoria})}}
\par
{\bkmkstart AAAAAAABFV}
{\bkmkend AAAAAAABFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 32                                                                                                            \{\par
33     \par
34     {\cf17 auto} it = pesquisarMidia(codigo);\par
35     \par
36     {\cf19 if}(it == estoque.end())\{\par
37         Dvd* novoDvd = {\cf17 new} Dvd(codigo, titulo, unidadesDisponiveis, categoria);\par
38 \par
39         estoque.push_back(novoDvd);\par
40         std:: cout << {\cf22 "Filme "}<< codigo << {\cf22 " cadastrado com sucesso"} << std:: endl;\par
41         {\cf19 return} {\cf17 true};\par
42     \}\par
43     \par
44     {\cf19 throw} midia_excp::codigo_repetido(codigo);\par
45     {\cf19 return} {\cf17 false};\par
46 \par
47 \}\par
}
}
{\xe \v cadastrarFita\:ControleMidia}
{\xe \v ControleMidia\:cadastrarFita}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleMidia::cadastrarFita (int  {\i codigo}, std ::string  {\i titulo}, int  {\i unidadesDisponiveis}, bool  {\i rebobinada})}}
\par
{\bkmkstart AAAAAAABFW}
{\bkmkend AAAAAAABFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 49                                                                                                         \{\par
50 \par
51     {\cf17 auto} it = pesquisarMidia(codigo);\par
52 \par
53     \par
54     {\cf19 if}(it == estoque.end())\{\par
55         Fita* novaFita = {\cf17 new} Fita(codigo, titulo, unidadesDisponiveis, rebobinada);\par
56         {\cf20 //true rebobinada, false nao rebobinada}\par
57         estoque.push_back(novaFita);\par
58         std:: cout << {\cf22 "Filme "}<< codigo << {\cf22 " cadastrado com sucesso"} << std:: endl;\par
59         {\cf19 return} {\cf17 true};\par
60     \}\par
61 \par
62     {\cf19 throw} midia_excp::codigo_repetido(codigo);\par
63     {\cf19 return} {\cf17 false};\par
64 \}\par
}
}
{\xe \v cadastrarMidia\:ControleMidia}
{\xe \v ControleMidia\:cadastrarMidia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleMidia::cadastrarMidia (int  {\i tipoMidia}, int  {\i codigo}, std::string  {\i titulo}, int  {\i unidadesDisponiveis}, std::string  {\i categoria})}}
\par
{\bkmkstart AAAAAAABFX}
{\bkmkend AAAAAAABFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 67                                                                                                                             \{\par
68 \par
69     {\cf19 switch} (tipoMidia) \{\par
70         {\cf19 case} 1: {\cf20 //Dvd}\par
71             cadastrarDvd(codigo, titulo, unidadesDisponiveis, categoria);\par
72             {\cf19 break};\par
73         {\cf19 case} 2: \{  {\cf20 //Fita}\par
74             {\cf18 bool} rebobinada = 1;\par
75             cadastrarFita(codigo, titulo, unidadesDisponiveis, rebobinada);\par
76             {\cf19 break};\}\par
77         {\cf19 default}:\par
78             {\cf19 throw} midia_excp::tipo_desconhecido(tipoMidia);\par
79             {\cf19 break};\par
80         \}\par
81     {\cf19 return} {\cf17 false};\par
82 \par
83 \}\par
}
}
{\xe \v getEstoque\:ControleMidia}
{\xe \v ControleMidia\:getEstoque}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b Midia} * > ControleMidia::getEstoque ()}}
\par
{\bkmkstart AAAAAAABFY}
{\bkmkend AAAAAAABFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 21                                            \{\par
22     \par
23     {\cf19 return} estoque;\par
24 \}\par
}
}
{\xe \v getEstoqueEnd\:ControleMidia}
{\xe \v ControleMidia\:getEstoqueEnd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b Midia} * >::iterator ControleMidia::getEstoqueEnd ()}}
\par
{\bkmkstart AAAAAAABFZ}
{\bkmkend AAAAAAABFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 26                                                       \{\par
27         \par
28         {\cf19 return} estoque.end();\par
29 \par
30 \}\par
}
}
{\xe \v imprimirMidias\:ControleMidia}
{\xe \v ControleMidia\:imprimirMidias}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ControleMidia::imprimirMidias (char  {\i ordem})}}
\par
{\bkmkstart AAAAAAABGA}
{\bkmkend AAAAAAABGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 140                                              \{\par
141     \par
142     {\cf19 if}(ordem == {\cf23 'C'})\{\par
143         \par
144         std::sort(this->estoque.begin(), this->estoque.end(),compCodigo);\par
145 \par
146     \}{\cf19 else} {\cf19 if}(ordem == {\cf23 'T'})\{\par
147         \par
148         std::sort(this->estoque.begin(), this->estoque.end(),compTitulo);\par
149 \par
150     \} {\cf19 else} \{\par
151         {\cf19 throw} midia_excp::ordem_invalida(ordem);\par
152     \}\par
153 \par
154     {\cf19 for}({\cf17 auto} it = this->estoque.begin(); it != this->estoque.end(); it++)\{\par
155         (*it)->imprimirInformacoes();\par
156     \}\par
157     {\cf19 if} (estoque.size() == 0 )\{\par
158         std::cout << {\cf22 "Nenhuma m\'EDdia armazenada"} << std::endl;\par
159     \}\par
160 \}\par
}
}
{\xe \v lerArquivoCadastro\:ControleMidia}
{\xe \v ControleMidia\:lerArquivoCadastro}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleMidia::lerArquivoCadastro (std ::string  {\i arquivo})}}
\par
{\bkmkstart AAAAAAABGB}
{\bkmkend AAAAAAABGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 85                                                         \{\par
86     std::ifstream infile(arquivo);\par
87 \par
88     {\cf19 if} (!infile) \{\par
89         {\cf19 throw} midia_excp::erro_de_abertura(arquivo);\par
90         {\cf19 return} {\cf17 false};\par
91     \}\par
92 \par
93     {\cf18 int} tipoMidia; \par
94     std::string categoria;\par
95 \par
96     {\cf19 while} (infile >> tipoMidia) \{\par
97         {\cf18 int} codigo;\par
98         std::string titulo;\par
99         {\cf18 int} unidadesDisponiveis;\par
100 \par
101         {\cf20 // l\'EA a primeira coluna do dbMidia e procura o tipo midia}\par
102 \par
103         {\cf19 try} \{\par
104         {\cf19 switch} (tipoMidia) \{\par
105             {\cf19 case} 1: {\cf20 //Dvd}\par
106                 categoria.clear();\par
107                 infile >> codigo >> titulo >> unidadesDisponiveis >> categoria;\par
108                 cadastrarDvd(codigo, titulo, unidadesDisponiveis, categoria);\par
109                 {\cf19 break};\par
110             {\cf19 case} 2:  {\cf20 //Fita}\par
111                 {\cf18 bool} rebobinada;\par
112                 infile >> codigo >> titulo >> unidadesDisponiveis >> rebobinada;\par
113                 cadastrarFita(codigo, titulo, unidadesDisponiveis, rebobinada);\par
114                 {\cf19 break};\par
115             {\cf19 default}:\par
116                 {\cf19 throw} midia_excp::tipo_desconhecido(tipoMidia);\par
117                 {\cf19 break};\par
118         \}\} {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
119             std::cerr << e.what() << std::endl;\par
120         \}   \par
121     \}\par
122 \par
123     infile.close();\par
124     {\cf19 return} {\cf17 true};\par
125 \}\par
}
}
{\xe \v pesquisarMidia\:ControleMidia}
{\xe \v ControleMidia\:pesquisarMidia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::vector< {\b Midia} * >::iterator ControleMidia::pesquisarMidia (int  {\i codigo})}}
\par
{\bkmkstart AAAAAAABGC}
{\bkmkend AAAAAAABGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 127                                                                    \{\par
128     \par
129     {\cf19 for}({\cf17 auto} it = estoque.begin(); it != estoque.end(); it++)\{\par
130         {\cf19 if}(codigo == (*it)->getCodigo())\{\par
131                     \par
132             {\cf19 return} it;\par
133 \par
134         \}\par
135     \}\par
136 \par
137     {\cf19 return} estoque.end();\par
138 \}\par
}
}
{\xe \v removerMidia\:ControleMidia}
{\xe \v ControleMidia\:removerMidia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool ControleMidia::removerMidia (int  {\i codigo})}}
\par
{\bkmkstart AAAAAAABGD}
{\bkmkend AAAAAAABGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 162                                            \{\par
163     \par
164     {\cf17 auto} it = pesquisarMidia(codigo);\par
165     {\cf19 if}(it != estoque.end())\{\par
166         {\cf17 delete} *it;\par
167         estoque.erase(it);\par
168         std:: cout << {\cf22 "Filme "}<< codigo << {\cf22 " removido com sucesso"} << std:: endl;\par
169         {\cf19 return} {\cf17 true};\par
170     \}\par
171 \par
172     {\cf19 throw} midia_excp::codigo_inexistente(codigo);\par
173 \par
174     {\cf19 return} {\cf17 false}; \par
175 \par
176 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidia.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidia.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe clientes_excp::cpf_curto\par \pard\plain 
{\tc\tcl2 \v clientes_excp::cpf_curto}
{\xe \v clientes_excp::cpf_curto}
{\bkmkstart AAAAAAABGW}
{\bkmkend AAAAAAABGW}
\par
{
{\f2 #include <ControleClientesExceptions.hpp>}}\par
Diagrama de hierarquia da classe clientes_excp::cpf_curto:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classclientes__excp_1_1cpf__curto.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cpf_curto} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_cpf} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v cpf_curto\:clientes_excp::cpf_curto}
{\xe \v clientes_excp::cpf_curto\:cpf_curto}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
clientes_excp::cpf_curto::cpf_curto (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABGX}
{\bkmkend AAAAAAABGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5 : _cpf(cpf) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_cpf\:clientes_excp::cpf_curto}
{\xe \v clientes_excp::cpf_curto\:get_cpf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string clientes_excp::cpf_curto::get_cpf (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABGY}
{\bkmkend AAAAAAABGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 14 \{ {\cf19 return} _cpf; \};\par
}
}
{\xe \v what\:clientes_excp::cpf_curto}
{\xe \v clientes_excp::cpf_curto\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * clientes_excp::cpf_curto::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABGZ}
{\bkmkend AAAAAAABGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12 \{ {\cf19 return} {\cf22 "ERRO: CPF deve conter 11 digitos"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientesExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientesExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe clientes_excp::cpf_inexistente\par \pard\plain 
{\tc\tcl2 \v clientes_excp::cpf_inexistente}
{\xe \v clientes_excp::cpf_inexistente}
{\bkmkstart AAAAAAABHA}
{\bkmkend AAAAAAABHA}
\par
{
{\f2 #include <ControleClientesExceptions.hpp>}}\par
Diagrama de hierarquia da classe clientes_excp::cpf_inexistente:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classclientes__excp_1_1cpf__inexistente.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cpf_inexistente} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_cpf} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v cpf_inexistente\:clientes_excp::cpf_inexistente}
{\xe \v clientes_excp::cpf_inexistente\:cpf_inexistente}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
clientes_excp::cpf_inexistente::cpf_inexistente (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABHB}
{\bkmkend AAAAAAABHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9 : _cpf(cpf) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_cpf\:clientes_excp::cpf_inexistente}
{\xe \v clientes_excp::cpf_inexistente\:get_cpf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string clientes_excp::cpf_inexistente::get_cpf (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHC}
{\bkmkend AAAAAAABHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 38 \{ {\cf19 return} _cpf; \};\par
}
}
{\xe \v what\:clientes_excp::cpf_inexistente}
{\xe \v clientes_excp::cpf_inexistente\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * clientes_excp::cpf_inexistente::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHD}
{\bkmkend AAAAAAABHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 36 \{ {\cf19 return} {\cf22 "ERRO: CPF inexistente"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientesExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientesExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe clientes_excp::cpf_repetido\par \pard\plain 
{\tc\tcl2 \v clientes_excp::cpf_repetido}
{\xe \v clientes_excp::cpf_repetido}
{\bkmkstart AAAAAAABHE}
{\bkmkend AAAAAAABHE}
\par
{
{\f2 #include <ControleClientesExceptions.hpp>}}\par
Diagrama de hierarquia da classe clientes_excp::cpf_repetido:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classclientes__excp_1_1cpf__repetido.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cpf_repetido} (std::string cpf)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_cpf} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v cpf_repetido\:clientes_excp::cpf_repetido}
{\xe \v clientes_excp::cpf_repetido\:cpf_repetido}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
clientes_excp::cpf_repetido::cpf_repetido (std::string  {\i cpf})}}
\par
{\bkmkstart AAAAAAABHF}
{\bkmkend AAAAAAABHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7 : _cpf(cpf) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_cpf\:clientes_excp::cpf_repetido}
{\xe \v clientes_excp::cpf_repetido\:get_cpf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string clientes_excp::cpf_repetido::get_cpf (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHG}
{\bkmkend AAAAAAABHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 26 \{ {\cf19 return} _cpf; \};\par
}
}
{\xe \v what\:clientes_excp::cpf_repetido}
{\xe \v clientes_excp::cpf_repetido\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * clientes_excp::cpf_repetido::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHH}
{\bkmkend AAAAAAABHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 24 \{ {\cf19 return} {\cf22 "ERRO: CPF repetido"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientesExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientesExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::CurrentTestCaseStats\par \pard\plain 
{\tc\tcl2 \v doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats}
{\bkmkstart AAAAAAABNL}
{\bkmkend AAAAAAABNL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailedCurrentTest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b seconds}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b failure_flags}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b testCaseSuccess}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v failure_flags\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:failure_flags}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::failure_flags}}
\par
{\bkmkstart AAAAAAABNM}
{\bkmkend AAAAAAABNM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsCurrentTest}}
\par
{\bkmkstart AAAAAAABNN}
{\bkmkend AAAAAAABNN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailedCurrentTest\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:numAssertsFailedCurrentTest}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::CurrentTestCaseStats::numAssertsFailedCurrentTest}}
\par
{\bkmkstart AAAAAAABNO}
{\bkmkend AAAAAAABNO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v seconds\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:seconds}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::CurrentTestCaseStats::seconds}}
\par
{\bkmkstart AAAAAAABNP}
{\bkmkend AAAAAAABNP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v testCaseSuccess\:doctest::CurrentTestCaseStats}
{\xe \v doctest::CurrentTestCaseStats\:testCaseSuccess}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::CurrentTestCaseStats::testCaseSuccess}}
\par
{\bkmkstart AAAAAAABNQ}
{\bkmkend AAAAAAABNQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::deferred_false< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::deferred_false< T >}
{\xe \v doctest::detail::deferred_false< T >}
{\bkmkstart AAAAAAABWA}
{\bkmkend AAAAAAABWA}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::deferred_false< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1deferred__false.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Dvd\par \pard\plain 
{\tc\tcl2 \v Dvd}
{\xe \v Dvd}
{\bkmkstart AAAAAAABGE}
{\bkmkend AAAAAAABGE}
\par
{
{\f2 #include <Dvd.hpp>}}\par
Diagrama de hierarquia da classe Dvd:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_dvd.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Dvd} (int codigo, std ::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirInformacoes} (bool unidades=true)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b Midia}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Midia} (int codigo, std ::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Midia} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getCodigo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCategoria} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getTitulo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b diminuirUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b aumentarUnidadesDisponiveis} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Dvd\:Dvd}
{\xe \v Dvd\:Dvd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Dvd::Dvd (int  {\i codigo}, std ::string  {\i titulo}, int  {\i unidadesDisponiveis}, std::string  {\i categoria})}}
\par
{\bkmkstart AAAAAAABGF}
{\bkmkend AAAAAAABGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5     :Midia(codigo, titulo,unidadesDisponiveis, categoria)\par
6 \par
7 \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v imprimirInformacoes\:Dvd}
{\xe \v Dvd\:imprimirInformacoes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Dvd::imprimirInformacoes (bool  {\i unidades} = {\f2 true}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGG}
{\bkmkend AAAAAAABGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b Midia} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9                                            \{\par
10     {\cf19 if} (unidades)\{\par
11         std:: cout<<getCodigo()<< {\cf22 " "} << getTitulo() <<{\cf22 " "} << this->getUnidadesDisponiveis() << {\cf22 " "} << {\cf22 "DVD"}<< std:: endl; \par
12     \} {\cf19 else}\{\par
13         std:: cout<<getCodigo()<< {\cf22 " "} << getTitulo() << {\cf22 " "} << {\cf22 "DVD"}<< std:: endl; {\cf20 // Para o relat\'F3rio de loca\'E7\'F5es}\par
14     \}\par
15 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Dvd.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Dvd.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::enable_if< COND, T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::enable_if< COND, T >}
{\xe \v doctest::detail::types::enable_if< COND, T >}
{\bkmkstart AAAAAAACAK}
{\bkmkend AAAAAAACAK}
\par
{
{\f2 #include <doctest.h>}}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::enable_if< true, T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::enable_if< true, T >}
{\xe \v doctest::detail::types::enable_if< true, T >}
{\bkmkstart AAAAAAACAL}
{\bkmkend AAAAAAACAL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::enable_if< true, T >}
{\xe \v doctest::detail::types::enable_if< true, T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::enable_if}< {\b true}, {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACAM}
{\bkmkend AAAAAAACAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::enable_if< true, T >}
{\xe \v doctest::detail::types::enable_if< true, T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::enable_if}< {\b true}, {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACAM}
{\bkmkend AAAAAAACAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::erro_de_abertura\par \pard\plain 
{\tc\tcl2 \v midia_excp::erro_de_abertura}
{\xe \v midia_excp::erro_de_abertura}
{\bkmkstart AAAAAAACCN}
{\bkmkend AAAAAAACCN}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::erro_de_abertura:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1erro__de__abertura.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b erro_de_abertura} (std::string arquivo)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b get_arquivo} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v erro_de_abertura\:midia_excp::erro_de_abertura}
{\xe \v midia_excp::erro_de_abertura\:erro_de_abertura}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::erro_de_abertura::erro_de_abertura (std::string  {\i arquivo})}}
\par
{\bkmkstart AAAAAAACCO}
{\bkmkend AAAAAAACCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11 : _arquivo(arquivo) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_arquivo\:midia_excp::erro_de_abertura}
{\xe \v midia_excp::erro_de_abertura\:get_arquivo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string midia_excp::erro_de_abertura::get_arquivo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCP}
{\bkmkend AAAAAAACCP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 50 \{ {\cf19 return} _arquivo; \};\par
}
}
{\xe \v what\:midia_excp::erro_de_abertura}
{\xe \v midia_excp::erro_de_abertura\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::erro_de_abertura::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCQ}
{\bkmkend AAAAAAACCQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 48 \{ {\cf19 return} {\cf22 "ERRO: arquivo inexistente"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Classe doctest::detail::ExceptionTranslator< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >}
{\bkmkstart AAAAAAABWB}
{\bkmkend AAAAAAABWB}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::ExceptionTranslator< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classdoctest_1_1detail_1_1_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b translate} ({\b String} &res) const override\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b translate} ({\b String} &res) const override\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Descri\'E7\'E3o detalhada\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<typename T>\par
class doctest::detail::ExceptionTranslator< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ExceptionTranslator\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:ExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b doctest::detail::ExceptionTranslator}< T >::ExceptionTranslator ({\b String}(*)(T)  {\i translateFunction}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABWC}
{\bkmkend AAAAAAABWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1764                 : m_translateFunction(translateFunction) \{\}\par
}
}
{\xe \v ExceptionTranslator\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:ExceptionTranslator}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b doctest::detail::ExceptionTranslator}< T >::ExceptionTranslator ({\b String}(*)(T)  {\i translateFunction}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABWC}
{\bkmkend AAAAAAABWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1764                 : m_translateFunction(translateFunction) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v translate\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > bool {\b doctest::detail::ExceptionTranslator}< T >::translate ({\b String} &  {\i res}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABWD}
{\bkmkend AAAAAAABWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b doctest::detail::IExceptionTranslator} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1766                                                    \{\par
1767 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1768             {\cf19 try} \{\par
1769                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1770                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1771             \} {\cf19 catch}({\cf17 const} T& ex) \{\par
1772                 res = m_translateFunction(ex); \par
1773                 {\cf19 return} {\cf17 true};\par
1774             \} {\cf19 catch}(...) \{\}         \par
1775 {\cf21 #endif                              }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1776             {\cf17 static_cast<}{\cf18 void}{\cf17 >}(res); {\cf20 // to silence -Wunused-parameter}\par
1777             {\cf19 return} {\cf17 false};\par
1778         \}\par
}
}
{\xe \v translate\:doctest::detail::ExceptionTranslator< T >}
{\xe \v doctest::detail::ExceptionTranslator< T >\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > bool {\b doctest::detail::ExceptionTranslator}< T >::translate ({\b String} &  {\i res}) const{\f2 [inline]}, {\f2 [override]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABWD}
{\bkmkend AAAAAAABWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b doctest::detail::IExceptionTranslator} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWE \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1766                                                    \{\par
1767 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1768             {\cf19 try} \{\par
1769                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1770                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1771             \} {\cf19 catch}({\cf17 const} T& ex) \{\par
1772                 res = m_translateFunction(ex); \par
1773                 {\cf19 return} {\cf17 true};\par
1774             \} {\cf19 catch}(...) \{\}         \par
1775 {\cf21 #endif                              }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1776             {\cf17 static_cast<}{\cf18 void}{\cf17 >}(res); {\cf20 // to silence -Wunused-parameter}\par
1777             {\cf19 return} {\cf17 false};\par
1778         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::Expression_lhs< L >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >}
{\bkmkstart AAAAAAABWF}
{\bkmkend AAAAAAABWF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Expression_lhs} (L &&in, {\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_NOINLINE} {\b operator Result} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator L} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Expression_lhs} (L &&in, {\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_NOINLINE} {\b operator Result} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator L} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
L {\b lhs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Expression_lhs\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:Expression_lhs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::Expression_lhs (L &&  {\i in}, {\b assertType::Enum}  {\i at}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABWG}
{\bkmkend AAAAAAABWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1463                 : lhs({\cf17 static_cast<}L&&{\cf17 >}(in))\par
1464                 , m_at(at) \{\}\par
}
}
{\xe \v Expression_lhs\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:Expression_lhs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::Expression_lhs (L &&  {\i in}, {\b assertType::Enum}  {\i at}){\f2 [inline]}, {\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAABWG}
{\bkmkend AAAAAAABWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1463                 : lhs({\cf17 static_cast<}L&&{\cf17 >}(in))\par
1464                 , m_at(at) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator L\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator L}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::operator L () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWH}
{\bkmkend AAAAAAABWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1482 \{ {\cf19 return} lhs; \}\par
}
}
{\xe \v operator L\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator L}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b doctest::detail::Expression_lhs}< L >::operator L () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWH}
{\bkmkend AAAAAAABWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1482 \{ {\cf19 return} lhs; \}\par
}
}
{\xe \v operator Result\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} {\b doctest::detail::Expression_lhs}< L >::operator {\b Result} (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWI}
{\bkmkend AAAAAAABWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1466                                            \{\par
1467 {\cf20 // this is needed only for MSVC 2015}\par
1468 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) {\cf20 // 'int': forcing value to bool}\par
1469             bool res = static_cast<{\cf18 bool}>(lhs);\par
1470 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1471             if(m_at & assertType::is_false) \{ \par
1472                 res = !res;\par
1473             \}\par
1474 \par
1475             {\cf19 if}(!res || getContextOptions()->success) \{\par
1476                 {\cf19 return} \{ res, (DOCTEST_STRINGIFY(lhs)) \};\par
1477             \}\par
1478             {\cf19 return} \{ res \};\par
1479         \}\par
}
}
{\xe \v operator Result\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:operator Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} {\b doctest::detail::Expression_lhs}< L >::operator {\b Result} (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWI}
{\bkmkend AAAAAAABWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1466                                            \{\par
1467 {\cf20 // this is needed only for MSVC 2015}\par
1468 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) {\cf20 // 'int': forcing value to bool}\par
1469             bool res = static_cast<{\cf18 bool}>(lhs);\par
1470 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1471             if(m_at & assertType::is_false) \{ \par
1472                 res = !res;\par
1473             \}\par
1474 \par
1475             {\cf19 if}(!res || getContextOptions()->success) \{\par
1476                 {\cf19 return} \{ res, (DOCTEST_STRINGIFY(lhs)) \};\par
1477             \}\par
1478             {\cf19 return} \{ res \};\par
1479         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v lhs\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:lhs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > L {\b doctest::detail::Expression_lhs}< L >::lhs}}
\par
{\bkmkstart AAAAAAABWJ}
{\bkmkend AAAAAAABWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_at\:doctest::detail::Expression_lhs< L >}
{\xe \v doctest::detail::Expression_lhs< L >\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b assertType::Enum} {\b doctest::detail::Expression_lhs}< L >::m_at}}
\par
{\bkmkstart AAAAAAABWK}
{\bkmkend AAAAAAABWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::ExpressionDecomposer\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer}
{\bkmkstart AAAAAAABWL}
{\bkmkend AAAAAAABWL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExpressionDecomposer} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b Expression_lhs}< L > {\b operator<<} (L &&operand)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > {\b operator<<} (const L &operand)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ExpressionDecomposer} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b Expression_lhs}< L > {\b operator<<} (L &&operand)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > {\b operator<<} (const L &operand)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ExpressionDecomposer\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:ExpressionDecomposer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ExpressionDecomposer::ExpressionDecomposer ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABWM}
{\bkmkend AAAAAAABWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ExpressionDecomposer\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:ExpressionDecomposer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ExpressionDecomposer::ExpressionDecomposer ({\b assertType::Enum}  {\i at})}}
\par
{\bkmkstart AAAAAAABWM}
{\bkmkend AAAAAAABWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > doctest::detail::ExpressionDecomposer::operator<< (const L &  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWN}
{\bkmkend AAAAAAABWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1544                                                               \{\par
1545             {\cf19 return} Expression_lhs<const L&>(operand, m_at);\par
1546         \}\par
}
}
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L , typename {\b types::enable_if}<!{\b doctest::detail::types::is_rvalue_reference}< L >::value, void >::type *  = nullptr> {\b Expression_lhs}< const L & > doctest::detail::ExpressionDecomposer::operator<< (const L &  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWN}
{\bkmkend AAAAAAABWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1544                                                               \{\par
1545             {\cf19 return} Expression_lhs<const L&>(operand, m_at);\par
1546         \}\par
}
}
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b Expression_lhs}< L > doctest::detail::ExpressionDecomposer::operator<< (L &&  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWO}
{\bkmkend AAAAAAABWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1539                                                   \{\par
1540             {\cf19 return} Expression_lhs<L>({\cf17 static_cast<}L&&{\cf17 >}(operand), m_at);\par
1541         \}\par
}
}
{\xe \v operator<<\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b Expression_lhs}< L > doctest::detail::ExpressionDecomposer::operator<< (L &&  {\i operand}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABWO}
{\bkmkend AAAAAAABWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1539                                                   \{\par
1540             {\cf19 return} Expression_lhs<L>({\cf17 static_cast<}L&&{\cf17 >}(operand), m_at);\par
1541         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_at\:doctest::detail::ExpressionDecomposer}
{\xe \v doctest::detail::ExpressionDecomposer\:m_at}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::detail::ExpressionDecomposer::m_at}}
\par
{\bkmkstart AAAAAAABWP}
{\bkmkend AAAAAAABWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::types::false_type\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::false_type}
{\xe \v doctest::detail::types::false_type}
{\bkmkstart AAAAAAACAN}
{\bkmkend AAAAAAACAN}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::false_type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1false__type.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos Est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v value\:doctest::detail::types::false_type}
{\xe \v doctest::detail::types::false_type\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} doctest::detail::types::false_type::value = {\b false}{\f2 [static]}}}
\par
{\bkmkstart AAAAAAACAO}
{\bkmkend AAAAAAACAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::filldata< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T >}
{\xe \v doctest::detail::filldata< T >}
{\bkmkstart AAAAAAABWQ}
{\bkmkend AAAAAAABWQ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T >}
{\xe \v doctest::detail::filldata< T >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T >::fill ({\b std::ostream} *  {\i stream}, const T &  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWR}
{\bkmkend AAAAAAABWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1123                                                           \{\par
1124 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
1125         insert_hack_t<T>::insert(*stream, in);\par
1126 {\cf21 #else}\par
1127         operator<<(*stream, in);\par
1128 {\cf21 #endif}\par
1129         \}\par
}
}
{\xe \v fill\:doctest::detail::filldata< T >}
{\xe \v doctest::detail::filldata< T >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T >::fill ({\b std::ostream} *  {\i stream}, const T &  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWR}
{\bkmkend AAAAAAABWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1123                                                           \{\par
1124 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
1125         insert_hack_t<T>::insert(*stream, in);\par
1126 {\cf21 #else}\par
1127         operator<<(*stream, in);\par
1128 {\cf21 #endif}\par
1129         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::filldata< const char[N]>\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< const char[N]>}
{\xe \v doctest::detail::filldata< const char[N]>}
{\bkmkstart AAAAAAABWS}
{\bkmkend AAAAAAABWS}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const char(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const char(&in)[N])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< const char[N]>}
{\xe \v doctest::detail::filldata< const char[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<size_t N> static void {\b doctest::detail::filldata}< const char[N]>::fill ({\b std::ostream} *  {\i stream}, const char(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWT}
{\bkmkend AAAAAAABWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1152                                                                   \{\par
1153             *stream << String(in, in[N - 1] ? N : N - 1);\par
1154         \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
}
}
{\xe \v fill\:doctest::detail::filldata< const char[N]>}
{\xe \v doctest::detail::filldata< const char[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<size_t N> static void {\b doctest::detail::filldata}< const char[N]>::fill ({\b std::ostream} *  {\i stream}, const char(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWT}
{\bkmkend AAAAAAABWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1152                                                                   \{\par
1153             *stream << String(in, in[N - 1] ? N : N - 1);\par
1154         \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::filldata< const void * >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< const void * >}
{\xe \v doctest::detail::filldata< const void * >}
{\bkmkstart AAAAAAABWU}
{\bkmkend AAAAAAABWU}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const void *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const void *in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< const void * >}
{\xe \v doctest::detail::filldata< const void * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void {\b doctest::detail::filldata}< const void * >::fill ({\b std::ostream} *  {\i stream}, const void *  {\i in}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWV}
{\bkmkend AAAAAAABWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v fill\:doctest::detail::filldata< const void * >}
{\xe \v doctest::detail::filldata< const void * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static void {\b doctest::detail::filldata}< const void * >::fill ({\b std::ostream} *  {\i stream}, const void *  {\i in}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWV}
{\bkmkend AAAAAAABWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::filldata< T * >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T * >}
{\xe \v doctest::detail::filldata< T * >}
{\bkmkstart AAAAAAABWW}
{\bkmkend AAAAAAABWW}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T *in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T * >}
{\xe \v doctest::detail::filldata< T * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T * >::fill ({\b std::ostream} *  {\i stream}, const T *  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWX}
{\bkmkend AAAAAAABWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1165                                                           \{\par
1166             filldata<const void*>::fill(stream, in);\par
1167         \}\par
}
}
{\xe \v fill\:doctest::detail::filldata< T * >}
{\xe \v doctest::detail::filldata< T * >\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static void {\b doctest::detail::filldata}< T * >::fill ({\b std::ostream} *  {\i stream}, const T *  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWX}
{\bkmkend AAAAAAABWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1165                                                           \{\par
1166             filldata<const void*>::fill(stream, in);\par
1167         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::filldata< T[N]>\par \pard\plain 
{\tc\tcl2 \v doctest::detail::filldata< T[N]>}
{\xe \v doctest::detail::filldata< T[N]>}
{\bkmkstart AAAAAAABWY}
{\bkmkend AAAAAAABWY}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static void {\b fill} ({\b std::ostream} *stream, const T(&in)[N])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v fill\:doctest::detail::filldata< T[N]>}
{\xe \v doctest::detail::filldata< T[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , size_t N> static void {\b doctest::detail::filldata}< T[N]>::fill ({\b std::ostream} *  {\i stream}, const T(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWZ}
{\bkmkend AAAAAAABWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1136                                                               \{\par
1137             *stream << {\cf22 "["};\par
1138             {\cf19 for} ({\cf18 size_t} i = 0; i < N; i++) \{\par
1139                 {\cf19 if} (i != 0) \{ *stream << {\cf22 ", "}; \}\par
1140                 *stream << (DOCTEST_STRINGIFY(in[i]));\par
1141             \}\par
1142             *stream << {\cf22 "]"};\par
1143         \}\par
}
}
{\xe \v fill\:doctest::detail::filldata< T[N]>}
{\xe \v doctest::detail::filldata< T[N]>\:fill}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T , size_t N> static void {\b doctest::detail::filldata}< T[N]>::fill ({\b std::ostream} *  {\i stream}, const T(&)  {\i in}[N]){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABWZ}
{\bkmkend AAAAAAABWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1136                                                               \{\par
1137             *stream << {\cf22 "["};\par
1138             {\cf19 for} ({\cf18 size_t} i = 0; i < N; i++) \{\par
1139                 {\cf19 if} (i != 0) \{ *stream << {\cf22 ", "}; \}\par
1140                 *stream << (DOCTEST_STRINGIFY(in[i]));\par
1141             \}\par
1142             *stream << {\cf22 "]"};\par
1143         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Fita\par \pard\plain 
{\tc\tcl2 \v Fita}
{\xe \v Fita}
{\bkmkstart AAAAAAABGI}
{\bkmkend AAAAAAABGI}
\par
{
{\f2 #include <Fita.hpp>}}\par
Diagrama de hierarquia da classe Fita:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_fita.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Fita} (int codigo, std ::string titulo, int unidadesDisponiveis, bool rebobinada)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b getRebobinada} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b imprimirInformacoes} (bool unidades=true)\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b Midia}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Midia} (int codigo, std ::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Midia} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getCodigo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCategoria} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getTitulo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b diminuirUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b aumentarUnidadesDisponiveis} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Fita\:Fita}
{\xe \v Fita\:Fita}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Fita::Fita (int  {\i codigo}, std ::string  {\i titulo}, int  {\i unidadesDisponiveis}, bool  {\i rebobinada})}}
\par
{\bkmkstart AAAAAAABGJ}
{\bkmkend AAAAAAABGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5     :Midia(codigo, titulo,unidadesDisponiveis, {\cf22 "FITA"}), rebobinada({\cf17 true})\par
6     \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v getRebobinada\:Fita}
{\xe \v Fita\:getRebobinada}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Fita::getRebobinada ()}}
\par
{\bkmkstart AAAAAAABGK}
{\bkmkend AAAAAAABGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 8                         \{\par
9     {\cf19 return} rebobinada;\par
10 \}\par
}
}
{\xe \v imprimirInformacoes\:Fita}
{\xe \v Fita\:imprimirInformacoes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Fita::imprimirInformacoes (bool  {\i unidades} = {\f2 true}){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAABGL}
{\bkmkend AAAAAAABGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementa {\b Midia} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGH \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 12                                             \{\par
13     {\cf19 if} (unidades)\{\par
14         std:: cout<<getCodigo()<< {\cf22 " "} << getTitulo() <<{\cf22 " "} << this->getUnidadesDisponiveis() << {\cf22 " "} << {\cf22 "FITA"}<< std:: endl; \par
15     \} {\cf19 else}\{\par
16         std:: cout<<getCodigo()<< {\cf22 " "} << getTitulo() << {\cf22 " "} << {\cf22 "FITA"}<< std:: endl; {\cf20 // Para o relat\'F3rio de loca\'E7\'F5es}\par
17     \}\par
18 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Fita.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Fita.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::has_insertion_operator< T, typename >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator< T, typename >}
{\xe \v doctest::detail::has_insertion_operator< T, typename >}
{\bkmkstart AAAAAAABXA}
{\bkmkend AAAAAAABXA}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::has_insertion_operator< T, typename >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1has__insertion__operator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>\par \pard\plain 
{\tc\tcl2 \v doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}
{\xe \v doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}
{\bkmkstart AAAAAAABXB}
{\bkmkend AAAAAAABXB}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1has__insertion__operator_3_01_t_00_01decltype_07operator_3_3_07declvab094f732977dc5a8a6181e0b8269a776.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::IContextScope\par \pard\plain 
{\tc\tcl2 \v doctest::IContextScope}
{\xe \v doctest::IContextScope}
{\bkmkstart AAAAAAABNR}
{\bkmkend AAAAAAABNR}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::IContextScope:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_i_context_scope.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b stringify} ({\b std::ostream} *) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v stringify\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IContextScope::stringify ({\b std::ostream} * ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNT \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v stringify\:doctest::IContextScope}
{\xe \v doctest::IContextScope\:stringify}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IContextScope::stringify ({\b std::ostream} * ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABNS}
{\bkmkend AAAAAAABNS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNT \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b doctest::detail::ContextScope< L >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABNT \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::IExceptionTranslator\par \pard\plain 
{\tc\tcl2 \v doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator}
{\bkmkstart AAAAAAABXC}
{\bkmkend AAAAAAABXC}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::IExceptionTranslator:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_i_exception_translator.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b translate} ({\b String} &) const =0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual bool {\b translate} ({\b String} &) const =0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v translate\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool doctest::detail::IExceptionTranslator::translate ({\b String} & ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABWE}
{\bkmkend AAAAAAABWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWD \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWD \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\xe \v translate\:doctest::detail::IExceptionTranslator}
{\xe \v doctest::detail::IExceptionTranslator\:translate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual bool doctest::detail::IExceptionTranslator::translate ({\b String} & ) const{\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABWE}
{\bkmkend AAAAAAABWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWD \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b doctest::detail::ExceptionTranslator< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABWD \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::IReporter\par \pard\plain 
{\tc\tcl2 \v doctest::IReporter}
{\xe \v doctest::IReporter}
{\bkmkstart AAAAAAABNU}
{\bkmkend AAAAAAABNU}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b report_query} (const {\b QueryData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_start} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_end} (const {\b TestRunStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_start} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_reenter} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_end} (const {\b CurrentTestCaseStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_exception} (const {\b TestCaseException} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_start} (const {\b SubcaseSignature} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_end} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_assert} (const {\b AssertData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_message} (const {\b MessageData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_skipped} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b report_query} (const {\b QueryData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_start} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_run_end} (const {\b TestRunStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_start} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_reenter} (const {\b TestCaseData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_end} (const {\b CurrentTestCaseStats} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_exception} (const {\b TestCaseException} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_start} (const {\b SubcaseSignature} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b subcase_end} ()=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_assert} (const {\b AssertData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b log_message} (const {\b MessageData} &)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b test_case_skipped} (const {\b TestCaseData} &)=0\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b IContextScope} *const * {\b get_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_stringified_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b String} * {\b get_stringified_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b IContextScope} *const * {\b get_active_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b get_num_stringified_contexts} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b String} * {\b get_stringified_contexts} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b IContextScope} *const  * doctest::IReporter::get_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b IContextScope} *const  * doctest::IReporter::get_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNV}
{\bkmkend AAAAAAABNV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_active_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_active_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_active_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNW}
{\bkmkend AAAAAAABNW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_num_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_num_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static int doctest::IReporter::get_num_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNX}
{\bkmkend AAAAAAABNX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b String} * doctest::IReporter::get_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v get_stringified_contexts\:doctest::IReporter}
{\xe \v doctest::IReporter\:get_stringified_contexts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const {\b String} * doctest::IReporter::get_stringified_contexts (){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABNY}
{\bkmkend AAAAAAABNY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_assert\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_assert (const {\b AssertData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_assert\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_assert (const {\b AssertData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABNZ}
{\bkmkend AAAAAAABNZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_message\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_message (const {\b MessageData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log_message\:doctest::IReporter}
{\xe \v doctest::IReporter\:log_message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::log_message (const {\b MessageData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOA}
{\bkmkend AAAAAAABOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v report_query\:doctest::IReporter}
{\xe \v doctest::IReporter\:report_query}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::report_query (const {\b QueryData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v report_query\:doctest::IReporter}
{\xe \v doctest::IReporter\:report_query}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::report_query (const {\b QueryData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOB}
{\bkmkend AAAAAAABOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_end (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_end (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOC}
{\bkmkend AAAAAAABOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_start (const {\b SubcaseSignature} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v subcase_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:subcase_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::subcase_start (const {\b SubcaseSignature} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOD}
{\bkmkend AAAAAAABOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_end (const {\b CurrentTestCaseStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_end (const {\b CurrentTestCaseStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOE}
{\bkmkend AAAAAAABOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_exception\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_exception (const {\b TestCaseException} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_exception\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_exception}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_exception (const {\b TestCaseException} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOF}
{\bkmkend AAAAAAABOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_reenter\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_reenter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_reenter (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_reenter\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_reenter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_reenter (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOG}
{\bkmkend AAAAAAABOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_skipped\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_skipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_skipped (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_skipped\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_skipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_skipped (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOH}
{\bkmkend AAAAAAABOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_start (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_case_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_case_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_case_start (const {\b TestCaseData} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOI}
{\bkmkend AAAAAAABOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_end (const {\b TestRunStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_end\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_end (const {\b TestRunStats} & ){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOJ}
{\bkmkend AAAAAAABOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_start (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v test_run_start\:doctest::IReporter}
{\xe \v doctest::IReporter\:test_run_start}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void doctest::IReporter::test_run_start (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABOK}
{\bkmkend AAAAAAABOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_array< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_array< T >}
{\xe \v doctest::detail::types::is_array< T >}
{\bkmkstart AAAAAAACAP}
{\bkmkend AAAAAAACAP}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_array< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__array.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_array< T[SIZE]>\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_array< T[SIZE]>}
{\xe \v doctest::detail::types::is_array< T[SIZE]>}
{\bkmkstart AAAAAAACAQ}
{\bkmkend AAAAAAACAQ}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_array< T[SIZE]>:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__array_3_01_t_0f_s_i_z_e_0e_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_enum< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_enum< T >}
{\xe \v doctest::detail::types::is_enum< T >}
{\bkmkstart AAAAAAACAR}
{\bkmkend AAAAAAACAR}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos Est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b __is_enum}({\b T})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v value\:doctest::detail::types::is_enum< T >}
{\xe \v doctest::detail::types::is_enum< T >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b doctest::detail::types::is_enum}< {\b T} >::value = {\b __is_enum}({\b T}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAACAS}
{\bkmkend AAAAAAACAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_pointer< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_pointer< T >}
{\xe \v doctest::detail::types::is_pointer< T >}
{\bkmkstart AAAAAAACAT}
{\bkmkend AAAAAAACAT}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_pointer< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__pointer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_pointer< T * >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_pointer< T * >}
{\xe \v doctest::detail::types::is_pointer< T * >}
{\bkmkstart AAAAAAACAU}
{\bkmkend AAAAAAACAU}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_pointer< T * >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__pointer_3_01_t_01_5_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_rvalue_reference< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_rvalue_reference< T >}
{\xe \v doctest::detail::types::is_rvalue_reference< T >}
{\bkmkstart AAAAAAACAV}
{\bkmkend AAAAAAACAV}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_rvalue_reference< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__rvalue__reference.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::false_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b false}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::is_rvalue_reference< T && >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::is_rvalue_reference< T && >}
{\xe \v doctest::detail::types::is_rvalue_reference< T && >}
{\bkmkstart AAAAAAACAW}
{\bkmkend AAAAAAACAW}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::is_rvalue_reference< T && >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1is__rvalue__reference_3_01_t_01_6_6_01_4.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos Est\'E1ticos herdados de {\b doctest::detail::types::true_type}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::IsNaN< F >\par \pard\plain 
{\tc\tcl2 \v doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >}
{\bkmkstart AAAAAAABOL}
{\bkmkend AAAAAAABOL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN} (F f, bool flip=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN}< F > {\b operator!} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN} (F f, bool flip=false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b IsNaN}< F > {\b operator!} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
F {\b value}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b flipped}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v IsNaN\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:IsNaN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::IsNaN (F  {\i f}, bool  {\i flip} = {\f2 false}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1256 : value(f), flipped(flip) \{ \}\par
}
}
{\xe \v IsNaN\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:IsNaN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::IsNaN (F  {\i f}, bool  {\i flip} = {\f2 false}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABOM}
{\bkmkend AAAAAAABOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1256 : value(f), flipped(flip) \{ \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator bool\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::operator bool () const}}
\par
{\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator bool\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b doctest::IsNaN}< F >::operator bool () const}}
\par
{\bkmkstart AAAAAAABON}
{\bkmkend AAAAAAABON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator!\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator!}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b IsNaN}< F > {\b doctest::IsNaN}< F >::operator! () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1257 \{ {\cf19 return} \{ value, !flipped \}; \}\par
}
}
{\xe \v operator!\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:operator!}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > {\b IsNaN}< F > {\b doctest::IsNaN}< F >::operator! () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABOO}
{\bkmkend AAAAAAABOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1257 \{ {\cf19 return} \{ value, !flipped \}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v flipped\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:flipped}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > bool {\b doctest::IsNaN}< F >::flipped}}
\par
{\bkmkstart AAAAAAABOP}
{\bkmkend AAAAAAABOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v value\:doctest::IsNaN< F >}
{\xe \v doctest::IsNaN< F >\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename F > F {\b doctest::IsNaN}< F >::value}}
\par
{\bkmkstart AAAAAAABOQ}
{\bkmkend AAAAAAABOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::MessageBuilder\par \pard\plain 
{\tc\tcl2 \v doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder}
{\bkmkstart AAAAAAABXD}
{\bkmkend AAAAAAABXD}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::MessageBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_message_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const char *file, int line, {\b assertType::Enum} severity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~MessageBuilder} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator,} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & {\b operator<<} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const char *file, int line, {\b assertType::Enum} severity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} (const {\b MessageBuilder} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MessageBuilder} & {\b operator=} ({\b MessageBuilder} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~MessageBuilder} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator,} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & {\b operator<<} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b MessageBuilder} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b std::ostream} * {\b m_stream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b logged} = false\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos herdados de {\b doctest::MessageData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_severity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const char *  {\i file}, int  {\i line}, {\b assertType::Enum}  {\i severity})}}
\par
{\bkmkstart AAAAAAABXE}
{\bkmkend AAAAAAABXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXF}
{\bkmkend AAAAAAABXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXG}
{\bkmkend AAAAAAABXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:~MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::~MessageBuilder ()}}
\par
{\bkmkstart AAAAAAABXH}
{\bkmkend AAAAAAABXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const char *  {\i file}, int  {\i line}, {\b assertType::Enum}  {\i severity})}}
\par
{\bkmkstart AAAAAAABXE}
{\bkmkend AAAAAAABXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXF}
{\bkmkend AAAAAAABXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::MessageBuilder ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXG}
{\bkmkend AAAAAAABXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~MessageBuilder\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:~MessageBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::MessageBuilder::~MessageBuilder ()}}
\par
{\bkmkstart AAAAAAABXH}
{\bkmkend AAAAAAABXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v log\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::log ()}}
\par
{\bkmkstart AAAAAAABXI}
{\bkmkend AAAAAAABXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::log ()}}
\par
{\bkmkstart AAAAAAABXI}
{\bkmkend AAAAAAABXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXJ}
{\bkmkend AAAAAAABXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1860 \{ {\cf19 return} this->operator,(in); \}\par
}
}
{\xe \v operator*\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXJ}
{\bkmkend AAAAAAABXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1860 \{ {\cf19 return} this->operator,(in); \}\par
}
}
{\xe \v operator,\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator,}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator, (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXK}
{\bkmkend AAAAAAABXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1845                                                \{\par
1846             *m_stream << (DOCTEST_STRINGIFY(in));\par
1847             {\cf19 return} *{\cf17 this};\par
1848         \}\par
}
}
{\xe \v operator,\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator,}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b MessageBuilder} & doctest::detail::MessageBuilder::operator, (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXK}
{\bkmkend AAAAAAABXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1845                                                \{\par
1846             *m_stream << (DOCTEST_STRINGIFY(in));\par
1847             {\cf19 return} *{\cf17 this};\par
1848         \}\par
}
}
{\xe \v operator<<\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & doctest::detail::MessageBuilder::operator<< (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXL}
{\bkmkend AAAAAAABXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1853 \{ {\cf19 return} this->operator,(in); \}\par
}
}
{\xe \v operator<<\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b MessageBuilder} & doctest::detail::MessageBuilder::operator<< (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXL}
{\bkmkend AAAAAAABXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1853 \{ {\cf19 return} this->operator,(in); \}\par
}
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXM}
{\bkmkend AAAAAAABXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= (const {\b MessageBuilder} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXM}
{\bkmkend AAAAAAABXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXN}
{\bkmkend AAAAAAABXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MessageBuilder} & doctest::detail::MessageBuilder::operator= ({\b MessageBuilder} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABXN}
{\bkmkend AAAAAAABXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::MessageBuilder::react ()}}
\par
{\bkmkstart AAAAAAABXO}
{\bkmkend AAAAAAABXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::MessageBuilder::react ()}}
\par
{\bkmkstart AAAAAAABXO}
{\bkmkend AAAAAAABXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v logged\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:logged}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::MessageBuilder::logged = false}}
\par
{\bkmkstart AAAAAAABXP}
{\bkmkend AAAAAAABXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_stream\:doctest::detail::MessageBuilder}
{\xe \v doctest::detail::MessageBuilder\:m_stream}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b std::ostream} * doctest::detail::MessageBuilder::m_stream}}
\par
{\bkmkstart AAAAAAABXQ}
{\bkmkend AAAAAAABXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::MessageData\par \pard\plain 
{\tc\tcl2 \v doctest::MessageData}
{\xe \v doctest::MessageData}
{\bkmkstart AAAAAAABOR}
{\bkmkend AAAAAAABOR}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::MessageData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_message_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_severity}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_file\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::MessageData::m_file}}
\par
{\bkmkstart AAAAAAABOS}
{\bkmkend AAAAAAABOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::MessageData::m_line}}
\par
{\bkmkstart AAAAAAABOT}
{\bkmkend AAAAAAABOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_severity\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_severity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b assertType::Enum} doctest::MessageData::m_severity}}
\par
{\bkmkstart AAAAAAABOU}
{\bkmkend AAAAAAABOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_string\:doctest::MessageData}
{\xe \v doctest::MessageData\:m_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::MessageData::m_string}}
\par
{\bkmkstart AAAAAAABOV}
{\bkmkend AAAAAAABOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe Midia\par \pard\plain 
{\tc\tcl2 \v Midia}
{\xe \v Midia}
{\bkmkstart AAAAAAABGM}
{\bkmkend AAAAAAABGM}
\par
{
{\f2 #include <Midia.hpp>}}\par
Diagrama de hierarquia da classe Midia:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_midia.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Midia} (int codigo, std ::string titulo, int unidadesDisponiveis, std::string categoria)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Midia} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getCodigo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getCategoria} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b getTitulo} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b imprimirInformacoes} (bool unidades=true)=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b diminuirUnidadesDisponiveis} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b aumentarUnidadesDisponiveis} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Midia\:Midia}
{\xe \v Midia\:Midia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Midia::Midia (int  {\i codigo}, std ::string  {\i titulo}, int  {\i unidadesDisponiveis}, std::string  {\i categoria})}}
\par
{\bkmkstart AAAAAAABGN}
{\bkmkend AAAAAAABGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6                                                                                           \{\par
7     this->codigo = codigo;\par
8     this->titulo = titulo;\par
9     this->unidadesDisponiveis = unidadesDisponiveis;\par
10     this->categoriasValidas = \{{\cf22 "Lancamento"},{\cf22 "Estoque"}, {\cf22 "Promocao"}, {\cf22 "FITA"}\};\par
11 \par
12     {\cf19 if} (categoriasValidas.find(categoria) != categoriasValidas.end()) \{\par
13         this->categoria = categoria;\par
14     \} {\cf19 else} \{\par
15         {\cf19 throw} midia_excp::categoria_invalida(categoria);\par
16             std::cout << {\cf22 "As categorias v\'E1lidas s\'E3o: "} << std::endl;\par
17         {\cf19 for} ({\cf17 const} {\cf17 auto}& categoriaValida : categoriasValidas) \{\par
18             std::cout << categoriaValida << std::endl;\par
19         \}\par
20     \}\par
21 \}\par
}
}
{\xe \v ~Midia\:Midia}
{\xe \v Midia\:~Midia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Midia::~Midia (){\f2 [virtual]}, {\f2 [default]}}}
\par
{\bkmkstart AAAAAAABGO}
{\bkmkend AAAAAAABGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v aumentarUnidadesDisponiveis\:Midia}
{\xe \v Midia\:aumentarUnidadesDisponiveis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Midia::aumentarUnidadesDisponiveis ()}}
\par
{\bkmkstart AAAAAAABGP}
{\bkmkend AAAAAAABGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 43                                        \{\par
44     this->unidadesDisponiveis++;\par
45 \}\par
}
}
{\xe \v diminuirUnidadesDisponiveis\:Midia}
{\xe \v Midia\:diminuirUnidadesDisponiveis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Midia::diminuirUnidadesDisponiveis ()}}
\par
{\bkmkstart AAAAAAABGQ}
{\bkmkend AAAAAAABGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 39                                        \{\par
40     this->unidadesDisponiveis--;\par
41 \}\par
}
}
{\xe \v getCategoria\:Midia}
{\xe \v Midia\:getCategoria}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Midia::getCategoria ()}}
\par
{\bkmkstart AAAAAAABGR}
{\bkmkend AAAAAAABGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 27                               \{\par
28     {\cf19 return} categoria;\par
29 \}\par
}
}
{\xe \v getCodigo\:Midia}
{\xe \v Midia\:getCodigo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Midia::getCodigo ()}}
\par
{\bkmkstart AAAAAAABGS}
{\bkmkend AAAAAAABGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                     \{\par
24     {\cf19 return} codigo;\par
25 \}\par
}
}
{\xe \v getTitulo\:Midia}
{\xe \v Midia\:getTitulo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Midia::getTitulo ()}}
\par
{\bkmkstart AAAAAAABGT}
{\bkmkend AAAAAAABGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 31                             \{\par
32     {\cf19 return} titulo;\par
33 \}\par
}
}
{\xe \v getUnidadesDisponiveis\:Midia}
{\xe \v Midia\:getUnidadesDisponiveis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Midia::getUnidadesDisponiveis ()}}
\par
{\bkmkstart AAAAAAABGU}
{\bkmkend AAAAAAABGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 35                                  \{\par
36     {\cf19 return} unidadesDisponiveis;\par
37 \}\par
}
}
{\xe \v imprimirInformacoes\:Midia}
{\xe \v Midia\:imprimirInformacoes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual void Midia::imprimirInformacoes (bool  {\i unidades} = {\f2 true}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAABGH}
{\bkmkend AAAAAAABGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Implementado por {\b Dvd} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGG \\*MERGEFORMAT}{\fldrslt pagenum}}}) e {\b Fita} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAABGL \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b Midia.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b Midia.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe clientes_excp::ordem_invalida\par \pard\plain 
{\tc\tcl2 \v clientes_excp::ordem_invalida}
{\xe \v clientes_excp::ordem_invalida}
{\bkmkstart AAAAAAABHI}
{\bkmkend AAAAAAABHI}
\par
{
{\f2 #include <ControleClientesExceptions.hpp>}}\par
Diagrama de hierarquia da classe clientes_excp::ordem_invalida:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classclientes__excp_1_1ordem__invalida.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ordem_invalida} (char ordem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b get_ordem} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ordem_invalida\:clientes_excp::ordem_invalida}
{\xe \v clientes_excp::ordem_invalida\:ordem_invalida}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
clientes_excp::ordem_invalida::ordem_invalida (char  {\i ordem})}}
\par
{\bkmkstart AAAAAAABHJ}
{\bkmkend AAAAAAABHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11 : _ordem(ordem) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_ordem\:clientes_excp::ordem_invalida}
{\xe \v clientes_excp::ordem_invalida\:get_ordem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char clientes_excp::ordem_invalida::get_ordem (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHK}
{\bkmkend AAAAAAABHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 50 \{ {\cf19 return} _ordem; \};\par
}
}
{\xe \v what\:clientes_excp::ordem_invalida}
{\xe \v clientes_excp::ordem_invalida\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * clientes_excp::ordem_invalida::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABHL}
{\bkmkend AAAAAAABHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 48 \{ {\cf19 return} {\cf22 "Erro: as op\'E7\'F5es de ordena\'E7\'E3o s\'E3o C\'F3digo (C) ou Nome (N)"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/{\b ControleClientesExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/{\b ControleClientesExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::ordem_invalida\par \pard\plain 
{\tc\tcl2 \v midia_excp::ordem_invalida}
{\xe \v midia_excp::ordem_invalida}
{\bkmkstart AAAAAAACCR}
{\bkmkend AAAAAAACCR}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::ordem_invalida:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1ordem__invalida.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ordem_invalida} (char ordem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b get_ordem} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ordem_invalida\:midia_excp::ordem_invalida}
{\xe \v midia_excp::ordem_invalida\:ordem_invalida}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::ordem_invalida::ordem_invalida (char  {\i ordem})}}
\par
{\bkmkstart AAAAAAACCS}
{\bkmkend AAAAAAACCS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 13 : _ordem(ordem) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_ordem\:midia_excp::ordem_invalida}
{\xe \v midia_excp::ordem_invalida\:get_ordem}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char midia_excp::ordem_invalida::get_ordem (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCT}
{\bkmkend AAAAAAACCT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 62 \{ {\cf19 return} _ordem; \};\par
}
}
{\xe \v what\:midia_excp::ordem_invalida}
{\xe \v midia_excp::ordem_invalida\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::ordem_invalida::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCU}
{\bkmkend AAAAAAACCU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 60 \{ {\cf19 return} {\cf22 "ERRO: as op\'E7\'F5es de ordena\'E7\'E3o s\'E3o C\'F3digo (C) ou T\'EDtulo (T)"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::QueryData\par \pard\plain 
{\tc\tcl2 \v doctest::QueryData}
{\xe \v doctest::QueryData}
{\bkmkstart AAAAAAABOW}
{\bkmkend AAAAAAABOW}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestRunStats} * {\b run_stats} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} ** {\b data} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b num_data} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v data\:doctest::QueryData}
{\xe \v doctest::QueryData\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestCaseData} ** doctest::QueryData::data = nullptr}}
\par
{\bkmkstart AAAAAAABOX}
{\bkmkend AAAAAAABOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v num_data\:doctest::QueryData}
{\xe \v doctest::QueryData\:num_data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::QueryData::num_data = 0}}
\par
{\bkmkstart AAAAAAABOY}
{\bkmkend AAAAAAABOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v run_stats\:doctest::QueryData}
{\xe \v doctest::QueryData\:run_stats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b TestRunStats} * doctest::QueryData::run_stats = nullptr}}
\par
{\bkmkstart AAAAAAABOZ}
{\bkmkend AAAAAAABOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::RelationalComparator< int, L, R >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >}
{\bkmkstart AAAAAAABXR}
{\bkmkend AAAAAAABXR}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator()} (const {\b DOCTEST_REF_WRAP}(L), const {\b DOCTEST_REF_WRAP}(R)) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator()} (const {\b DOCTEST_REF_WRAP}(L), const {\b DOCTEST_REF_WRAP}(R)) const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator()\:doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int , class L , class R > bool {\b doctest::detail::RelationalComparator}< int, L, R >::operator() (const   {\i DOCTEST_REF_WRAP}L, const   {\i DOCTEST_REF_WRAP}R) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXS}
{\bkmkend AAAAAAABXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1626 \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
}
}
{\xe \v operator()\:doctest::detail::RelationalComparator< int, L, R >}
{\xe \v doctest::detail::RelationalComparator< int, L, R >\:operator()}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int , class L , class R > bool {\b doctest::detail::RelationalComparator}< int, L, R >::operator() (const   {\i DOCTEST_REF_WRAP}L, const   {\i DOCTEST_REF_WRAP}R) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABXS}
{\bkmkend AAAAAAABXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1626 \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::remove_const< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_const< T >}
{\xe \v doctest::detail::types::remove_const< T >}
{\bkmkstart AAAAAAACAX}
{\bkmkend AAAAAAACAX}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_const< T >}
{\xe \v doctest::detail::types::remove_const< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACAY}
{\bkmkend AAAAAAACAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::remove_const< T >}
{\xe \v doctest::detail::types::remove_const< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACAY}
{\bkmkend AAAAAAACAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::remove_const< const T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_const< const T >}
{\xe \v doctest::detail::types::remove_const< const T >}
{\bkmkstart AAAAAAACAZ}
{\bkmkend AAAAAAACAZ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_const< const T >}
{\xe \v doctest::detail::types::remove_const< const T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b const} {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBA}
{\bkmkend AAAAAAACBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::remove_const< const T >}
{\xe \v doctest::detail::types::remove_const< const T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_const}< {\b const} {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBA}
{\bkmkend AAAAAAACBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::remove_reference< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T >}
{\xe \v doctest::detail::types::remove_reference< T >}
{\bkmkstart AAAAAAACBB}
{\bkmkend AAAAAAACBB}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T >}
{\xe \v doctest::detail::types::remove_reference< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBC}
{\bkmkend AAAAAAACBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::remove_reference< T >}
{\xe \v doctest::detail::types::remove_reference< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBC}
{\bkmkend AAAAAAACBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::remove_reference< T & >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T & >}
{\xe \v doctest::detail::types::remove_reference< T & >}
{\bkmkstart AAAAAAACBD}
{\bkmkend AAAAAAACBD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T & >}
{\xe \v doctest::detail::types::remove_reference< T & >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} & >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBE}
{\bkmkend AAAAAAACBE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::remove_reference< T & >}
{\xe \v doctest::detail::types::remove_reference< T & >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} & >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBE}
{\bkmkend AAAAAAACBE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::remove_reference< T && >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::remove_reference< T && >}
{\xe \v doctest::detail::types::remove_reference< T && >}
{\bkmkstart AAAAAAACBF}
{\bkmkend AAAAAAACBF}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b T}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::remove_reference< T && >}
{\xe \v doctest::detail::types::remove_reference< T && >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} && >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBG}
{\bkmkend AAAAAAACBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::remove_reference< T && >}
{\xe \v doctest::detail::types::remove_reference< T && >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::remove_reference}< {\b T} && >::type =  {\b T}}}
\par
{\bkmkstart AAAAAAACBG}
{\bkmkend AAAAAAACBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::Result\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Result}
{\xe \v doctest::detail::Result}
{\bkmkstart AAAAAAABXT}
{\bkmkend AAAAAAABXT}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} (bool passed, const {\b String} &decomposition={\b String}())\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Result} (bool passed, const {\b String} &decomposition={\b String}())\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_passed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABXU}
{\bkmkend AAAAAAABXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (bool  {\i passed}, const {\b String} &  {\i decomposition} = {\f2 {\b String}()})}}
\par
{\bkmkstart AAAAAAABXV}
{\bkmkend AAAAAAABXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABXU}
{\bkmkend AAAAAAABXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Result\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:Result}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Result::Result (bool  {\i passed}, const {\b String} &  {\i decomposition} = {\f2 {\b String}()})}}
\par
{\bkmkstart AAAAAAABXV}
{\bkmkend AAAAAAABXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_decomp\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_decomp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::Result::m_decomp}}
\par
{\bkmkstart AAAAAAABXW}
{\bkmkend AAAAAAABXW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_passed\:doctest::detail::Result}
{\xe \v doctest::detail::Result\:m_passed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Result::m_passed}}
\par
{\bkmkstart AAAAAAABXX}
{\bkmkend AAAAAAABXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::ResultBuilder\par \pard\plain 
{\tc\tcl2 \v doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder}
{\bkmkstart AAAAAAABXY}
{\bkmkend AAAAAAABXY}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::ResultBuilder:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_result_builder.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type="", const {\b String} &exception_string="")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b Contains} &exception_string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setResult} (const {\b Result} &res)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b binary_assert} (const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b unary_assert} (const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b translateException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type="", const {\b String} &exception_string="")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ResultBuilder} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b Contains} &exception_string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b setResult} (const {\b Result} &res)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b binary_assert} (const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b unary_assert} (const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b translateException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b log} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b react} () const\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros P\'FAblicos herdados de {\b doctest::AssertData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b AssertData} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const char *exception_type, const {\b StringContains} &exception_string)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos herdados de {\b doctest::AssertData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b TestCaseData} * {\b m_test_case}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b assertType::Enum} {\b m_at}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_expr}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_failed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_exception}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_decomp}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_threw_as}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_exception_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b DOCTEST_INTERFACE} {\b doctest::AssertData::StringContains} {\b m_exception_string}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type} = {\f2 ""}, const {\b String} &  {\i exception_string} = {\f2 ""})}}
\par
{\bkmkstart AAAAAAABXZ}
{\bkmkend AAAAAAABXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b Contains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAABYA}
{\bkmkend AAAAAAABYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type} = {\f2 ""}, const {\b String} &  {\i exception_string} = {\f2 ""})}}
\par
{\bkmkstart AAAAAAABXZ}
{\bkmkend AAAAAAABXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ResultBuilder\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:ResultBuilder}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::ResultBuilder::ResultBuilder ({\b assertType::Enum}  {\i at}, const char *  {\i file}, int  {\i line}, const char *  {\i expr}, const char *  {\i exception_type}, const {\b Contains} &  {\i exception_string})}}
\par
{\bkmkstart AAAAAAABYA}
{\bkmkend AAAAAAABYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v binary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::binary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABYB}
{\bkmkend AAAAAAABYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1651                                                                            \{\par
1652             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1653             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1654                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1655             \}\par
1656             {\cf19 return} !m_failed;\par
1657         \}\par
}
}
{\xe \v binary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:binary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::binary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i lhs}, const {\b DOCTEST_REF_WRAP}(R)  {\i rhs}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABYB}
{\bkmkend AAAAAAABYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1651                                                                            \{\par
1652             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1653             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1654                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1655             \}\par
1656             {\cf19 return} !m_failed;\par
1657         \}\par
}
}
{\xe \v log\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ResultBuilder::log ()}}
\par
{\bkmkstart AAAAAAABYC}
{\bkmkend AAAAAAABYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v log\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:log}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::ResultBuilder::log ()}}
\par
{\bkmkstart AAAAAAABYC}
{\bkmkend AAAAAAABYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::react () const}}
\par
{\bkmkstart AAAAAAABYD}
{\bkmkend AAAAAAABYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v react\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:react}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::react () const}}
\par
{\bkmkstart AAAAAAABYD}
{\bkmkend AAAAAAABYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setResult\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:setResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::setResult (const {\b Result} &  {\i res})}}
\par
{\bkmkstart AAAAAAABYE}
{\bkmkend AAAAAAABYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v setResult\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:setResult}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::setResult (const {\b Result} &  {\i res})}}
\par
{\bkmkstart AAAAAAABYE}
{\bkmkend AAAAAAABYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v translateException\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:translateException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::translateException ()}}
\par
{\bkmkstart AAAAAAABYF}
{\bkmkend AAAAAAABYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v translateException\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:translateException}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void doctest::detail::ResultBuilder::translateException ()}}
\par
{\bkmkstart AAAAAAABYF}
{\bkmkend AAAAAAABYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v unary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::unary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i val}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABYG}
{\bkmkend AAAAAAABYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1660                                                                           \{\par
1661             m_failed = !val;\par
1662 \par
1663             {\cf19 if} (m_at & assertType::is_false) \{ \par
1664                 m_failed = !m_failed;\par
1665             \}\par
1666 \par
1667             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1668                 m_decomp = (DOCTEST_STRINGIFY(val));\par
1669             \}\par
1670 \par
1671             {\cf19 return} !m_failed;\par
1672         \}\par
}
}
{\xe \v unary_assert\:doctest::detail::ResultBuilder}
{\xe \v doctest::detail::ResultBuilder\:unary_assert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename L > {\b DOCTEST_NOINLINE} bool doctest::detail::ResultBuilder::unary_assert (const {\b DOCTEST_REF_WRAP}(L)  {\i val}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABYG}
{\bkmkend AAAAAAABYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT bitwise operator in conditional\par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1660                                                                           \{\par
1661             m_failed = !val;\par
1662 \par
1663             {\cf19 if} (m_at & assertType::is_false) \{ \par
1664                 m_failed = !m_failed;\par
1665             \}\par
1666 \par
1667             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1668                 m_decomp = (DOCTEST_STRINGIFY(val));\par
1669             \}\par
1670 \par
1671             {\cf19 return} !m_failed;\par
1672         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe doctest::String\par \pard\plain 
{\tc\tcl2 \v doctest::String}
{\xe \v doctest::String}
{\bkmkstart AAAAAAABPA}
{\bkmkend AAAAAAABPA}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b size_type} = {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b size_type} = {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~String} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b std::istream} &in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator+=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b operator[]} ({\b size_type} i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char & {\b operator[]} ({\b size_type} i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b c_str} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b size} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b capacity} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) &&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) const &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b find} (char ch, {\b size_type} pos=0) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b rfind} (char ch, {\b size_type} pos={\b npos}) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const char *other, bool no_case=false) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const {\b String} &other, bool no_case=false) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} () noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~String} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const char *in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b std::istream} &in, {\b size_type} in_size)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator+=} (const {\b String} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} & {\b operator=} ({\b String} &&other) noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b operator[]} ({\b size_type} i) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char & {\b operator[]} ({\b size_type} i)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b c_str} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b size} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b capacity} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) &&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b substr} ({\b size_type} pos, {\b size_type} cnt={\b npos}) const &\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b find} (char ch, {\b size_type} pos=0) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b size_type} {\b rfind} (char ch, {\b size_type} pos={\b npos}) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const char *other, bool no_case=false) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compare} (const {\b String} &other, bool no_case=false) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos Est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b DOCTEST_CONSTEXPR} {\b size_type} {\b npos} = static_cast<{\b size_type}>(-1)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Amigos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, const {\b String} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b operator<<} ({\b std::ostream} &s, const {\b String} &in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v size_type\:doctest::String}
{\xe \v doctest::String\:size_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::String::size_type} =  {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}}}
\par
{\bkmkstart AAAAAAABPB}
{\bkmkend AAAAAAABPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size_type\:doctest::String}
{\xe \v doctest::String\:size_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
using {\b doctest::String::size_type} =  {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}}}
\par
{\bkmkstart AAAAAAABPB}
{\bkmkend AAAAAAABPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPC}
{\bkmkend AAAAAAABPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~String\:doctest::String}
{\xe \v doctest::String\:~String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::~String ()}}
\par
{\bkmkstart AAAAAAABPD}
{\bkmkend AAAAAAABPD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b std::istream} &  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPC}
{\bkmkend AAAAAAABPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~String\:doctest::String}
{\xe \v doctest::String\:~String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::~String ()}}
\par
{\bkmkstart AAAAAAABPD}
{\bkmkend AAAAAAABPD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABPE}
{\bkmkend AAAAAAABPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const char *  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABPF}
{\bkmkend AAAAAAABPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b std::istream} &  {\i in}, {\b size_type}  {\i in_size})}}
\par
{\bkmkstart AAAAAAABPG}
{\bkmkend AAAAAAABPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPH}
{\bkmkend AAAAAAABPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v String\:doctest::String}
{\xe \v doctest::String\:String}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::String::String ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPI}
{\bkmkend AAAAAAABPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * doctest::String::c_str (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 620                         \{\par
621         {\cf19 if} (isOnStack()) \{\par
622             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
623         \}\par
624         {\cf19 return} data.ptr;\par
625     \}\par
}
}
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char * doctest::String::c_str (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABPJ}
{\bkmkend AAAAAAABPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 620                         \{\par
621         {\cf19 if} (isOnStack()) \{\par
622             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
623         \}\par
624         {\cf19 return} data.ptr;\par
625     \}\par
}
}
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::String::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 619 \{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
}
}
{\xe \v c_str\:doctest::String}
{\xe \v doctest::String\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::String::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABPK}
{\bkmkend AAAAAAABPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 619 \{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
}
}
{\xe \v capacity\:doctest::String}
{\xe \v doctest::String\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::capacity () const}}
\par
{\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v capacity\:doctest::String}
{\xe \v doctest::String\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::capacity () const}}
\par
{\bkmkstart AAAAAAABPL}
{\bkmkend AAAAAAABPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const char *  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const char *  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABPM}
{\bkmkend AAAAAAABPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const {\b String} &  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compare\:doctest::String}
{\xe \v doctest::String\:compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::String::compare (const {\b String} &  {\i other}, bool  {\i no_case} = {\f2 false}) const}}
\par
{\bkmkstart AAAAAAABPN}
{\bkmkend AAAAAAABPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v find\:doctest::String}
{\xe \v doctest::String\:find}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::find (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 0}) const}}
\par
{\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v find\:doctest::String}
{\xe \v doctest::String\:find}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::find (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 0}) const}}
\par
{\bkmkstart AAAAAAABPO}
{\bkmkend AAAAAAABPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+=\:doctest::String}
{\xe \v doctest::String\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator+= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator+=\:doctest::String}
{\xe \v doctest::String\:operator+=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator+= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPP}
{\bkmkend AAAAAAABPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= (const {\b String} &  {\i other})}}
\par
{\bkmkstart AAAAAAABPQ}
{\bkmkend AAAAAAABPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::String}
{\xe \v doctest::String\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} & doctest::String::operator= ({\b String} &&  {\i other}){\f2 [noexcept]}}}
\par
{\bkmkstart AAAAAAABPR}
{\bkmkend AAAAAAABPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char & doctest::String::operator[] ({\b size_type}  {\i i})}}
\par
{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char & doctest::String::operator[] ({\b size_type}  {\i i})}}
\par
{\bkmkstart AAAAAAABPS}
{\bkmkend AAAAAAABPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::operator[] ({\b size_type}  {\i i}) const}}
\par
{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator[]\:doctest::String}
{\xe \v doctest::String\:operator[]}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::operator[] ({\b size_type}  {\i i}) const}}
\par
{\bkmkstart AAAAAAABPT}
{\bkmkend AAAAAAABPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rfind\:doctest::String}
{\xe \v doctest::String\:rfind}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::rfind (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 {\b npos}}) const}}
\par
{\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v rfind\:doctest::String}
{\xe \v doctest::String\:rfind}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::rfind (char  {\i ch}, {\b size_type}  {\i pos} = {\f2 {\b npos}}) const}}
\par
{\bkmkstart AAAAAAABPU}
{\bkmkend AAAAAAABPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:doctest::String}
{\xe \v doctest::String\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::size () const}}
\par
{\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v size\:doctest::String}
{\xe \v doctest::String\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b size_type} doctest::String::size () const}}
\par
{\bkmkstart AAAAAAABPV}
{\bkmkend AAAAAAABPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) &&}}
\par
{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) &&}}
\par
{\bkmkstart AAAAAAABPW}
{\bkmkend AAAAAAABPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) const &}}
\par
{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v substr\:doctest::String}
{\xe \v doctest::String\:substr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::String::substr ({\b size_type}  {\i pos}, {\b size_type}  {\i cnt} = {\f2 {\b npos}}) const &}}
\par
{\bkmkstart AAAAAAABPX}
{\bkmkend AAAAAAABPX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o dos s\'EDmbolos amigos e relacionados\par
\pard\plain 
{\xe \v operator<<\:doctest::String}
{\xe \v doctest::String\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & operator<< ({\b std::ostream} &  {\i s}, const {\b String} &  {\i in}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<<\:doctest::String}
{\xe \v doctest::String\:operator<<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_INTERFACE} {\b std::ostream} & operator<< ({\b std::ostream} &  {\i s}, const {\b String} &  {\i in}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAABPY}
{\bkmkend AAAAAAABPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v buf\:doctest::String}
{\xe \v doctest::String\:buf}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char doctest::String::buf[len]}}
\par
{\bkmkstart AAAAAAABPZ}
{\bkmkend AAAAAAABPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v data\:doctest::String}
{\xe \v doctest::String\:data}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
view doctest::String::data}}
\par
{\bkmkstart AAAAAAABQA}
{\bkmkend AAAAAAABQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v npos\:doctest::String}
{\xe \v doctest::String\:npos}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static {\b DOCTEST_CONSTEXPR} {\b size_type} doctest::String::npos = static_cast<{\b size_type}>(-1){\f2 [static]}}}
\par
{\bkmkstart AAAAAAABQB}
{\bkmkend AAAAAAABQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe doctest::AssertData::StringContains\par \pard\plain 
{\tc\tcl2 \v doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains}
{\bkmkstart AAAAAAABKX}
{\bkmkend AAAAAAABKX}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} ({\b Contains} cntn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b check} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator const String &} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b StringContains} ({\b Contains} cntn)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b check} (const {\b String} &str)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator const String &} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b c_str} () const\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 828 : content(str), isContains({\cf17 false}) \{ \}\par
}
}
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains ({\b Contains}  {\i cntn}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 829 : content({\cf17 static_cast<}Contains&&{\cf17 >}(cntn)), isContains({\cf17 true}) \{ \}\par
}
}
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKY}
{\bkmkend AAAAAAABKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 828 : content(str), isContains({\cf17 false}) \{ \}\par
}
}
{\xe \v StringContains\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:StringContains}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::StringContains ({\b Contains}  {\i cntn}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABKZ}
{\bkmkend AAAAAAABKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 829 : content({\cf17 static_cast<}Contains&&{\cf17 >}(cntn)), isContains({\cf17 true}) \{ \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v c_str\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::StringContains::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 835 \{ {\cf19 return} content.string.c_str(); \}\par
}
}
{\xe \v c_str\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:c_str}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::AssertData::StringContains::c_str () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLA}
{\bkmkend AAAAAAABLA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 835 \{ {\cf19 return} content.string.c_str(); \}\par
}
}
{\xe \v check\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:check}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::StringContains::check (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 831 \{ {\cf19 return} isContains ? (content == str) : (content.string == str); \}\par
}
}
{\xe \v check\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:check}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::AssertData::StringContains::check (const {\b String} &  {\i str}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLB}
{\bkmkend AAAAAAABLB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 831 \{ {\cf19 return} isContains ? (content == str) : (content.string == str); \}\par
}
}
{\xe \v operator const String &\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:operator const String &}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::operator const {\b String} & () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 833 \{ {\cf19 return} content.string; \}\par
}
}
{\xe \v operator const String &\:doctest::AssertData::StringContains}
{\xe \v doctest::AssertData::StringContains\:operator const String &}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::AssertData::StringContains::operator const {\b String} & () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABLC}
{\bkmkend AAAAAAABLC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 833 \{ {\cf19 return} content.string; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::StringMaker< T >\par \pard\plain 
{\tc\tcl2 \v doctest::StringMaker< T >}
{\xe \v doctest::StringMaker< T >}
{\bkmkstart AAAAAAABQC}
{\bkmkend AAAAAAABQC}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::StringMaker< T >:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_string_maker.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Outros membros herdados\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Membros p\'FAblicos est\'E1ticos herdados de {\b doctest::detail::StringMakerBase< detail::has_insertion_operator< T >::value||detail::types::is_pointer< T >::value||detail::types::is_array< T >::value >}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::StringMakerBase< C >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >}
{\bkmkstart AAAAAAABYH}
{\bkmkend AAAAAAABYH}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T))\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< C >::convert (const   {\i DOCTEST_REF_WRAP}T){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABYI}
{\bkmkend AAAAAAABYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1012                                                          \{\par
1013 {\cf21 #ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES}\par
1014             {\cf17 static_assert}(deferred_false<T>::value, {\cf22 "No stringification detected for type T. See string conversion manual"});\par
1015 {\cf21 #endif}\par
1016             {\cf19 return} {\cf22 "\{?\}"};\par
1017         \}\par
}
}
{\xe \v convert\:doctest::detail::StringMakerBase< C >}
{\xe \v doctest::detail::StringMakerBase< C >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<bool C> template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< C >::convert (const   {\i DOCTEST_REF_WRAP}T){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABYI}
{\bkmkend AAAAAAABYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1012                                                          \{\par
1013 {\cf21 #ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES}\par
1014             {\cf17 static_assert}(deferred_false<T>::value, {\cf22 "No stringification detected for type T. See string conversion manual"});\par
1015 {\cf21 #endif}\par
1016             {\cf19 return} {\cf22 "\{?\}"};\par
1017         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::StringMakerBase< true >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >}
{\bkmkstart AAAAAAABYJ}
{\bkmkend AAAAAAABYJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros p\'FAblicos est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T) in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > static {\b String} {\b convert} (const {\b DOCTEST_REF_WRAP}(T) in)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v convert\:doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< true >::convert (const {\b DOCTEST_REF_WRAP}(T)  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABYK}
{\bkmkend AAAAAAABYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1045                                                             \{\par
1046             {\cf19 return} toStream(in);\par
1047         \}\par
}
}
{\xe \v convert\:doctest::detail::StringMakerBase< true >}
{\xe \v doctest::detail::StringMakerBase< true >\:convert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > static {\b String} {\b doctest::detail::StringMakerBase}< true >::convert (const {\b DOCTEST_REF_WRAP}(T)  {\i in}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAABYK}
{\bkmkend AAAAAAABYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1045                                                             \{\par
1046             {\cf19 return} toStream(in);\par
1047         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::Subcase\par \pard\plain 
{\tc\tcl2 \v doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase}
{\bkmkstart AAAAAAABYL}
{\bkmkend AAAAAAABYL}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b String} &name, const char *file, int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Subcase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b String} &name, const char *file, int line)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} (const {\b Subcase} &)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Subcase} & {\b operator=} ({\b Subcase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~Subcase} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b operator bool} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b SubcaseSignature} {\b m_signature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_entered} = false\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b String} &  {\i name}, const char *  {\i file}, int  {\i line})}}
\par
{\bkmkstart AAAAAAABYM}
{\bkmkend AAAAAAABYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYN}
{\bkmkend AAAAAAABYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYO}
{\bkmkend AAAAAAABYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:~Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::~Subcase ()}}
\par
{\bkmkstart AAAAAAABYP}
{\bkmkend AAAAAAABYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b String} &  {\i name}, const char *  {\i file}, int  {\i line})}}
\par
{\bkmkstart AAAAAAABYM}
{\bkmkend AAAAAAABYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYN}
{\bkmkend AAAAAAABYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::Subcase ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYO}
{\bkmkend AAAAAAABYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~Subcase\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:~Subcase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::~Subcase ()}}
\par
{\bkmkstart AAAAAAABYP}
{\bkmkend AAAAAAABYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator bool\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::operator bool () const}}
\par
{\bkmkstart AAAAAAABYQ}
{\bkmkend AAAAAAABYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator bool\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator bool}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::Subcase::operator bool () const}}
\par
{\bkmkstart AAAAAAABYQ}
{\bkmkend AAAAAAABYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYR}
{\bkmkend AAAAAAABYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= (const {\b Subcase} & ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYR}
{\bkmkend AAAAAAABYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYS}
{\bkmkend AAAAAAABYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Subcase} & doctest::detail::Subcase::operator= ({\b Subcase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYS}
{\bkmkend AAAAAAABYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_entered\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_entered}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::Subcase::m_entered = false}}
\par
{\bkmkstart AAAAAAABYT}
{\bkmkend AAAAAAABYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_signature\:doctest::detail::Subcase}
{\xe \v doctest::detail::Subcase\:m_signature}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b SubcaseSignature} doctest::detail::Subcase::m_signature}}
\par
{\bkmkstart AAAAAAABYU}
{\bkmkend AAAAAAABYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::SubcaseSignature\par \pard\plain 
{\tc\tcl2 \v doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature}
{\bkmkstart AAAAAAABQD}
{\bkmkend AAAAAAABQD}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b SubcaseSignature} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b SubcaseSignature} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b SubcaseSignature} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b SubcaseSignature} &other) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_line}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator<\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator< (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator< (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABQE}
{\bkmkend AAAAAAABQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator== (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator==\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::SubcaseSignature::operator== (const {\b SubcaseSignature} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABQF}
{\bkmkend AAAAAAABQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_file\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::SubcaseSignature::m_file}}
\par
{\bkmkstart AAAAAAABQG}
{\bkmkend AAAAAAABQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::SubcaseSignature::m_line}}
\par
{\bkmkstart AAAAAAABQH}
{\bkmkend AAAAAAABQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::SubcaseSignature}
{\xe \v doctest::SubcaseSignature\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::SubcaseSignature::m_name}}
\par
{\bkmkstart AAAAAAABQI}
{\bkmkend AAAAAAABQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::TestCase\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase}
{\bkmkstart AAAAAAABYV}
{\bkmkend AAAAAAABYV}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::TestCase:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1_test_case.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b funcType} test, const char *file, unsigned line, const {\b TestSuite} &test_suite, const {\b String} &type={\b String}(), int template_id=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator=} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & {\b operator=} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestCase} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b TestCase} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~TestCase} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b funcType} test, const char *file, unsigned line, const {\b TestSuite} &test_suite, const {\b String} &type={\b String}(), int template_id=-1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator=} (const {\b TestCase} &other)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & {\b operator=} ({\b TestCase} &&)=delete\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestCase} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestCase} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b TestCase} &other) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ~TestCase} ()=default\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b funcType} {\b m_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_template_id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_full_name}\par
}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Atributos P\'FAblicos herdados de {\b doctest::TestCaseData}\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b funcType}  {\i test}, const char *  {\i file}, unsigned  {\i line}, const {\b TestSuite} &  {\i test_suite}, const {\b String} &  {\i type} = {\f2 {\b String}()}, int  {\i template_id} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAABYW}
{\bkmkend AAAAAAABYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABYX}
{\bkmkend AAAAAAABYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYY}
{\bkmkend AAAAAAABYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:~TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::~TestCase (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABYZ}
{\bkmkend AAAAAAABYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b funcType}  {\i test}, const char *  {\i file}, unsigned  {\i line}, const {\b TestSuite} &  {\i test_suite}, const {\b String} &  {\i type} = {\f2 {\b String}()}, int  {\i template_id} = {\f2 -1})}}
\par
{\bkmkstart AAAAAAABYW}
{\bkmkend AAAAAAABYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABYX}
{\bkmkend AAAAAAABYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::TestCase ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABYY}
{\bkmkend AAAAAAABYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ~TestCase\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:~TestCase}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
doctest::detail::TestCase::~TestCase (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAABYZ}
{\bkmkend AAAAAAABYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABZA}
{\bkmkend AAAAAAABZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABZA}
{\bkmkend AAAAAAABZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestCase} & doctest::detail::TestCase::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABZB}
{\bkmkend AAAAAAABZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1595                                          \{\par
1596             in.fill(*{\cf17 this});\par
1597             {\cf19 return} *{\cf17 this};\par
1598         \}\par
}
}
{\xe \v operator*\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestCase} & doctest::detail::TestCase::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABZB}
{\bkmkend AAAAAAABZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1595                                          \{\par
1596             in.fill(*{\cf17 this});\par
1597             {\cf19 return} *{\cf17 this};\par
1598         \}\par
}
}
{\xe \v operator<\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestCase::operator< (const {\b TestCase} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABZC}
{\bkmkend AAAAAAABZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator<\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestCase::operator< (const {\b TestCase} &  {\i other}) const}}
\par
{\bkmkstart AAAAAAABZC}
{\bkmkend AAAAAAABZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator= (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABZD}
{\bkmkend AAAAAAABZD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestCase} & doctest::detail::TestCase::operator= (const {\b TestCase} &  {\i other})}}
\par
{\bkmkstart AAAAAAABZD}
{\bkmkend AAAAAAABZD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & doctest::detail::TestCase::operator= ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABZE}
{\bkmkend AAAAAAABZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator=\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:operator=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b DOCTEST_MSVC_SUPPRESS_WARNING_POP} {\b TestCase} & doctest::detail::TestCase::operator= ({\b TestCase} && ){\f2 [delete]}}}
\par
{\bkmkstart AAAAAAABZE}
{\bkmkend AAAAAAABZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_full_name\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_full_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::TestCase::m_full_name}}
\par
{\bkmkstart AAAAAAABZF}
{\bkmkend AAAAAAABZF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_template_id\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_template_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestCase::m_template_id}}
\par
{\bkmkstart AAAAAAABZG}
{\bkmkend AAAAAAABZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b funcType} doctest::detail::TestCase::m_test}}
\par
{\bkmkstart AAAAAAABZH}
{\bkmkend AAAAAAABZH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_type\:doctest::detail::TestCase}
{\xe \v doctest::detail::TestCase\:m_type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::detail::TestCase::m_type}}
\par
{\bkmkstart AAAAAAABZI}
{\bkmkend AAAAAAABZI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::TestCaseData\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseData}
{\xe \v doctest::TestCaseData}
{\bkmkstart AAAAAAABQJ}
{\bkmkend AAAAAAABQJ}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::TestCaseData:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1_test_case_data.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b m_file}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b m_line}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_name}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_description\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::TestCaseData::m_description}}
\par
{\bkmkstart AAAAAAABQK}
{\bkmkend AAAAAAABQK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestCaseData::m_expected_failures}}
\par
{\bkmkstart AAAAAAABQL}
{\bkmkend AAAAAAABQL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_file\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_file}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseData::m_file}}
\par
{\bkmkstart AAAAAAABQM}
{\bkmkend AAAAAAABQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_line\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_line}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestCaseData::m_line}}
\par
{\bkmkstart AAAAAAABQN}
{\bkmkend AAAAAAABQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_may_fail}}
\par
{\bkmkstart AAAAAAABQO}
{\bkmkend AAAAAAABQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_name\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::TestCaseData::m_name}}
\par
{\bkmkstart AAAAAAABQP}
{\bkmkend AAAAAAABQP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_breaks\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_no_breaks}}
\par
{\bkmkstart AAAAAAABQQ}
{\bkmkend AAAAAAABQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_output\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_no_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_no_output}}
\par
{\bkmkstart AAAAAAABQR}
{\bkmkend AAAAAAABQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_should_fail}}
\par
{\bkmkstart AAAAAAABQS}
{\bkmkend AAAAAAABQS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseData::m_skip}}
\par
{\bkmkstart AAAAAAABQT}
{\bkmkend AAAAAAABQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::TestCaseData::m_test_suite}}
\par
{\bkmkstart AAAAAAABQU}
{\bkmkend AAAAAAABQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::TestCaseData}
{\xe \v doctest::TestCaseData\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::TestCaseData::m_timeout}}
\par
{\bkmkstart AAAAAAABQV}
{\bkmkend AAAAAAABQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::TestCaseException\par \pard\plain 
{\tc\tcl2 \v doctest::TestCaseException}
{\xe \v doctest::TestCaseException}
{\bkmkstart AAAAAAABQW}
{\bkmkend AAAAAAABQW}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b String} {\b error_string}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b is_crash}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v error_string\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:error_string}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b String} doctest::TestCaseException::error_string}}
\par
{\bkmkstart AAAAAAABQX}
{\bkmkend AAAAAAABQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v is_crash\:doctest::TestCaseException}
{\xe \v doctest::TestCaseException\:is_crash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::TestCaseException::is_crash}}
\par
{\bkmkstart AAAAAAABQY}
{\bkmkend AAAAAAABQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::TestFailureException\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestFailureException}
{\xe \v doctest::detail::TestFailureException}
{\bkmkstart AAAAAAABZJ}
{\bkmkend AAAAAAABZJ}
\par
{
{\f2 #include <doctest.h>}}\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::TestRunStats\par \pard\plain 
{\tc\tcl2 \v doctest::TestRunStats}
{\xe \v doctest::TestRunStats}
{\bkmkstart AAAAAAABQZ}
{\bkmkend AAAAAAABQZ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCases}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestSuitesPassingFilters}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned {\b numTestCasesFailed}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAsserts}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numAssertsFailed}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v numAsserts\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAsserts}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAsserts}}
\par
{\bkmkstart AAAAAAABRA}
{\bkmkend AAAAAAABRA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numAssertsFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numAssertsFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::TestRunStats::numAssertsFailed}}
\par
{\bkmkstart AAAAAAABRB}
{\bkmkend AAAAAAABRB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCases\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCases}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCases}}
\par
{\bkmkstart AAAAAAABRC}
{\bkmkend AAAAAAABRC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesFailed\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesFailed}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesFailed}}
\par
{\bkmkstart AAAAAAABRD}
{\bkmkend AAAAAAABRD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestCasesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestCasesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestCasesPassingFilters}}
\par
{\bkmkstart AAAAAAABRE}
{\bkmkend AAAAAAABRE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numTestSuitesPassingFilters\:doctest::TestRunStats}
{\xe \v doctest::TestRunStats\:numTestSuitesPassingFilters}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned doctest::TestRunStats::numTestSuitesPassingFilters}}
\par
{\bkmkstart AAAAAAABRF}
{\bkmkend AAAAAAABRF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::TestSuite\par \pard\plain 
{\tc\tcl2 \v doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite}
{\bkmkstart AAAAAAABZK}
{\bkmkend AAAAAAABZK}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestSuite} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestSuite} & {\b operator*} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TestSuite} & {\b operator*} (const char *in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b TestSuite} & {\b operator*} (const T &in)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_test_suite} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b m_description} = nullptr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_skip} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_breaks} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_no_output} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_may_fail} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b m_should_fail} = false\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b m_expected_failures} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
double {\b m_timeout} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestSuite} & doctest::detail::TestSuite::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABZL}
{\bkmkend AAAAAAABZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b TestSuite} & doctest::detail::TestSuite::operator* (const char *  {\i in})}}
\par
{\bkmkstart AAAAAAABZL}
{\bkmkend AAAAAAABZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestSuite} & doctest::detail::TestSuite::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABZM}
{\bkmkend AAAAAAABZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1564                                           \{\par
1565             in.fill(*{\cf17 this});\par
1566             {\cf19 return} *{\cf17 this};\par
1567         \}\par
}
}
{\xe \v operator*\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:operator*}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > {\b TestSuite} & doctest::detail::TestSuite::operator* (const T &  {\i in}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAABZM}
{\bkmkend AAAAAAABZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1564                                           \{\par
1565             in.fill(*{\cf17 this});\par
1566             {\cf19 return} *{\cf17 this};\par
1567         \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v m_description\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_description}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::detail::TestSuite::m_description = nullptr}}
\par
{\bkmkstart AAAAAAABZN}
{\bkmkend AAAAAAABZN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_expected_failures\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_expected_failures}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int doctest::detail::TestSuite::m_expected_failures = 0}}
\par
{\bkmkstart AAAAAAABZO}
{\bkmkend AAAAAAABZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_may_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_may_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_may_fail = false}}
\par
{\bkmkstart AAAAAAABZP}
{\bkmkend AAAAAAABZP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_breaks\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_no_breaks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_no_breaks = false}}
\par
{\bkmkstart AAAAAAABZQ}
{\bkmkend AAAAAAABZQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_no_output\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_no_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_no_output = false}}
\par
{\bkmkstart AAAAAAABZR}
{\bkmkend AAAAAAABZR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_should_fail\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_should_fail}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_should_fail = false}}
\par
{\bkmkstart AAAAAAABZS}
{\bkmkend AAAAAAABZS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_skip\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_skip}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool doctest::detail::TestSuite::m_skip = false}}
\par
{\bkmkstart AAAAAAABZT}
{\bkmkend AAAAAAABZT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_test_suite\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_test_suite}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * doctest::detail::TestSuite::m_test_suite = nullptr}}
\par
{\bkmkstart AAAAAAABZU}
{\bkmkend AAAAAAABZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v m_timeout\:doctest::detail::TestSuite}
{\xe \v doctest::detail::TestSuite\:m_timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
double doctest::detail::TestSuite::m_timeout = 0}}
\par
{\bkmkstart AAAAAAABZV}
{\bkmkend AAAAAAABZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Classe midia_excp::tipo_desconhecido\par \pard\plain 
{\tc\tcl2 \v midia_excp::tipo_desconhecido}
{\xe \v midia_excp::tipo_desconhecido}
{\bkmkstart AAAAAAACCV}
{\bkmkend AAAAAAACCV}
\par
{
{\f2 #include <ControleMidiaExceptions.hpp>}}\par
Diagrama de hierarquia da classe midia_excp::tipo_desconhecido:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classmidia__excp_1_1tipo__desconhecido.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Membros P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b tipo_desconhecido} (int tipoMidia)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const char * {\b what} () const  throw ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b get_tipo} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Construtores e Destrutores\par
\pard\plain 
{\xe \v tipo_desconhecido\:midia_excp::tipo_desconhecido}
{\xe \v midia_excp::tipo_desconhecido\:tipo_desconhecido}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
midia_excp::tipo_desconhecido::tipo_desconhecido (int  {\i tipoMidia})}}
\par
{\bkmkstart AAAAAAACCW}
{\bkmkend AAAAAAACCW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9 : _tipoMidia(tipoMidia) \{\}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das fun\'E7\'F5es\par
\pard\plain 
{\xe \v get_tipo\:midia_excp::tipo_desconhecido}
{\xe \v midia_excp::tipo_desconhecido\:get_tipo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int midia_excp::tipo_desconhecido::get_tipo (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCX}
{\bkmkend AAAAAAACCX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 38 \{ {\cf19 return} _tipoMidia; \};\par
}
}
{\xe \v what\:midia_excp::tipo_desconhecido}
{\xe \v midia_excp::tipo_desconhecido\:what}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char * midia_excp::tipo_desconhecido::what () const throw ( ) {\f2 [inline]}}}
\par
{\bkmkstart AAAAAAACCY}
{\bkmkend AAAAAAACCY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 36 \{ {\cf19 return} {\cf22 "ERRO: tipo de m\'EDdia desconhecido"}; \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/{\b ControleMidiaExceptions.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/{\b ControleMidiaExceptions.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura doctest::detail::types::true_type\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::true_type}
{\xe \v doctest::detail::types::true_type}
{\bkmkstart AAAAAAACBH}
{\bkmkend AAAAAAACBH}
\par
{
{\f2 #include <doctest.h>}}\par
Diagrama de hierarquia da classe doctest::detail::types::true_type:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "structdoctest_1_1detail_1_1types_1_1true__type.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos P\'FAblicos Est\'E1ticos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} {\b value} = {\b true}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Atributos\par
\pard\plain 
{\xe \v value\:doctest::detail::types::true_type}
{\xe \v doctest::detail::types::true_type\:value}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b static} {\b DOCTEST_CONSTEXPR} {\b bool} doctest::detail::types::true_type::value = {\b true}{\f2 [static]}}}
\par
{\bkmkstart AAAAAAACBI}
{\bkmkend AAAAAAACBI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Classe std::tuple< Types >\par \pard\plain 
{\tc\tcl2 \v std::tuple< Types >}
{\xe \v std::tuple< Types >}
{\bkmkstart AAAAAAACDI}
{\bkmkend AAAAAAACDI}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa classe foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Template da Estrutura doctest::detail::types::underlying_type< T >\par \pard\plain 
{\tc\tcl2 \v doctest::detail::types::underlying_type< T >}
{\xe \v doctest::detail::types::underlying_type< T >}
{\bkmkstart AAAAAAACBJ}
{\bkmkend AAAAAAACBJ}
\par
{
{\f2 #include <doctest.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Tipos P\'FAblicos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b __underlying_type}({\b T})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b using} {\b type} = {\b __underlying_type}({\b T})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Documenta\'E7\'E3o das defini\'E7\'F5es de tipos\par
\pard\plain 
{\xe \v type\:doctest::detail::types::underlying_type< T >}
{\xe \v doctest::detail::types::underlying_type< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::underlying_type}< {\b T} >::type =  {\b __underlying_type}({\b T})}}
\par
{\bkmkstart AAAAAAACBK}
{\bkmkend AAAAAAACBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v type\:doctest::detail::types::underlying_type< T >}
{\xe \v doctest::detail::types::underlying_type< T >\:type}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<{\b typename} {\b T} > {\b using} {\b doctest::detail::types::underlying_type}< {\b T} >::type =  {\b __underlying_type}({\b T})}}
\par
{\bkmkstart AAAAAAACBK}
{\bkmkend AAAAAAACBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir dos seguintes arquivos:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/{\b doctest.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/{\b doctest.hpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Arquivos{\tc \v Arquivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/Cliente.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/Cliente.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/Cliente.hpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
{\f2 #include <ctime>}\par
{\f2 #include <string>}\par
{\f2 #include <iomanip>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Alocacao}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Cliente}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FORMATO_DATA}\~ "%d/%m/%Y"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v FORMATO_DATA\:Cliente.hpp}
{\xe \v Cliente.hpp\:FORMATO_DATA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FORMATO_DATA\~ "%d/%m/%Y"}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Cliente.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/Cliente.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/Cliente.hpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CLIENTE_H}\par
2 {\cf21 #define CLIENTE_H}\par
3 \par
4 {\cf21 #include <iostream>}\par
5 {\cf21 #include <ctime>}\par
6 {\cf21 #include <string>}\par
7 {\cf21 #include <iomanip>}\par
8 {\cf21 #include <vector>} \par
9 \par
10 {\cf21 #define FORMATO_DATA "%d/%m/%Y"}\par
11 \par
12 {\cf17 struct }Alocacao \{\par
13     {\cf18 int} _codigo;\par
14     std::tm _momento_de_locacao;\par
15     std::tm _momento_de_devolucao = \{\};\par
16     {\cf18 bool} _devolvido;\par
17 \par
18     Alocacao({\cf18 int} codigo, std::tm  momento_de_locacao):\par
19     _codigo(codigo),\par
20     _momento_de_locacao(momento_de_locacao),\par
21     _devolvido(false) \{\}\par
22 \par
23     {\cf18 void} devolver(std::tm momento_de_devolucao)\{\par
24         _momento_de_devolucao = momento_de_devolucao;\par
25         _devolvido = {\cf17 true};\par
26     \}\par
27 \par
28     {\cf18 int} getCodigo() \{{\cf19 return} _codigo;\}\par
29 \par
30     {\cf18 bool} getDevolvido() \{{\cf19 return} _devolvido;\}\par
31 \par
32     std::tm getAlocacao()\{{\cf19 return} _momento_de_locacao;\}\par
33 \par
34     {\cf18 void} printInformacao()\{\par
35         {\cf19 if} (_devolvido)\{\par
36             std::cout << _codigo << {\cf22 " "} << \par
37             std::put_time(&_momento_de_locacao, FORMATO_DATA) << {\cf22 " "} << \par
38             std::put_time(&_momento_de_devolucao, FORMATO_DATA) << std::endl;\par
39         \} {\cf19 else} \{\par
40             std::cout << _codigo << {\cf22 " "} << \par
41             std::put_time(&_momento_de_locacao, FORMATO_DATA) << {\cf22 " "} << \par
42             {\cf22 "--/--/----"} << std::endl;\par
43         \}\par
44     \}\par
45 \};\par
46 \par
47 {\cf17 class }Cliente \{\par
48     std::vector<Alocacao*> historico;\par
49     std::string nome;\par
50     std::string cpf;\par
51 \par
52 {\cf17 public}:\par
53     Cliente(std::string nome, std::string cpf);\par
54     std::string getNome();\par
55     std::string getCPF();\par
56     {\cf18 int} fazerLocacao({\cf18 int} codigo, std::tm momento_de_locacao);\par
57     {\cf18 int} fazerDevolucao({\cf18 int} codigo, std::tm momento_de_devolucao);\par
58     std::tm getDataLocacao({\cf18 int} codigo);\par
59     {\cf18 bool} printHistorico();\par
60     {\cf18 bool} isHistoricoVazio();\par
61 \};\par
62 \par
63 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientes.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientes.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientes.hpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Cliente.hpp"}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ControleClientes}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControleClientes.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientes.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientes.hpp}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CONTROLE_CLIENTES_H}\par
2 {\cf21 #define CONTROLE_CLIENTES_H}\par
3 \par
4 {\cf21 #include "Cliente.hpp"}\par
5 {\cf21 #include <string>}\par
6 {\cf21 #include <vector>}\par
7 \par
8 {\cf17 class }ControleClientes \{\par
9     std::vector<Cliente*> clientes;\par
10     \par
11 {\cf17 public}:\par
12     ControleClientes();\par
13     {\cf18 bool} fazerCadastro(std::string nome, std::string cpf, {\cf18 bool} msg = {\cf17 true});\par
14     {\cf18 bool} removerCadastro(std::string cpf);\par
15     Cliente* pesquisarCliente(std::string cpf);\par
16     {\cf18 bool} gerarRelatorio({\cf18 char} ordem);\par
17     {\cf18 void} limparDatabase();\par
18     {\cf18 bool} printHistorico(std::string cpf);\par
19     ~ControleClientes();\par
20 \};\par
21 \par
22 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientesExceptions.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientesExceptions.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientesExceptions.hpp}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdexcept>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b clientes_excp::cpf_curto}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b clientes_excp::cpf_repetido}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b clientes_excp::cpf_inexistente}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b clientes_excp::ordem_invalida}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b clientes_excp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControleClientesExceptions.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientesExceptions.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleClientes/ControleClientesExceptions.hpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CONTROLE_CLIENTES_EXCEPTIONS_HPP}\par
2 {\cf21 #define CONTROLE_CLIENTES_EXCEPTIONS_HPP}\par
3 \par
4 {\cf21 #include <stdexcept>}\par
5 \par
6 {\cf17 namespace }clientes_excp \{\par
7 \par
8 {\cf17 class }cpf_curto : {\cf17 public} std::exception \{\par
9 {\cf17 public}:\par
10     cpf_curto(std::string cpf);\par
11 \par
12     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: CPF deve conter 11 digitos"}; \}\par
13 \par
14     std::string get_cpf() \{ {\cf19 return} _cpf; \};\par
15 \par
16 {\cf17 private}:\par
17     std::string _cpf;\par
18 \};\par
19 \par
20 {\cf17 class }cpf_repetido : {\cf17 public} std::exception \{\par
21 {\cf17 public}:\par
22     cpf_repetido(std::string cpf);\par
23 \par
24     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: CPF repetido"}; \}\par
25 \par
26     std::string get_cpf() \{ {\cf19 return} _cpf; \};\par
27 \par
28 {\cf17 private}:\par
29     std::string _cpf;\par
30 \};\par
31 \par
32 {\cf17 class }cpf_inexistente : {\cf17 public} std::exception \{\par
33 {\cf17 public}:\par
34     cpf_inexistente(std::string cpf);\par
35 \par
36     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: CPF inexistente"}; \}\par
37 \par
38     std::string get_cpf() \{ {\cf19 return} _cpf; \};\par
39 \par
40 {\cf17 private}:\par
41     std::string _cpf;\par
42 \};\par
43 \par
44 {\cf17 class }ordem_invalida : {\cf17 public} std::exception \{\par
45 {\cf17 public}:\par
46     ordem_invalida({\cf18 char} ordem);\par
47 \par
48     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "Erro: as op\'E7\'F5es de ordena\'E7\'E3o s\'E3o C\'F3digo (C) ou Nome (N)"}; \}\par
49 \par
50     {\cf18 char} get_ordem() \{ {\cf19 return} _ordem; \};\par
51 \par
52 {\cf17 private}:\par
53     {\cf18 char} _ordem;\par
54 \};\par
55 \par
56 \}\par
57 \par
58 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/ControleLocacao.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/ControleLocacao.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/ControleLocacao.hpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleClientes.hpp"}\par
{\f2 #include "ControleMidia.hpp"}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
{\f2 #include <unordered_map>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ControleLocacao}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControleLocacao.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/ControleLocacao.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleLocacao/ControleLocacao.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CONTROLE_LOCACAO_H}\par
2 {\cf21 #define CONTROLE_LOCACAO_H}\par
3 \par
4 {\cf21 #include "ControleClientes.hpp"}\par
5 {\cf21 #include "ControleMidia.hpp"}\par
6 {\cf21 #include <string>}\par
7 {\cf21 #include <vector>}\par
8 {\cf21 #include <unordered_map>} \par
9 \par
10 {\cf17 class }ControleLocacao\{\par
11     std::unordered_map<Cliente*, std::vector<Midia*>> locacoes;\par
12 \par
13 {\cf17 public}:\par
14     {\cf18 double} calculaAluguel(Midia &filme, {\cf18 double} duracao);\par
15     {\cf18 bool} fazerLocacao(ControleClientes &cc, ControleMidia &cm, std::string cpf, std::vector<int> filmes);\par
16     {\cf18 bool} fazerDevolucao(ControleClientes &cc, ControleMidia &cm, std::string cpf);\par
17 \};\par
18 \par
19 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidia.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidia.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidia.hpp}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Midia.hpp"}\par
{\f2 #include "Dvd.hpp"}\par
{\f2 #include "Fita.hpp"}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ControleMidia}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControleMidia.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidia.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidia.hpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CONTROLE_MIDIA_H}\par
2 {\cf21 #define CONTROLE_MIDIA_H}\par
3 \par
4 {\cf21 #include "Midia.hpp"}\par
5 {\cf21 #include "Dvd.hpp"}\par
6 {\cf21 #include "Fita.hpp"}\par
7 {\cf21 #include <vector>}\par
8 \par
9 {\cf17 class }ControleMidia \{\par
10     \par
11     std :: vector<Midia*> estoque;\par
12 \par
13     {\cf17 public}:\par
14         ControleMidia();\par
15         ~ControleMidia();\par
16         std::vector<Midia*> getEstoque();  \par
17         std::vector<Midia*>::iterator getEstoqueEnd();  \par
18         {\cf18 bool} cadastrarMidia({\cf18 int} tipoMidia, {\cf18 int} codigo, std::string titulo, {\cf18 int} unidadesDisponiveis, std::string categoria);\par
19         {\cf18 bool} cadastrarDvd({\cf18 int} codigo, std :: string titulo,{\cf18 int} unidadesDisponiveis, std:: string categoria);\par
20         {\cf18 bool} cadastrarFita({\cf18 int} codigo, std :: string titulo,{\cf18 int} unidadesDisponiveis, {\cf18 bool} rebobinada);\par
21         {\cf18 bool} lerArquivoCadastro(std :: string arquivo);\par
22         std::vector<Midia *>::iterator pesquisarMidia({\cf18 int} codigo);\par
23         {\cf18 bool} removerMidia({\cf18 int} codigo);\par
24         {\cf18 void} imprimirMidias({\cf18 char} ordem);\par
25 \par
26 \};\par
27 \par
28 \par
29 \par
30 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidiaExceptions.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidiaExceptions.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidiaExceptions.hpp}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdexcept>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::codigo_repetido}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::codigo_inexistente}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::tipo_desconhecido}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::erro_de_abertura}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::ordem_invalida}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b midia_excp::categoria_invalida}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b midia_excp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ControleMidiaExceptions.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidiaExceptions.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/ControleMidiaExceptions.hpp}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CONTROLE_MIDIA_EXCEPTIONS_HPP}\par
2 {\cf21 #define CONTROLE_MIDIA_EXCEPTIONS_HPP}\par
3 \par
4 {\cf21 #include <stdexcept>}\par
5 \par
6 {\cf17 namespace }midia_excp \{\par
7 \par
8 {\cf17 class }codigo_repetido : {\cf17 public} std::exception \{\par
9 {\cf17 public}:\par
10     codigo_repetido({\cf18 int} codigo);\par
11 \par
12     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: c\'F3digo repetido"}; \}\par
13 \par
14     {\cf18 int} get_codigo() \{ {\cf19 return} _codigo; \};\par
15 \par
16 {\cf17 private}:\par
17     {\cf18 int} _codigo;\par
18 \};\par
19 \par
20 {\cf17 class }codigo_inexistente : {\cf17 public} std::exception \{\par
21 {\cf17 public}:\par
22     codigo_inexistente({\cf18 int} codigo);\par
23 \par
24     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: c\'F3digo inexistente"}; \}\par
25 \par
26     {\cf18 int} get_codigo() \{ {\cf19 return} _codigo; \};\par
27 \par
28 {\cf17 private}:\par
29     {\cf18 int} _codigo;\par
30 \};\par
31 \par
32 {\cf17 class }tipo_desconhecido : {\cf17 public} std::exception \{\par
33 {\cf17 public}:\par
34     tipo_desconhecido({\cf18 int} tipoMidia);\par
35 \par
36     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: tipo de m\'EDdia desconhecido"}; \}\par
37 \par
38     {\cf18 int} get_tipo() \{ {\cf19 return} _tipoMidia; \};\par
39 \par
40 {\cf17 private}:\par
41     {\cf18 int} _tipoMidia;\par
42 \};\par
43 \par
44 {\cf17 class }erro_de_abertura : {\cf17 public} std::exception \{\par
45 {\cf17 public}:\par
46     erro_de_abertura(std::string arquivo);\par
47 \par
48     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: arquivo inexistente"}; \}\par
49 \par
50     std::string get_arquivo() \{ {\cf19 return} _arquivo; \};\par
51 \par
52 {\cf17 private}:\par
53     std::string _arquivo;\par
54 \};\par
55 \par
56 {\cf17 class }ordem_invalida : {\cf17 public} std::exception \{\par
57 {\cf17 public}:\par
58     ordem_invalida({\cf18 char} ordem);\par
59 \par
60     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: as op\'E7\'F5es de ordena\'E7\'E3o s\'E3o C\'F3digo (C) ou T\'EDtulo (T)"}; \}\par
61 \par
62     {\cf18 char} get_ordem() \{ {\cf19 return} _ordem; \};\par
63 \par
64 {\cf17 private}:\par
65     {\cf18 char} _ordem;\par
66 \};\par
67 \par
68 {\cf17 class }categoria_invalida : {\cf17 public} std::exception \{\par
69 {\cf17 public}:\par
70     categoria_invalida(std::string categoria);\par
71 \par
72     {\cf17 const} {\cf18 char}* what() {\cf17 const} throw() \{ {\cf19 return} {\cf22 "ERRO: a categoria de cadastro \'E9 inv\'E1lida"}; \}\par
73 \par
74     std::string  get_categoria() \{ {\cf19 return} _categoria; \};\par
75 \par
76 {\cf17 private}:\par
77     std::string  _categoria;\par
78 \};\par
79 \par
80 \} \par
81 \par
82 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Dvd.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Dvd.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Dvd.hpp}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Midia.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Dvd}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Dvd.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Dvd.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Dvd.hpp}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef DVD_H}\par
2 {\cf21 #define DVD_H}\par
3 \par
4 {\cf21 #include "Midia.hpp"}\par
5 \par
6 {\cf17 class }Dvd : {\cf17 public} Midia\{\par
7 \par
8     {\cf17 public}:\par
9         Dvd({\cf18 int} codigo, std :: string titulo,{\cf18 int} unidadesDisponiveis, std:: string categoria); \par
10         {\cf18 void} imprimirInformacoes({\cf18 bool} unidades = {\cf17 true});\par
11 \par
12 \};\par
13 \par
14 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Fita.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Fita.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Fita.hpp}
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Midia.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Fita}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Fita.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Fita.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Fita.hpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef FITA_H}\par
2 {\cf21 #define FITA_H}\par
3 \par
4 {\cf21 #include "Midia.hpp"}\par
5 \par
6 {\cf17 class }Fita : {\cf17 public} Midia\{\par
7     {\cf18 bool} rebobinada;\par
8 \par
9     {\cf17 public}:\par
10         Fita({\cf18 int} codigo, std :: string titulo,{\cf18 int} unidadesDisponiveis,{\cf18 bool} rebobinada);\par
11         {\cf18 bool} getRebobinada();\par
12         {\cf18 void} imprimirInformacoes({\cf18 bool} unidades = {\cf17 true});\par
13 \};\par
14 \par
15 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Midia.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Midia.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Midia.hpp}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
{\f2 #include <unordered_set>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Midia}}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Midia.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Midia.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/include/ControleMidia/Midia.hpp}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef MIDIA_H}\par
2 {\cf21 #define MIDIA_H}\par
3 \par
4 {\cf21 #include <string>}\par
5 {\cf21 #include <unordered_set>}\par
6 \par
7 {\cf17 class }Midia\{\par
8     {\cf18 int} codigo;\par
9     std :: string titulo;\par
10     std::unordered_set<std::string> categoriasValidas;\par
11     std :: string categoria;\par
12     {\cf18 int} unidadesDisponiveis;\par
13 \par
14     {\cf17 public}:\par
15         Midia({\cf18 int} codigo, std :: string titulo, {\cf18 int} unidadesDisponiveis, std::string categoria);\par
16         {\cf17 virtual} ~Midia() = {\cf19 default};\par
17         {\cf18 int}  getCodigo();\par
18         std::string getCategoria();\par
19         std :: string getTitulo();\par
20         {\cf18 int} getUnidadesDisponiveis();\par
21         {\cf17 virtual} {\cf18 void} imprimirInformacoes({\cf18 bool} unidades = {\cf17 true}) = 0;\par
22         {\cf18 void} diminuirUnidadesDisponiveis();\par
23         {\cf18 void} aumentarUnidadesDisponiveis();\par
24 \};\par
25 \par
26 \par
27 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/README.md\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/README.md}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/README.md}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/Cliente.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/Cliente.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/Cliente.cpp}
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Cliente.hpp"}\par
{\f2 #include <algorithm>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientes.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientes.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientes.cpp}
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleClientes.hpp"}\par
{\f2 #include "ControleClientesExceptions.hpp"}\par
{\f2 #include "../Funcoes/FuncoesClientes.cpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <fstream>}\par
{\f2 #include <algorithm>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientesExceptions.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientesExceptions.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleClientes/ControleClientesExceptions.cpp}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleClientesExceptions.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b clientes_excp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleLocacao/ControleLocacao.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleLocacao/ControleLocacao.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleLocacao/ControleLocacao.cpp}
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleLocacao.hpp"}\par
{\f2 #include "ControleMidiaExceptions.hpp"}\par
{\f2 #include "ControleClientesExceptions.hpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <iomanip>}\par
{\f2 #include <sstream>}\par
{\f2 #include <ctime>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DIA_EM_SEGUNDOS}\~ 86400\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FORMATO_DATA}\~ "%d/%m/%Y"\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v DIA_EM_SEGUNDOS\:ControleLocacao.cpp}
{\xe \v ControleLocacao.cpp\:DIA_EM_SEGUNDOS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DIA_EM_SEGUNDOS\~ 86400}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FORMATO_DATA\:ControleLocacao.cpp}
{\xe \v ControleLocacao.cpp\:FORMATO_DATA}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FORMATO_DATA\~ "%d/%m/%Y"}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidia.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidia.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidia.cpp}
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleMidia.hpp"}\par
{\f2 #include "ControleMidiaExceptions.hpp"}\par
{\f2 #include "../Funcoes/FuncoesMidia.cpp"}\par
{\f2 #include <fstream>}\par
{\f2 #include <iostream>}\par
{\f2 #include <algorithm>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidiaExceptions.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidiaExceptions.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/ControleMidiaExceptions.cpp}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleMidiaExceptions.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b midia_excp}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Dvd.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Dvd.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Dvd.cpp}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Dvd.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Fita.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Fita.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Fita.cpp}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Fita.hpp"}\par
{\f2 #include <iostream>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Midia.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Midia.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/ControleMidia/Midia.cpp}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Midia.hpp"}\par
{\f2 #include "ControleMidiaExceptions.hpp"}\par
{\f2 #include "iostream"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesClientes.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesClientes.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesClientes.cpp}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../ControleClientes/Cliente.hpp"}\par
{\f2 #include <string>}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FuncoesClientes.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesClientes.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesClientes.cpp}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 //#include "FuncoesClientes.hpp"}\par
2 {\cf21 #include "../ControleClientes/Cliente.hpp"}\par
3 {\cf21 #include <string>}\par
4 \par
5 {\cf20 // Compara\'E7\'E3o de CPF}\par
6 {\cf17 static} {\cf18 bool} compCPF (Cliente* a, Cliente* b)\{\par
7     {\cf19 return} a->getCPF() < b->getCPF();\par
8 \}\par
9 \par
10 {\cf20 // Compara\'E7\'E3o de nome}\par
11 {\cf17 static} {\cf18 bool} compNome(Cliente* a, Cliente* b)\{\par
12     {\cf19 return} a->getNome() < b->getNome();\par
13 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMain.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMain.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMain.cpp}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <iostream>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b menu} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v menu\:FuncoesMain.cpp}
{\xe \v FuncoesMain.cpp\:menu}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void menu ()}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 5            \{\par
6     cout << endl;\par
7     cout << {\cf22 "----------------------------------------   MENU   ----------------------------------------"} << endl << endl;\par
8     cout << {\cf22 "LA + Nome_Arquivo                                 | L\'EA o arquivo de cadastro de m\'EDdia"} << endl;\par
9     cout << {\cf22 "CF + Tipo + Qntd + C\'F3digo + T\'EDtulo + Categoria    | Cadastra um filme"} << endl;\par
10     cout << {\cf22 "RF + C\'F3digo                                       | Remove um filme"} << endl;\par
11     cout << {\cf22 "LF + C || T                                       | Lista os filmes"} << endl;\par
12     cout << {\cf22 "CC + CPF + Nome                                   | Cadastra um cliente"} << endl;\par
13     cout << {\cf22 "RC + CPF                                          | Remove um cliente"} << endl;\par
14     cout << {\cf22 "LC + C || N                                       | Lista os clientes"} << endl;\par
15     cout << {\cf22 "LH + CPF                                          | Lista o hist\'F3rico do cliente"} << endl;\par
16     cout << {\cf22 "AF + CPF + C\'F3digoFilmes                           | Alugar Filme"} << endl;\par
17     cout << {\cf22 "DV + CPF                                          | Devolu\'E7\'E3o de filmes"} << endl;\par
18     cout << {\cf22 "FS                                                | Finalizar sistema"} << endl << endl; \par
19     cout <<  {\cf22 "------------------------------------------------------------------------------------------"} << endl;\par
20     cout << {\cf22 "Insira o comando desejada : "};\par
21 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FuncoesMain.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMain.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMain.cpp}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include <iostream>}\par
2 \par
3 {\cf17 using namespace }std;\par
4 \par
5 {\cf18 void} menu()\{\par
6     cout << endl;\par
7     cout << {\cf22 "----------------------------------------   MENU   ----------------------------------------"} << endl << endl;\par
8     cout << {\cf22 "LA + Nome_Arquivo                                 | L\'EA o arquivo de cadastro de m\'EDdia"} << endl;\par
9     cout << {\cf22 "CF + Tipo + Qntd + C\'F3digo + T\'EDtulo + Categoria    | Cadastra um filme"} << endl;\par
10     cout << {\cf22 "RF + C\'F3digo                                       | Remove um filme"} << endl;\par
11     cout << {\cf22 "LF + C || T                                       | Lista os filmes"} << endl;\par
12     cout << {\cf22 "CC + CPF + Nome                                   | Cadastra um cliente"} << endl;\par
13     cout << {\cf22 "RC + CPF                                          | Remove um cliente"} << endl;\par
14     cout << {\cf22 "LC + C || N                                       | Lista os clientes"} << endl;\par
15     cout << {\cf22 "LH + CPF                                          | Lista o hist\'F3rico do cliente"} << endl;\par
16     cout << {\cf22 "AF + CPF + C\'F3digoFilmes                           | Alugar Filme"} << endl;\par
17     cout << {\cf22 "DV + CPF                                          | Devolu\'E7\'E3o de filmes"} << endl;\par
18     cout << {\cf22 "FS                                                | Finalizar sistema"} << endl << endl; \par
19     cout <<  {\cf22 "------------------------------------------------------------------------------------------"} << endl;\par
20     cout << {\cf22 "Insira o comando desejada : "};\par
21 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMidia.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMidia.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMidia.cpp}
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Midia.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
FuncoesMidia.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMidia.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/Funcoes/FuncoesMidia.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #include "Midia.hpp"}\par
2 \par
3 {\cf17 static} {\cf18 bool} compCodigo (Midia* a, Midia* b)\{\par
4     {\cf19 return} a->getCodigo() < b->getCodigo();\par
5 \}\par
6 \par
7 {\cf20 // Compara\'E7\'E3o de nome}\par
8 {\cf17 static} {\cf18 bool} compTitulo(Midia* a, Midia* b)\{\par
9     {\cf19 return} a->getTitulo() < b->getTitulo();\par
10 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/main.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/main.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/src/main.cpp}
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "ControleMidia.hpp"}\par
{\f2 #include "ControleMidiaExceptions.hpp"}\par
{\f2 #include "Cliente.hpp"}\par
{\f2 #include "ControleClientes.hpp"}\par
{\f2 #include "ControleClientesExceptions.hpp"}\par
{\f2 #include "ControleLocacao.hpp"}\par
{\f2 #include "Dvd.hpp"}\par
{\f2 #include "Fita.hpp"}\par
{\f2 #include "Midia.hpp"}\par
{\f2 #include "Funcoes/FuncoesMain.cpp"}\par
{\f2 #include <iostream>}\par
{\f2 #include <sstream>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 17           \{\par
18     std::string nome_arquivo_cadastro;\par
19     std::string titulo;\par
20     std::string categoria;\par
21     std::string input;\par
22     std::string comando;\par
23     std::string nome;\par
24     std::string cpf;\par
25     {\cf18 int} tipo_midia;\par
26     {\cf18 int} quantidade;\par
27     {\cf18 int} codigo;\par
28     {\cf18 int} aux = 0;\par
29 \par
30     ControleMidia estoque;\par
31     ControleClientes clientes;\par
32     ControleLocacao locacao;\par
33 \par
34     {\cf19 while} ({\cf17 true}) \{\par
35         menu();\par
36         std::getline(std::cin, input);\par
37 \par
38         {\cf19 if} (input.empty()) \{\par
39             {\cf19 if} (aux == 0)\{\par
40             aux = 1;\par
41             {\cf19 continue};\par
42             \} {\cf19 else}\{\par
43                 {\cf19 break};\par
44             \}\par
45         \}\par
46 \par
47         std::istringstream stream(input);\par
48         stream >> comando;\par
49         std::system({\cf22 "clear"});\par
50         std::cout << {\cf22 "Comando inserido : "} << input << std::endl << std::endl;\par
51 \par
52         {\cf19 try} \{\par
53         {\cf19 if} (comando == {\cf22 "LA"})\{ {\cf20 // Ler Arquivo de Cadastro}\par
54             stream >> nome_arquivo_cadastro;\par
55             \par
56             estoque.lerArquivoCadastro(nome_arquivo_cadastro);\par
57 \par
58         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "CF"})\{ {\cf20 // Cadastrar Filme}\par
59             stream >> tipo_midia >> quantidade >> codigo >> titulo >> categoria;\par
60 \par
61             estoque.cadastrarMidia(tipo_midia, codigo, titulo, quantidade, categoria);\par
62 \par
63         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "RF"})\{ {\cf20 // Remover Filme}\par
64             stream >> codigo;\par
65 \par
66             estoque.removerMidia(codigo);\par
67 \par
68         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "LF"})\{ {\cf20 // Listar Filmes ordenados por C\'F3digo ou T\'EDtulo}\par
69             {\cf18 char} ordem = {\cf23 'a'}; {\cf20 // Inicializa\'E7\'E3o com op\'E7\'E3o inv\'E1lida}\par
70             stream >> ordem;\par
71 \par
72             estoque.imprimirMidias(ordem);\par
73 \par
74         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "CC"})\{ {\cf20 // Cadastrar Cliente}\par
75             stream >> cpf >> nome;\par
76 \par
77             clientes.fazerCadastro(nome, cpf, {\cf17 true});\par
78 \par
79         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "RC"})\{ {\cf20 // Remover Cliente}\par
80             stream >> cpf;\par
81 \par
82             std::cout << cpf << std::endl;\par
83 \par
84             clientes.removerCadastro(cpf);\par
85 \par
86         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "LC"})\{ {\cf20 // Listar clientes ordenados por C\'F3digo ou Nome}\par
87             {\cf18 char} ordem = {\cf23 'a'}; {\cf20 // Inicializa\'E7\'E3o com op\'E7\'E3o inv\'E1lida}\par
88             stream >> ordem;\par
89 \par
90             clientes.gerarRelatorio(ordem);\par
91 \par
92         \}  {\cf19 else} {\cf19 if} (comando == {\cf22 "LH"})\{ {\cf20 // Listar historico de loca\'E7\'F5es de cliente}\par
93             stream >> cpf;\par
94             clientes.printHistorico(cpf);\par
95 \par
96         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "AF"})\{ {\cf20 // Aluguel Filme}\par
97             stream >> cpf;\par
98 \par
99             std::vector<int> midias_para_alugar;\par
100 \par
101             {\cf19 while} (stream >> codigo) \{\par
102                 midias_para_alugar.push_back(codigo);\par
103             \}\par
104             {\cf19 if} (midias_para_alugar.empty()) \{\par
105                 std::cout << {\cf22 "Insira ao menos um filme."} << std::endl;\par
106             \} {\cf19 else} \{\par
107                 locacao.fazerLocacao(clientes, estoque, cpf, midias_para_alugar);\par
108             \}\par
109 \par
110         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "DV"})\{ {\cf20 // Devolu\'E7\'E3o Filme}\par
111             stream >> cpf;\par
112             \par
113             locacao.fazerDevolucao(clientes, estoque, cpf);\par
114 \par
115 \par
116         \} {\cf19 else} {\cf19 if} (comando == {\cf22 "FS"})\{ {\cf20 // Finalizar Sistema}\par
117             {\cf19 break};\par
118 \par
119         \} {\cf19 else} \{\par
120             std::cout << {\cf22 "Comando inv\'E1lido"} << std::endl;\par
121         \}\par
122         \} {\cf19 catch} (midia_excp::ordem_invalida &e)\{\par
123             std::cerr << e.what() << std::endl;\par
124         \} {\cf19 catch} (midia_excp::codigo_repetido &e) \{\par
125             std::cerr << e.what() << std::endl;\par
126         \} {\cf19 catch} (midia_excp::codigo_inexistente &e) \{\par
127             std::cerr << e.what() << std::endl;\par
128         \} {\cf19 catch} (midia_excp::tipo_desconhecido &e) \{\par
129             std::cerr << e.what() << {\cf22 ": "} << e.get_tipo() << std::endl;\par
130         \} {\cf19 catch} (midia_excp::erro_de_abertura &e) \{\par
131             std::cerr << e.what() << {\cf22 ": "} << e.get_arquivo() << std::endl;\par
132         \} {\cf19 catch} (clientes_excp::ordem_invalida &e)\{\par
133             std::cerr << e.what() << std::endl;\par
134         \} {\cf19 catch} (clientes_excp::cpf_curto &e) \{\par
135             std::cerr << e.what() << std::endl;\par
136         \} {\cf19 catch} (clientes_excp::cpf_repetido &e) \{\par
137             std::cerr << e.what() << std::endl;\par
138         \} {\cf19 catch} (clientes_excp::cpf_inexistente &e) \{\par
139             std::cerr << e.what() << std::endl;\par
140         \} {\cf19 catch} ({\cf17 const} std::exception& e) \{\par
141             std::cerr << e.what() << std::endl;\par
142         \}\par
143     \}\par
144 \par
145     {\cf19 return} 0;\par
146 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleClientes/test_controleclientes.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleClientes/test_controleclientes.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleClientes/test_controleclientes.cpp}
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../doctest.hpp"}\par
{\f2 #include "../include/ControleClientes/ControleClientes.hpp"}\par
{\f2 #include "../include/ControleClientes/ControleClientesExceptions.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b capture_stdout} ({\b ControleClientes} &clientes, char ordem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Cliente} correto")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Cliente} cpf repetido")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Cliente} cpf curto")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste remo\'E7\'E3o cliente")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Gerar Relat\'F3rio")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_SUPER_FAST_ASSERTS\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:DOCTEST_CONFIG_SUPER_FAST_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_SUPER_FAST_ASSERTS}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v capture_stdout\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:capture_stdout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string capture_stdout ({\b ControleClientes} &  {\i clientes}, char  {\i ordem})}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 7                                                                  \{\par
8     std::ostringstream oss;\par
9     std::streambuf* coutbuf = std::cout.rdbuf();\par
10     std::cout.rdbuf(oss.rdbuf());\par
11 \par
12     clientes.gerarRelatorio(ordem);  \par
13 \par
14     std::cout.rdbuf(coutbuf);  \par
15     {\cf19 return} oss.str();\par
16 \}\par
}
}
{\xe \v TEST_CASE\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Gerar Relat\'F3rio" )}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 52                              \{\par
53     ControleClientes cliente;\par
54     cliente.fazerCadastro({\cf22 "Marcos"},{\cf22 "01234567890"});\par
55     cliente.fazerCadastro({\cf22 "Julio"},{\cf22 "11234567890"});\par
56     cliente.fazerCadastro({\cf22 "Castro"},{\cf22 "21234567890"});\par
57     cliente.fazerCadastro({\cf22 "Lindsay"},{\cf22 "31234567890"});\par
58 \par
59     SUBCASE({\cf22 "Teste ordem por cpf"})\{\par
60         std::string expected_output = {\cf22 "01234567890 Marcos\\n11234567890 Julio\\n21234567890 Castro\\n31234567890 Lindsay\\n"};\par
61         std::string actual_output = capture_stdout(cliente, {\cf23 'C'});\par
62         CHECK(actual_output == expected_output);\par
63         CHECK(cliente.gerarRelatorio({\cf23 'C'})=={\cf17 true});\par
64     \}\par
65     \par
66      SUBCASE({\cf22 "Teste ordem por nome"})\{\par
67         std::string expected_output = {\cf22 "21234567890 Castro\\n11234567890 Julio\\n31234567890 Lindsay\\n01234567890 Marcos\\n"};\par
68         std::string actual_output = capture_stdout(cliente, {\cf23 'N'});\par
69         CHECK(actual_output == expected_output);\par
70         CHECK(cliente.gerarRelatorio({\cf23 'N'})=={\cf17 true});\par
71     \}\par
72     \par
73     SUBCASE({\cf22 "Teste ordem inv\'E1lida"})\{\par
74         CHECK_THROWS_AS(cliente.gerarRelatorio({\cf23 'R'}), clientes_excp::ordem_invalida);\par
75     \}\par
76 \par
77 \}\par
}
}
{\xe \v TEST_CASE\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Cliente} correto" )}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 18                                            \{\par
19     ControleClientes cliente;\par
20     CHECK(cliente.fazerCadastro({\cf22 "J\'FAlio"},{\cf22 "01234567890"})=={\cf17 true}) ;\par
21 \}\par
}
}
{\xe \v TEST_CASE\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Cliente} cpf curto" )}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 30                                              \{\par
31     ControleClientes cliente;\par
32     CHECK_THROWS_AS(cliente.fazerCadastro({\cf22 "J\'FAlio"},{\cf22 "01234"}),clientes_excp::cpf_curto);\par
33 \}\par
}
}
{\xe \v TEST_CASE\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Cliente} cpf repetido" )}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 23                                                 \{\par
24     ControleClientes cliente;\par
25     cliente.fazerCadastro({\cf22 "Marcos"},{\cf22 "01234567890"});\par
26     CHECK_THROWS_AS(cliente.fazerCadastro({\cf22 "J\'FAlio"},{\cf22 "01234567890"}),clientes_excp::cpf_repetido);\par
27 \par
28 \}\par
}
}
{\xe \v TEST_CASE\:test_controleclientes.cpp}
{\xe \v test_controleclientes.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste remo\'E7\'E3o cliente" )}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 35                                     \{\par
36     \par
37     ControleClientes cliente;\par
38     cliente.fazerCadastro({\cf22 "Marcos"},{\cf22 "01234567890"});\par
39     cliente.fazerCadastro({\cf22 "Julio"},{\cf22 "11234567890"});\par
40     cliente.fazerCadastro({\cf22 "Castro"},{\cf22 "21234567890"});\par
41     cliente.fazerCadastro({\cf22 "Lindsay"},{\cf22 "31234567890"});\par
42 \par
43     SUBCASE({\cf22 "Remover cliente v\'E1lido"})\{\par
44         CHECK(cliente.removerCadastro({\cf22 "11234567890"})=={\cf17 true});\par
45     \}\par
46 \par
47     SUBCASE({\cf22 "Remo\'E7ao de cliente inv\'E1lido"})\{\par
48         CHECK_THROWS_AS(cliente.removerCadastro({\cf22 "91234567899"}),clientes_excp::cpf_inexistente);\par
49     \}\par
50 \}  \par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleLocacao/test_controlelocacao.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleLocacao/test_controlelocacao.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleLocacao/test_controlelocacao.cpp}
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "../doctest.hpp"}\par
{\f2 #include "../../include/ControleLocacao/ControleLocacao.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste C\'E1lculo Aluguel")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste fazer Locacao e devolucao")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT\:test_controlelocacao.cpp}
{\xe \v test_controlelocacao.cpp\:DOCTEST_CONFIG_IMPLEMENT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_SUPER_FAST_ASSERTS\:test_controlelocacao.cpp}
{\xe \v test_controlelocacao.cpp\:DOCTEST_CONFIG_SUPER_FAST_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_SUPER_FAST_ASSERTS}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v TEST_CASE\:test_controlelocacao.cpp}
{\xe \v test_controlelocacao.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste C\'E1lculo Aluguel" )}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 11                                    \{\par
12     ControleLocacao Locacao;\par
13     Dvd* novodvd={\cf17 new} Dvd(1,{\cf22 "Rocky"},12,{\cf22 "Estoque"});\par
14     Fita* novafita={\cf17 new} Fita(2,{\cf22 "Django"},3,TRUE);\par
15     CHECK(Locacao.calculaAluguel(novodvd,20)==200);\par
16     CHECK(Locacao.calculaAluguel(novafita,20)==5);\par
17 \par
18 \}\par
}
}
{\xe \v TEST_CASE\:test_controlelocacao.cpp}
{\xe \v test_controlelocacao.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste fazer Locacao e devolucao" )}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 20                                             \{\par
21     ControleMidia estoque;\par
22     ControleClientes clientes;\par
23     ControleLocacao locacao;\par
24     estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},10, {\cf22 "Promocao"});\par
25     estoque.cadastrarMidia(2, 2,{\cf22 "Gladiator"},32, {\cf22 ""});\par
26     estoque.cadastrarMidia(2, 3,{\cf22 "Django"},10, {\cf22 ""});\par
27     estoque.cadastrarMidia(1, 4,{\cf22 "Jaws"},6, {\cf22 "Promocao"});\par
28     cliente.fazerCadastro({\cf22 "Marcos"},{\cf22 "01234567890"});\par
29     cliente.fazerCadastro({\cf22 "Julio"},{\cf22 "11234567890"});\par
30     cliente.fazerCadastro({\cf22 "Castro"},{\cf22 "21234567890"});\par
31     cliente.fazerCadastro({\cf22 "Lindsay"},{\cf22 "31234567890"});\par
32      std::vector<int> filmesAlugados = \{1, 2, 3\};\par
33     CHECK(locacao.fazerLocacao(clientes, estoque, {\cf22 "01234567890"},filmesAlugados)=={\cf17 true});\par
34     CHECK(controleLocacao.fazerDevolucao(clientes, estoque, {\cf22 "01234567890"}) == {\cf17 true});\par
35 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/doctest.h\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/doctest.h}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/doctest.h}
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <signal.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::String}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Contains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::AssertData::StringContains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< COND, T >}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< true, T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::true_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::false_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_enum< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::underlying_type< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T[SIZE]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::deferred_false< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const char[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const void * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IsNaN< F >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Expression_lhs< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestSuite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::RelationalComparator< int, L, R >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ExceptionTranslator< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ContextScopeBase}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ContextScope< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::CurrentTestCaseStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestRunStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IReporter}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b std}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::types}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest_detail_test_suite_ns}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MAJOR}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MINOR}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_PATCH}\~ 9\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR_IMPL}(x)\~ #x\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR}(x)\~ {\b DOCTEST_TOSTR_IMPL}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_STR}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION}\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CPLUSPLUS}\~ __cplusplus\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPILER}(MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_EXCEPTIONS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_EXPORT}\~ __attribute__((visibility("default")))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_IMPORT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DECL}\~ {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DEF}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EMPTY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOINLINE}\~ __attribute__((noinline))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNUSED}\~ __attribute__((unused))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ALIGNMENT}(x)\~ __attribute__((aligned(x)))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NORETURN}\~ [[noreturn]]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOEXCEPT}\~ noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR_FUNC}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DECLARE_INTERFACE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_INTERFACE}(name)\~     name::~name() = default;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT_IMPL}(s1,  s2)\~ s1##s2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT}(s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ANONYMOUS}(x)\~ {\b DOCTEST_CAT}(x, __LINE__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REF_WRAP}(x)\~ x&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_PLATFORM_LINUX}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GLOBAL_NO_WARNINGS}(var, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BREAK_INTO_DEBUGGER}()\~ raise(SIGTRAP)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\~ unsigned\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_STRINGIFY}(...)\~ toString(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SFINAE_OP}(ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}(op,  op_str,  op_macro)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FORBIT_EXPRESSION}(rt,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPARISON_RETURN_TYPE}\~ bool\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_RELATIONAL_OP}(name,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_EQ}(l,  r)\~ l == r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_NE}(l,  r)\~ l != r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GT}(l,  r)\~ l > r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LT}(l,  r)\~ l < r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GE}(l,  r)\~ l >= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LE}(l,  r)\~ l <= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_RELATIONAL_OP}(n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_OUT_OF_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IN_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_DECORATOR}(name,  type,  def)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_EMPTY}\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_BEGIN}\~ do\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_END}\~ while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_RET}(v)\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_LOG_REACT_RETURN}(b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WRAP_IN_TRY}(x)\~ x;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAST_TO_VOID}(...)\~ __VA_ARGS__;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_FUNCTION}(global_prefix,  f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_IMPLEMENT_FIXTURE}(der,  base,  func,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}(f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}(f,  proxy,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE}(decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_CLASS}(...)\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_FIXTURE}(c,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING_AS}(str, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}(dec,  T,  iter,  func)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(dec,  T,  id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}(id,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec,  T,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE}(dec,  T, ...)\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_IMPL}(decorators,  ns_name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE}(decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_BEGIN}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}(translatorName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_REPORTER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_LISTENER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO_IMPL}(mb_name,  s_name, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAPTURE}(x)\~ {\b DOCTEST_INFO}(#x " := ", x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_AT_IMPL}(type,  file,  line,  mb, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MESSAGE}(...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL_CHECK}(...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL}(...)\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TO_LVALUE}(...)\~ __VA_ARGS__\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_2}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_1}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_ASSERT}(assert_type,  comp, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNARY_ASSERT}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_EQ}\~ {\b DOCTEST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_EQ}\~ {\b DOCTEST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_EQ}\~ {\b DOCTEST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_NE}\~ {\b DOCTEST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_NE}\~ {\b DOCTEST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_NE}\~ {\b DOCTEST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GT}\~ {\b DOCTEST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GT}\~ {\b DOCTEST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GT}\~ {\b DOCTEST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LT}\~ {\b DOCTEST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LT}\~ {\b DOCTEST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LT}\~ {\b DOCTEST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GE}\~ {\b DOCTEST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GE}\~ {\b DOCTEST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GE}\~ {\b DOCTEST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LE}\~ {\b DOCTEST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LE}\~ {\b DOCTEST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LE}\~ {\b DOCTEST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY}\~ {\b DOCTEST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY}\~ {\b DOCTEST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY}\~ {\b DOCTEST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY_FALSE}\~ {\b DOCTEST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY_FALSE}\~ {\b DOCTEST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO}(name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GIVEN}(name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("    When: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("And when: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_THEN}(name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_THEN}(name)\~ {\b DOCTEST_SUBCASE}("     And: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE}(name)\~ {\b DOCTEST_TEST_CASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_FIXTURE}(x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING_AS}(str, ...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INVOKE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_APPLY}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SUBCASE}(name)\~ {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE}(decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_BEGIN}(name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_END}\~ {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_EXCEPTION_TRANSLATOR}(signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_REPORTER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_LISTENER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INFO}(...)\~ {\b DOCTEST_INFO}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CAPTURE}(x)\~ {\b DOCTEST_CAPTURE}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MESSAGE}(...)\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL_CHECK}(...)\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL}(...)\~ {\b DOCTEST_FAIL}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TO_LVALUE}(...)\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN}(...)\~ {\b DOCTEST_WARN}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE}(...)\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS}(...)\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW}(...)\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK}(...)\~ {\b DOCTEST_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE}(...)\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS}(...)\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW}(...)\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE}(...)\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE}(...)\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS}(...)\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO}(name)\~ {\b DOCTEST_SCENARIO}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_CLASS}(name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GIVEN}(name)\~ {\b DOCTEST_GIVEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WHEN}(name)\~ {\b DOCTEST_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_WHEN}(name)\~ {\b DOCTEST_AND_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b THEN}(name)\~ {\b DOCTEST_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_THEN}(name)\~ {\b DOCTEST_AND_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_EQ}(...)\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_EQ}(...)\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_EQ}(...)\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NE}(...)\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NE}(...)\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NE}(...)\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GT}(...)\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GT}(...)\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GT}(...)\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LT}(...)\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LT}(...)\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LT}(...)\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GE}(...)\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GE}(...)\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GE}(...)\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LE}(...)\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LE}(...)\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LE}(...)\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY}(...)\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY}(...)\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY}(...)\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_EQ}(...)\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_EQ}(...)\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_EQ}(...)\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_NE}(...)\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_NE}(...)\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_NE}(...)\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GT}(...)\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GT}(...)\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GT}(...)\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LT}(...)\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LT}(...)\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LT}(...)\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GE}(...)\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GE}(...)\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GE}(...)\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LE}(...)\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LE}(...)\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LE}(...)\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY}(...)\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SINGLE_HEADER}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es de Tipos\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(nullptr) {\b std::nullptr_t}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef decltype(sizeof(void *) {\b std::size_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_ostream}< char, {\b char_traits}< char > > {\b std::ostream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b basic_istream}< char, {\b char_traits}< char > > {\b std::istream}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::funcType} = void(*)()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::assert_handler} = void(*)(const {\b AssertData} &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
using {\b doctest::detail::reporterCreatorFunc} = {\b IReporter} *(*)(const {\b ContextOptions} &)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::Color::Enum} \{ {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
, {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::assertType::Enum} \{ {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
, {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::binaryAssertComparison::Enum} \{ {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
, {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::assertAction::Enum} \{ {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
, {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::TestCaseFailureReason::Enum} \{ {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
, {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class traits > {\b basic_ostream}< char, traits > & {\b std::operator<<} ({\b basic_ostream}< char, traits > &, const char *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::operator+} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Contains} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b doctest::Color::operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T && {\b doctest::detail::declval} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &&t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b doctest::detail::tlssPush} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::detail::tlssPop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , size_t N> void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::detail::toStream} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::toString} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::types::is_enum}< T >::value, bool >::type  = true> {\b String} {\b doctest::toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b String} in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b std::nullptr_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b doctest::getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< float > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double long > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b doctest::detail::stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::detail::instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b Result} &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b doctest::detail::MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_breaks, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_output, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b doctest_detail_test_suite_ns::getCurrentTestSuite} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b doctest::detail::reporterCreator} (const {\b ContextOptions} &o)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b doctest::registerReporter} (const char *name, int priority, bool isReporter)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Vari\'E1veis\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::is_running_in_test}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b DOCTEST_INTERFACE} {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< float >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< double >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template struct {\b DOCTEST_INTERFACE_DECL} {\b doctest::IsNaN< long double >}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_THEN\:doctest.h}
{\xe \v doctest.h\:AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_THEN( name)\~ {\b DOCTEST_AND_THEN}(name)}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_WHEN\:doctest.h}
{\xe \v doctest.h\:AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_WHEN( name)\~ {\b DOCTEST_AND_WHEN}(name)}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CAPTURE\:doctest.h}
{\xe \v doctest.h\:CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CAPTURE( x)\~ {\b DOCTEST_CAPTURE}(x)}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK\:doctest.h}
{\xe \v doctest.h\:CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK(  {\i ...})\~ {\b DOCTEST_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_EQ(  {\i ...})\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GE\:doctest.h}
{\xe \v doctest.h\:CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GE(  {\i ...})\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GT\:doctest.h}
{\xe \v doctest.h\:CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GT(  {\i ...})\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LE\:doctest.h}
{\xe \v doctest.h\:CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LE(  {\i ...})\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LT\:doctest.h}
{\xe \v doctest.h\:CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LT(  {\i ...})\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NE\:doctest.h}
{\xe \v doctest.h\:CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NE(  {\i ...})\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_AT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_AT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_AT_IMPL( type,  file,  line,  mb,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
        mb * __VA_ARGS__;                                                                          \\\par
        if(mb.log())                                                                               \\\par
            DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\\par
        mb.react();                                                                                \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2319                              \{                                                                     \\\par
2320         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
2321         mb * __VA_ARGS__;                                                                          \\\par
2322         if(mb.log())                                                                               \\\par
2323             DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\\par
2324         mb.react();                                                                                \\\par
2325     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ADD_FAIL_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_FAIL_CHECK_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_MESSAGE_AT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ALIGNMENT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ALIGNMENT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ALIGNMENT( x)\~ __attribute__((aligned(x)))}}
\par
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_THEN( name)\~ {\b DOCTEST_SUBCASE}("     And: " name)}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_WHEN( name)\~ {\b DOCTEST_SUBCASE}("And when: " name)}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ANONYMOUS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ANONYMOUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ANONYMOUS( x)\~ {\b DOCTEST_CAT}(x, __LINE__)}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_1\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_1( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_2\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IMPLEMENT_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_2( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Woverloaded-shift-op-parentheses"})                  \\\par
    {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}                                  \\\par
    doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\\par
                                               __LINE__, #__VA_ARGS__);                            \\\par
    DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\\par
            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
            << __VA_ARGS__)) {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}         \\\par
    DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_ASSERT_IN_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_IN_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IN_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     ResultBuilder rb(at, file, line, expr);                                                        \\\par
    rb.m_failed = failed;                                                                          \\\par
    if(rb.m_failed || getContextOptions()->success)                                                \\\par
        rb.m_decomp = decomp;                                                                      \\\par
    if(rb.log())                                                                                   \\\par
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\\par
    if(rb.m_failed && checkIfShouldThrow(at))                                                      \\\par
    throwException()\par
}
}
{\xe \v DOCTEST_ASSERT_LOG_REACT_RETURN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_LOG_REACT_RETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_LOG_REACT_RETURN( b)}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\\par
    b.react();                                                                                     \\\par
    DOCTEST_FUNC_SCOPE_RET(!b.m_failed)\par
}
}
{\xe \v DOCTEST_ASSERT_OUT_OF_TESTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_ASSERT_OUT_OF_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_OUT_OF_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!is_running_in_test) \{                                                                  \\\par
            if(failed) \{                                                                           \\\par
                ResultBuilder rb(at, file, line, expr);                                            \\\par
                rb.m_failed = failed;                                                              \\\par
                rb.m_decomp = decomp;                                                              \\\par
                failed_out_of_a_testing_context(rb);                                               \\\par
                if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
                if(checkIfShouldThrow(at))                                                         \\\par
                    throwException();                                                              \\\par
            \}                                                                                      \\\par
            {\cf19 return} !failed;                                                                        \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1695        \{                                                                                           \\\par
1696         if(!is_running_in_test) \{                                                                  \\\par
1697             if(failed) \{                                                                           \\\par
1698                 ResultBuilder rb(at, file, line, expr);                                            \\\par
1699                 rb.m_failed = failed;                                                              \\\par
1700                 rb.m_decomp = decomp;                                                              \\\par
1701                 failed_out_of_a_testing_context(rb);                                               \\\par
1702                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
1703                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
1704                 if(checkIfShouldThrow(at))                                                         \\\par
1705                     throwException();                                                              \\\par
1706             \}                                                                                      \\\par
1707             {\cf19 return} !failed;                                                                        \\\par
1708         \}                                                                                          \\\par
1709     \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_BINARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_ASSERT( assert_type,  comp,   {\i ...})}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(                                                                       \\\par
                DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\\par
                        __VA_ARGS__))                                                              \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2358                              \{                                                                     \\\par
2359         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
2360                                                    __LINE__, #__VA_ARGS__);                        \\\par
2361         DOCTEST_WRAP_IN_TRY(                                                                       \\\par
2362                 DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\\par
2363                         __VA_ARGS__))                                                              \\\par
2364         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
2365     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_BINARY_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BINARY_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_RELATIONAL_OP( n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1629                                                                      \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} DOCTEST_REF_WRAP(R) rhs){\cf17  const }\{ {\cf19 return} op(lhs, rhs); \} \};\par
}
}
{\xe \v DOCTEST_BREAK_INTO_DEBUGGER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_BREAK_INTO_DEBUGGER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BREAK_INTO_DEBUGGER()\~ raise(SIGTRAP)}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAPTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAPTURE( x)\~ {\b DOCTEST_INFO}(#x " := ", x)}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAST_TO_VOID\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAST_TO_VOID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAST_TO_VOID(  {\i ...})\~ __VA_ARGS__;}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT( s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CAT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT_IMPL( s1,  s2)\~ s1##s2}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG\~ 0}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_EQ( l,  r)\~ l == r}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GE( l,  r)\~ l >= r}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GT( l,  r)\~ l > r}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LE( l,  r)\~ l <= r}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LT( l,  r)\~ l < r}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CMP_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_NE( l,  r)\~ l != r}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPARISON_RETURN_TYPE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPARISON_RETURN_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPARISON_RETURN_TYPE\~ bool}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPILER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_COMPILER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPILER( MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_EXCEPTIONS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_EXCEPTIONS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_EXCEPTIONS}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_POSIX_SIGNALS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_STRING_SIZE_TYPE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONFIG_STRING_SIZE_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_STRING_SIZE_TYPE\~ unsigned}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONSTEXPR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR\~ constexpr}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR_FUNC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CONSTEXPR_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR_FUNC\~ constexpr}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CPLUSPLUS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CPLUSPLUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CPLUSPLUS\~ __cplusplus}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION( f,  decorators)}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} {\cf18 void} f();                                                                               \\\par
    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\\par
    {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS( f,  proxy,  decorators)}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} doctest::detail::funcType proxy() \{ {\cf19 return} f; \}                                         \\\par
    DOCTEST_REGISTER_FUNCTION({\cf17 inline}, proxy(), decorators)                                         \\\par
    {\cf17 static} {\cf18 void} f()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2146                                          \{ {\cf19 return} f; \}                                         \\\par
2147     DOCTEST_REGISTER_FUNCTION({\cf17 inline}, proxy(), decorators)                                         \\\par
2148     {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_DECLARE_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DECLARE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DECLARE_INTERFACE( name)}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 virtual} ~name();                                                                               \\\par
    name() = {\cf19 default};                                                                              \\\par
    name({\cf17 const} name&) = {\cf17 delete};                                                                    \\\par
    name(name&&) = {\cf17 delete};                                                                         \\\par
    name& operator=({\cf17 const} name&) = {\cf17 delete};                                                         \\\par
    name& operator=(name&&) = {\cf17 delete};\par
}
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_DECORATOR( name,  type,  def)}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 struct }name                                                                                    \\\par
    \{                                                                                              \\\par
        type data;                                                                                 \\\par
        name(type in = def)                                                                        \\\par
                : data(in) \{\}                                                                      \\\par
        {\cf18 void} fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
        {\cf18 void} fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1874     \{                                                                                              \\\par
1875         type data;                                                                                 \\\par
1876         name(type in = def)                                                                        \\\par
1877                 : data(in) \{\}                                                                      \\\par
1878         {\cf18 void} fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
1879         {\cf18 void} fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
1880     \}\par
}
}
{\xe \v DOCTEST_DEFINE_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DEFINE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_INTERFACE( name)\~     name::~name() = default;}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DO_BINARY_EXPRESSION_COMPARISON\:doctest.h}
{\xe \v doctest.h\:DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON( op,  op_str,  op_macro)}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    DOCTEST_NOINLINE SFINAE_OP(Result,op) {\cf17 operator} op(R&& rhs) \{                                   \\\par
    {\cf18 bool} res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\\par
        if(m_at & assertType::is_false)                                                            \\\par
            res = !res;                                                                            \\\par
        if(!res || doctest::getContextOptions()->success)                                          \\\par
            {\cf19 return} Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
        {\cf19 return} Result(res);                                                                        \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1333                                                                \{                                   \\\par
1334     {\cf18 bool} res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\\par
1335         if(m_at & assertType::is_false)                                                            \\\par
1336             res = !res;                                                                            \\\par
1337         if(!res || doctest::getContextOptions()->success)                                          \\\par
1338             {\cf19 return} Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
1339         {\cf19 return} Result(res);                                                                        \\\par
1340     \}\par
}
}
{\xe \v DOCTEST_EMPTY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EMPTY}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_EXCEPTION_EMPTY_FUNC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_EXCEPTION_EMPTY_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EXCEPTION_EMPTY_FUNC}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     [] \{ {\cf17 static_assert}({\cf17 false}, {\cf22 "Exceptions are disabled! "} \\\par
    {\cf22 "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."}); {\cf19 return} {\cf17 false}; \}()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2781                                         \{ {\cf17 static_assert}({\cf17 false}, {\cf22 "Exceptions are disabled! "} \\\par
2782     {\cf22 "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."}); {\cf19 return} {\cf17 false}; \}()\par
}
}
{\xe \v DOCTEST_FAIL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_EQ\~ {\b DOCTEST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GE\~ {\b DOCTEST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GT\~ {\b DOCTEST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LE\~ {\b DOCTEST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LT\~ {\b DOCTEST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_NE\~ {\b DOCTEST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY\~ {\b DOCTEST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY_FALSE\~ {\b DOCTEST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_EQ\~ {\b DOCTEST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GE\~ {\b DOCTEST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GT\~ {\b DOCTEST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LE\~ {\b DOCTEST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LT\~ {\b DOCTEST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_NE\~ {\b DOCTEST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY\~ {\b DOCTEST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_EQ\~ {\b DOCTEST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GE\~ {\b DOCTEST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GT\~ {\b DOCTEST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LE\~ {\b DOCTEST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LT\~ {\b DOCTEST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_NE\~ {\b DOCTEST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY\~ {\b DOCTEST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY_FALSE\~ {\b DOCTEST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FORBIT_EXPRESSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FORBIT_EXPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FORBIT_EXPRESSION( rt,  op)}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    rt& {\cf17 operator} op({\cf17 const} R&) \{                                                                    \\\par
        static_assert(deferred_false<R>::value,                                                    \\\par
                      {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
        {\cf19 return} *{\cf17 this};                                                                              \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1347                               \{                                                                    \\\par
1348         static_assert(deferred_false<R>::value,                                                    \\\par
1349                       {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
1350         {\cf19 return} *{\cf17 this};                                                                              \\\par
1351     \}\par
}
}
{\xe \v DOCTEST_FUNC_EMPTY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_EMPTY\~ (void)0}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_BEGIN\~ do}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_END\~ while(false)}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_RET\:doctest.h}
{\xe \v doctest.h\:DOCTEST_FUNC_SCOPE_RET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_RET( v)\~ (void)0}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC\~ 0}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GIVEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GIVEN( name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GLOBAL_NO_WARNINGS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_GLOBAL_NO_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GLOBAL_NO_WARNINGS( var,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wglobal-constructors"})                                \\\par
    {\cf17 static} {\cf17 const} {\cf18 int} var = doctest::detail::consume(&var, __VA_ARGS__);                              \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_IMPLEMENT_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_IMPLEMENT_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_IMPLEMENT_FIXTURE( der,  base,  func,  decorators)}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 struct }der : {\cf17 public} base                                                                   \\\par
        \{                                                                                          \\\par
            {\cf18 void} f();                                                                              \\\par
        \};                                                                                         \\\par
        {\cf17 static} {\cf17 inline} DOCTEST_NOINLINE {\cf18 void} func() \{                                               \\\par
            der v;                                                                                 \\\par
            v.f();                                                                                 \\\par
        \}                                                                                          \\\par
        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\\par
    \}                                                                                              \\\par
    {\cf17 inline} DOCTEST_NOINLINE {\cf18 void} der::f()\par
}
}
{\xe \v DOCTEST_INFO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO(  {\i ...})}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\\par
                      DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\\par
                      __VA_ARGS__)\par
}
}
{\xe \v DOCTEST_INFO_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INFO_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO_IMPL( mb_name,  s_name,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 auto} DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\\par
        [&](std::ostream* s_name) \{                                                                \\\par
        doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
        mb_name.m_stream = s_name;                                                                 \\\par
        mb_name * __VA_ARGS__;                                                                     \\\par
    \})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2310                                 \{                                                                \\\par
2311         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
2312         mb_name.m_stream = s_name;                                                                 \\\par
2313         mb_name * __VA_ARGS__;                                                                     \\\par
2314     \})\par
}
}
{\xe \v DOCTEST_INTERFACE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DECL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE_DECL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DECL\~ {\b DOCTEST_INTERFACE}}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DEF\:doctest.h}
{\xe \v doctest.h\:DOCTEST_INTERFACE_DEF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DEF}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4548) {\cf20 /* before comma no effect; expected side - effect */}       \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4265) {\cf20 /* virtual functions, but destructor is not virtual */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4986) {\cf20 /* exception specification does not match previous */}      \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4350) {\cf20 /* 'member1' called instead of 'member2' */}                \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4668) {\cf20 /* not defined as a preprocessor macro */}                  \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 /* signed/unsigned mismatch */}                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 /* format string not a string literal */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4820) {\cf20 /* padding */}                                              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4625) {\cf20 /* copy constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4626) {\cf20 /* assignment operator was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5027) {\cf20 /* move assignment operator implicitly deleted */}          \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5026) {\cf20 /* move constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 /* default constructor was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 /* pointer to pot. throwing function passed to extern C */} \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5045) {\cf20 /* Spectre mitigation for memory load */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5105) {\cf20 /* macro producing 'defined' has undefined behavior */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4738) {\cf20 /* storing float result in memory, loss of performance */}\par
}
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MESSAGE(  {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC\~ 0}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOEXCEPT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOEXCEPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOEXCEPT\~ noexcept}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOINLINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NOINLINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOINLINE\~ __attribute__((noinline))}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NORETURN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_NORETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NORETURN\~ [[noreturn]]}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_PLATFORM_LINUX\:doctest.h}
{\xe \v doctest.h\:DOCTEST_PLATFORM_LINUX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_PLATFORM_LINUX}}
\par
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REF_WRAP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REF_WRAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REF_WRAP( x)\~ x&}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR( signature)}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\\par
                                               signature)\par
}
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL( translatorName,  signature)}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 inline} doctest::String translatorName(signature);                                              \\\par
    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerExceptionTranslator(translatorName))                                  \\\par
    doctest::String translatorName(signature)\par
}
}
{\xe \v DOCTEST_REGISTER_FUNCTION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_FUNCTION( global_prefix,  f,  decorators)}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT */}    \\\par
            doctest::detail::regTest(                                                              \\\par
                    doctest::detail::TestCase(                                                     \\\par
                            f, __FILE__, __LINE__,                                                 \\\par
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\\par
                    decorators))\par
}
}
{\xe \v DOCTEST_REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_LISTENER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 false}))                            \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_REPORTER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 true}))                             \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_RELATIONAL_OP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_RELATIONAL_OP( name,  op)}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>                                                              \\\par
    DOCTEST_COMPARISON_RETURN_TYPE name({\cf17 const} DOCTEST_REF_WRAP(L) lhs,                             \\\par
                                        {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{                           \\\par
        {\cf19 return} lhs op rhs;                                                                         \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1428                                                                        \{                           \\\par
1429         {\cf19 return} lhs op rhs;                                                                         \\\par
1430     \}\par
}
}
{\xe \v DOCTEST_REQUIRE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJO}
{\bkmkend AAAAAAAAJO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJP}
{\bkmkend AAAAAAAAJP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJQ}
{\bkmkend AAAAAAAAJQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO( name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJU}
{\bkmkend AAAAAAAAJU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)}}
\par
{\bkmkstart AAAAAAAAJV}
{\bkmkend AAAAAAAAJV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SINGLE_HEADER\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SINGLE_HEADER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SINGLE_HEADER}}
\par
{\bkmkstart AAAAAAAAJW}
{\bkmkend AAAAAAAAJW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_STRINGIFY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_STRINGIFY(  {\i ...})\~ toString(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAJX}
{\bkmkend AAAAAAAAJX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SUBCASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUBCASE( name)}}
\par
{\bkmkstart AAAAAAAAJY}
{\bkmkend AAAAAAAAJY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}({\cf17 const} doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\\par
               doctest::detail::Subcase(name, __FILE__, __LINE__))\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}}
\par
{\bkmkstart AAAAAAAAJZ}
{\bkmkend AAAAAAAAJZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\\par
    DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}}
\par
{\bkmkstart AAAAAAAAKA}
{\bkmkend AAAAAAAAKA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_EXPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_EXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_EXPORT\~ __attribute__((visibility("default")))}}
\par
{\bkmkstart AAAAAAAAKB}
{\bkmkend AAAAAAAAKB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_IMPORT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_SYMBOL_IMPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_IMPORT}}
\par
{\bkmkstart AAAAAAAAKC}
{\bkmkend AAAAAAAAKC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE( decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)}}
\par
{\bkmkstart AAAAAAAAKD}
{\bkmkend AAAAAAAAKD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_CLASS(  {\i ...})\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}}
\par
{\bkmkstart AAAAAAAAKE}
{\bkmkend AAAAAAAAKE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_FIXTURE( c,  decorators)}}
\par
{\bkmkstart AAAAAAAAKF}
{\bkmkend AAAAAAAAKF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\\par
                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE( dec,  T,   {\i ...})\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKG}
{\bkmkend AAAAAAAAKG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKH}
{\bkmkend AAAAAAAAKH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE( dec,  T,  id)}}
\par
{\bkmkstart AAAAAAAAKI}
{\bkmkend AAAAAAAAKI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT({\cf18 id}, ITERATOR),                      \\\par
                                           DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL( dec,  T,  iter,  func)}}
\par
{\bkmkstart AAAAAAAAKJ}
{\bkmkend AAAAAAAAKJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func();                                                                            \\\par
    {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 template} <{\cf17 typename} Tuple>                                                                  \\\par
        {\cf17 struct }iter;                                                                               \\\par
        {\cf17 template} <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
        {\cf17 struct }iter<std::tuple<Type, Rest...>>                                                     \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
                doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
                                            doctest::toString<Type>(),                             \\\par
                                            {\cf18 int}(line) * 1000 + index)                              \\\par
                                         * dec);                                                   \\\par
                iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
            \}                                                                                      \\\par
        \};                                                                                         \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 struct }iter<std::tuple<>>                                                                  \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
        \};                                                                                         \\\par
    \}                                                                                              \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2185               \{ {\cf20 /* NOLINT */}                                                                       \\\par
2186         {\cf17 template} <{\cf17 typename} Tuple>                                                                  \\\par
2187         {\cf17 struct }iter;                                                                               \\\par
2188         {\cf17 template} <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
2189         {\cf17 struct }iter<std::tuple<Type, Rest...>>                                                     \\\par
2190         \{                                                                                          \\\par
2191             iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
2192                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
2193                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
2194                                             doctest::toString<Type>(),                             \\\par
2195                                             {\cf18 int}(line) * 1000 + index)                              \\\par
2196                                          * dec);                                                   \\\par
2197                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
2198             \}                                                                                      \\\par
2199         \};                                                                                         \\\par
2200         {\cf17 template} <>                                                                                \\\par
2201         {\cf17 struct }iter<std::tuple<>>                                                                  \\\par
2202         \{                                                                                          \\\par
2203             iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
2204         \};                                                                                         \\\par
2205     \}                                                                                              \\\par
2206     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
2207     {\cf17 static} {\cf18 void} func()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_IMPL( dec,  T,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKK}
{\bkmkend AAAAAAAAKK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\\par
    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} anon()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKL}
{\bkmkend AAAAAAAAKL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL( id,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKM}
{\bkmkend AAAAAAAAKM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), {\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */} \\\par
        doctest::detail::instantiationHelper(                                                      \\\par
            DOCTEST_CAT({\cf18 id}, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKN}
{\bkmkend AAAAAAAAKN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE( decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))}}
\par
{\bkmkstart AAAAAAAAKO}
{\bkmkend AAAAAAAAKO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_BEGIN( decorators)}}
\par
{\bkmkstart AAAAAAAAKP}
{\bkmkend AAAAAAAAKP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
DOCTEST_TEST_SUITE_END}}
\par
{\bkmkstart AAAAAAAAKQ}
{\bkmkend AAAAAAAAKQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * {\cf22 ""}))                      \\\par
    {\cf17 using }DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int\par
}
}
{\xe \v DOCTEST_TEST_SUITE_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TEST_SUITE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_IMPL( decorators,  ns_name)}}
\par
{\bkmkstart AAAAAAAAKR}
{\bkmkend AAAAAAAAKR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }ns_name \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
            {\cf17 static} DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmissing-field-initializers"})             \\\par
                {\cf17 static} doctest::detail::TestSuite data\{\};                                          \\\par
                {\cf17 static} {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\\par
                if(!inited) \{                                                                      \\\par
                    data* decorators;                                                              \\\par
                    inited = {\cf17 true};                                                                 \\\par
                \}                                                                                  \\\par
                {\cf19 return} data;                                                                       \\\par
            \}                                                                                      \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    {\cf17 namespace }ns_name\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2242                       \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
2243             {\cf17 static} DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\\par
2244                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
2245                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
2246                 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmissing-field-initializers"})             \\\par
2247                 {\cf17 static} doctest::detail::TestSuite data\{\};                                          \\\par
2248                 {\cf17 static} {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
2249                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
2250                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
2251                 DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\\par
2252                 if(!inited) \{                                                                      \\\par
2253                     data* decorators;                                                              \\\par
2254                     inited = {\cf17 true};                                                                 \\\par
2255                 \}                                                                                  \\\par
2256                 {\cf19 return} data;                                                                       \\\par
2257             \}                                                                                      \\\par
2258         \}                                                                                          \\\par
2259     \}                                                                                              \\\par
2260     {\cf17 namespace }ns_name\par
}
}
{\xe \v DOCTEST_THEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_THEN( name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)}}
\par
{\bkmkstart AAAAAAAAKS}
{\bkmkend AAAAAAAAKS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TO_LVALUE(  {\i ...})\~ __VA_ARGS__}}
\par
{\bkmkstart AAAAAAAAKT}
{\bkmkend AAAAAAAAKT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TOSTR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR( x)\~ {\b DOCTEST_TOSTR_IMPL}(x)}}
\par
{\bkmkstart AAAAAAAAKU}
{\bkmkend AAAAAAAAKU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR_IMPL\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TOSTR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR_IMPL( x)\~ #x}}
\par
{\bkmkstart AAAAAAAAKV}
{\bkmkend AAAAAAAAKV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAKW}
{\bkmkend AAAAAAAAKW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING_AS( str,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKX}
{\bkmkend AAAAAAAAKX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }doctest \{                                                                            \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 inline} String toString<__VA_ARGS__>() \{                                                    \\\par
            {\cf19 return} str;                                                                            \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2172                       \{                                                                            \\\par
2173         {\cf17 template} <>                                                                                \\\par
2174         {\cf17 inline} String toString<__VA_ARGS__>() \{                                                    \\\par
2175             {\cf19 return} str;                                                                            \\\par
2176         \}                                                                                          \\\par
2177     \}                                                                                              \\\par
2178     static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_UNARY_ASSERT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNARY_ASSERT( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAKY}
{\bkmkend AAAAAAAAKY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2368                              \{                                                                     \\\par
2369         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
2370                                                    __LINE__, #__VA_ARGS__);                        \\\par
2371         DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\\par
2372         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
2373     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_UNUSED\:doctest.h}
{\xe \v doctest.h\:DOCTEST_UNUSED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNUSED\~ __attribute__((unused))}}
\par
{\bkmkstart AAAAAAAAKZ}
{\bkmkend AAAAAAAAKZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})}}
\par
{\bkmkstart AAAAAAAALA}
{\bkmkend AAAAAAAALA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MAJOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MAJOR\~ 2}}
\par
{\bkmkstart AAAAAAAALB}
{\bkmkend AAAAAAAALB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MINOR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MINOR\~ 4}}
\par
{\bkmkstart AAAAAAAALC}
{\bkmkend AAAAAAAALC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_PATCH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_PATCH\~ 9}}
\par
{\bkmkstart AAAAAAAALD}
{\bkmkend AAAAAAAALD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_STR\:doctest.h}
{\xe \v doctest.h\:DOCTEST_VERSION_STR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_STR}}
\par
{\bkmkstart AAAAAAAALE}
{\bkmkend AAAAAAAALE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)\par
}
}
{\xe \v DOCTEST_WARN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALF}
{\bkmkend AAAAAAAALF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALG}
{\bkmkend AAAAAAAALG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALH}
{\bkmkend AAAAAAAALH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAALI}
{\bkmkend AAAAAAAALI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALJ}
{\bkmkend AAAAAAAALJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALK}
{\bkmkend AAAAAAAALK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALL}
{\bkmkend AAAAAAAALL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALM}
{\bkmkend AAAAAAAALM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAALN}
{\bkmkend AAAAAAAALN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALO}
{\bkmkend AAAAAAAALO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALP}
{\bkmkend AAAAAAAALP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALQ}
{\bkmkend AAAAAAAALQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALR}
{\bkmkend AAAAAAAALR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALS}
{\bkmkend AAAAAAAALS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALT}
{\bkmkend AAAAAAAALT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALU}
{\bkmkend AAAAAAAALU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALV}
{\bkmkend AAAAAAAALV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALW}
{\bkmkend AAAAAAAALW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALX}
{\bkmkend AAAAAAAALX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAALY}
{\bkmkend AAAAAAAALY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAALZ}
{\bkmkend AAAAAAAALZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMA}
{\bkmkend AAAAAAAAMA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WHEN\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WHEN( name)\~ {\b DOCTEST_SUBCASE}("    When: " name)}}
\par
{\bkmkstart AAAAAAAAMB}
{\bkmkend AAAAAAAAMB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WRAP_IN_TRY\:doctest.h}
{\xe \v doctest.h\:DOCTEST_WRAP_IN_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WRAP_IN_TRY( x)\~ x;}}
\par
{\bkmkstart AAAAAAAAMC}
{\bkmkend AAAAAAAAMC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL\:doctest.h}
{\xe \v doctest.h\:FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL(  {\i ...})\~ {\b DOCTEST_FAIL}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMD}
{\bkmkend AAAAAAAAMD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL_CHECK\:doctest.h}
{\xe \v doctest.h\:FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAME}
{\bkmkend AAAAAAAAME}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMF}
{\bkmkend AAAAAAAAMF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMG}
{\bkmkend AAAAAAAAMG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMH}
{\bkmkend AAAAAAAAMH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMI}
{\bkmkend AAAAAAAAMI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LT\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMJ}
{\bkmkend AAAAAAAAMJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_NE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMK}
{\bkmkend AAAAAAAAMK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAML}
{\bkmkend AAAAAAAAML}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMM}
{\bkmkend AAAAAAAAMM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMN}
{\bkmkend AAAAAAAAMN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMO}
{\bkmkend AAAAAAAAMO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMP}
{\bkmkend AAAAAAAAMP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMQ}
{\bkmkend AAAAAAAAMQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMR}
{\bkmkend AAAAAAAAMR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMS}
{\bkmkend AAAAAAAAMS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMT}
{\bkmkend AAAAAAAAMT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMU}
{\bkmkend AAAAAAAAMU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_EQ\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMV}
{\bkmkend AAAAAAAAMV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMW}
{\bkmkend AAAAAAAAMW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMX}
{\bkmkend AAAAAAAAMX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMY}
{\bkmkend AAAAAAAAMY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LT\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAMZ}
{\bkmkend AAAAAAAAMZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_NE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_NE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANA}
{\bkmkend AAAAAAAANA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANB}
{\bkmkend AAAAAAAANB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANC}
{\bkmkend AAAAAAAANC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GIVEN\:doctest.h}
{\xe \v doctest.h\:GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GIVEN( name)\~ {\b DOCTEST_GIVEN}(name)}}
\par
{\bkmkstart AAAAAAAAND}
{\bkmkend AAAAAAAAND}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INFO\:doctest.h}
{\xe \v doctest.h\:INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INFO(  {\i ...})\~ {\b DOCTEST_INFO}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANE}
{\bkmkend AAAAAAAANE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MESSAGE\:doctest.h}
{\xe \v doctest.h\:MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MESSAGE(  {\i ...})\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANF}
{\bkmkend AAAAAAAANF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_EXCEPTION_TRANSLATOR\:doctest.h}
{\xe \v doctest.h\:REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_EXCEPTION_TRANSLATOR( signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)}}
\par
{\bkmkstart AAAAAAAANG}
{\bkmkend AAAAAAAANG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_LISTENER\:doctest.h}
{\xe \v doctest.h\:REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_LISTENER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAAANH}
{\bkmkend AAAAAAAANH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_REPORTER\:doctest.h}
{\xe \v doctest.h\:REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_REPORTER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAAANI}
{\bkmkend AAAAAAAANI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE\:doctest.h}
{\xe \v doctest.h\:REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE(  {\i ...})\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANJ}
{\bkmkend AAAAAAAANJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_EQ\:doctest.h}
{\xe \v doctest.h\:REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANK}
{\bkmkend AAAAAAAANK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANL}
{\bkmkend AAAAAAAANL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANM}
{\bkmkend AAAAAAAANM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANN}
{\bkmkend AAAAAAAANN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANO}
{\bkmkend AAAAAAAANO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANP}
{\bkmkend AAAAAAAANP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LT\:doctest.h}
{\xe \v doctest.h\:REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANQ}
{\bkmkend AAAAAAAANQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANR}
{\bkmkend AAAAAAAANR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANS}
{\bkmkend AAAAAAAANS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANT}
{\bkmkend AAAAAAAANT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANU}
{\bkmkend AAAAAAAANU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANV}
{\bkmkend AAAAAAAANV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANW}
{\bkmkend AAAAAAAANW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANX}
{\bkmkend AAAAAAAANX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANY}
{\bkmkend AAAAAAAANY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAANZ}
{\bkmkend AAAAAAAANZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOA}
{\bkmkend AAAAAAAAOA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOB}
{\bkmkend AAAAAAAAOB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOC}
{\bkmkend AAAAAAAAOC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOD}
{\bkmkend AAAAAAAAOD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOE}
{\bkmkend AAAAAAAAOE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO\:doctest.h}
{\xe \v doctest.h\:SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO( name)\~ {\b DOCTEST_SCENARIO}(name)}}
\par
{\bkmkstart AAAAAAAAOF}
{\bkmkend AAAAAAAAOF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_CLASS\:doctest.h}
{\xe \v doctest.h\:SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_CLASS( name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)}}
\par
{\bkmkstart AAAAAAAAOG}
{\bkmkend AAAAAAAAOG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOH}
{\bkmkend AAAAAAAAOH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAAAOI}
{\bkmkend AAAAAAAAOI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SFINAE_OP\:doctest.h}
{\xe \v doctest.h\:SFINAE_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SFINAE_OP( ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})}}
\par
{\bkmkstart AAAAAAAAOJ}
{\bkmkend AAAAAAAAOJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SUBCASE\:doctest.h}
{\xe \v doctest.h\:SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SUBCASE( name)\~ {\b DOCTEST_SUBCASE}(name)}}
\par
{\bkmkstart AAAAAAAAOK}
{\bkmkend AAAAAAAAOK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE( name)\~ {\b DOCTEST_TEST_CASE}(name)}}
\par
{\bkmkstart AAAAAAAAOL}
{\bkmkend AAAAAAAAOL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_CLASS\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)}}
\par
{\bkmkstart AAAAAAAAOM}
{\bkmkend AAAAAAAAOM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_FIXTURE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_FIXTURE( x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)}}
\par
{\bkmkstart AAAAAAAAON}
{\bkmkend AAAAAAAAON}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOO}
{\bkmkend AAAAAAAAOO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_APPLY\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOP}
{\bkmkend AAAAAAAAOP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_DEFINE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAAAOQ}
{\bkmkend AAAAAAAAOQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOR}
{\bkmkend AAAAAAAAOR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INVOKE\:doctest.h}
{\xe \v doctest.h\:TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOS}
{\bkmkend AAAAAAAAOS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE( decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)}}
\par
{\bkmkstart AAAAAAAAOT}
{\bkmkend AAAAAAAAOT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_BEGIN\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_BEGIN( name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)}}
\par
{\bkmkstart AAAAAAAAOU}
{\bkmkend AAAAAAAAOU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_END\:doctest.h}
{\xe \v doctest.h\:TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_END\~ {\b DOCTEST_TEST_SUITE_END}}}
\par
{\bkmkstart AAAAAAAAOV}
{\bkmkend AAAAAAAAOV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v THEN\:doctest.h}
{\xe \v doctest.h\:THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define THEN( name)\~ {\b DOCTEST_THEN}(name)}}
\par
{\bkmkstart AAAAAAAAOW}
{\bkmkend AAAAAAAAOW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TO_LVALUE\:doctest.h}
{\xe \v doctest.h\:TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TO_LVALUE(  {\i ...})\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOX}
{\bkmkend AAAAAAAAOX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING\:doctest.h}
{\xe \v doctest.h\:TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOY}
{\bkmkend AAAAAAAAOY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING_AS\:doctest.h}
{\xe \v doctest.h\:TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING_AS( str,   {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAOZ}
{\bkmkend AAAAAAAAOZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN\:doctest.h}
{\xe \v doctest.h\:WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN(  {\i ...})\~ {\b DOCTEST_WARN}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPA}
{\bkmkend AAAAAAAAPA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_EQ\:doctest.h}
{\xe \v doctest.h\:WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_EQ(  {\i ...})\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPB}
{\bkmkend AAAAAAAAPB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPC}
{\bkmkend AAAAAAAAPC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPD}
{\bkmkend AAAAAAAAPD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GE\:doctest.h}
{\xe \v doctest.h\:WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GE(  {\i ...})\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPE}
{\bkmkend AAAAAAAAPE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GT\:doctest.h}
{\xe \v doctest.h\:WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GT(  {\i ...})\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPF}
{\bkmkend AAAAAAAAPF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LE\:doctest.h}
{\xe \v doctest.h\:WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LE(  {\i ...})\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPG}
{\bkmkend AAAAAAAAPG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LT\:doctest.h}
{\xe \v doctest.h\:WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LT(  {\i ...})\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPH}
{\bkmkend AAAAAAAAPH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPI}
{\bkmkend AAAAAAAAPI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NE\:doctest.h}
{\xe \v doctest.h\:WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NE(  {\i ...})\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPJ}
{\bkmkend AAAAAAAAPJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPK}
{\bkmkend AAAAAAAAPK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPL}
{\bkmkend AAAAAAAAPL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS(  {\i ...})\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPM}
{\bkmkend AAAAAAAAPM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPN}
{\bkmkend AAAAAAAAPN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPO}
{\bkmkend AAAAAAAAPO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPP}
{\bkmkend AAAAAAAAPP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPQ}
{\bkmkend AAAAAAAAPQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPR}
{\bkmkend AAAAAAAAPR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPS}
{\bkmkend AAAAAAAAPS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_MESSAGE\:doctest.h}
{\xe \v doctest.h\:WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPT}
{\bkmkend AAAAAAAAPT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY(  {\i ...})\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPU}
{\bkmkend AAAAAAAAPU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY_FALSE\:doctest.h}
{\xe \v doctest.h\:WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAPV}
{\bkmkend AAAAAAAAPV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WHEN\:doctest.h}
{\xe \v doctest.h\:WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WHEN( name)\~ {\b DOCTEST_WHEN}(name)}}
\par
{\bkmkstart AAAAAAAAPW}
{\bkmkend AAAAAAAAPW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest.h\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/doctest.h}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/doctest.h}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // ====================================================================== lgtm [cpp/missing-header-guard]}\par
2 {\cf20 // == DO NOT MODIFY THIS FILE BY HAND - IT IS AUTO GENERATED BY CMAKE! ==}\par
3 {\cf20 // ======================================================================}\par
4 {\cf20 //}\par
5 {\cf20 // doctest.h - the lightest feature-rich C++ single-header testing framework for unit tests and TDD}\par
6 {\cf20 //}\par
7 {\cf20 // Copyright (c) 2016-2021 Viktor Kirilov}\par
8 {\cf20 //}\par
9 {\cf20 // Distributed under the MIT Software License}\par
10 {\cf20 // See accompanying file LICENSE.txt or copy at}\par
11 {\cf20 // https://opensource.org/licenses/MIT}\par
12 {\cf20 //}\par
13 {\cf20 // The documentation can be found at the library's page:}\par
14 {\cf20 // https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md}\par
15 {\cf20 //}\par
16 {\cf20 // =================================================================================================}\par
17 {\cf20 // =================================================================================================}\par
18 {\cf20 // =================================================================================================}\par
19 {\cf20 //}\par
20 {\cf20 // The library is heavily influenced by Catch - https://github.com/catchorg/Catch2}\par
21 {\cf20 // which uses the Boost Software License - Version 1.0}\par
22 {\cf20 // see here - https://github.com/catchorg/Catch2/blob/master/LICENSE.txt}\par
23 {\cf20 //}\par
24 {\cf20 // The concept of subcases (sections in Catch) and expression decomposition are from there.}\par
25 {\cf20 // Some parts of the code are taken directly:}\par
26 {\cf20 // - stringification - the detection of "ostream& operator<<(ostream&, const T&)" and StringMaker<>}\par
27 {\cf20 // - the Approx() helper class for floating point comparison}\par
28 {\cf20 // - colors in the console}\par
29 {\cf20 // - breaking into a debugger}\par
30 {\cf20 // - signal / SEH handling}\par
31 {\cf20 // - timer}\par
32 {\cf20 // - XmlWriter class - thanks to Phil Nash for allowing the direct reuse (AKA copy/paste)}\par
33 {\cf20 //}\par
34 {\cf20 // The expression decomposing templates are taken from lest - https://github.com/martinmoene/lest}\par
35 {\cf20 // which uses the Boost Software License - Version 1.0}\par
36 {\cf20 // see here - https://github.com/martinmoene/lest/blob/master/LICENSE.txt}\par
37 {\cf20 //}\par
38 {\cf20 // =================================================================================================}\par
39 {\cf20 // =================================================================================================}\par
40 {\cf20 // =================================================================================================}\par
41 \par
42 {\cf21 #ifndef DOCTEST_LIBRARY_INCLUDED}\par
43 {\cf21 #define DOCTEST_LIBRARY_INCLUDED}\par
44 \par
45 {\cf20 // =================================================================================================}\par
46 {\cf20 // == VERSION ======================================================================================}\par
47 {\cf20 // =================================================================================================}\par
48 \par
49 {\cf21 #define DOCTEST_VERSION_MAJOR 2}\par
50 {\cf21 #define DOCTEST_VERSION_MINOR 4}\par
51 {\cf21 #define DOCTEST_VERSION_PATCH 9}\par
52 \par
53 {\cf20 // util we need here}\par
54 {\cf21 #define DOCTEST_TOSTR_IMPL(x) #x}\par
55 {\cf21 #define DOCTEST_TOSTR(x) DOCTEST_TOSTR_IMPL(x)}\par
56 \par
57 {\cf21 #define DOCTEST_VERSION_STR                                                                        \\}\par
58 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) "."                                                       \\}\par
59 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) "."                                                       \\}\par
60 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)}\par
61 \par
62 {\cf21 #define DOCTEST_VERSION                                                                            \\}\par
63 {\cf21     (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)}\par
64 \par
65 {\cf20 // =================================================================================================}\par
66 {\cf20 // == COMPILER VERSION =============================================================================}\par
67 {\cf20 // =================================================================================================}\par
68 \par
69 {\cf20 // ideas for the version stuff are taken from here: https://github.com/cxxstuff/cxx_detect}\par
70 \par
71 {\cf21 #ifdef _MSC_VER}\par
72 {\cf21 #define DOCTEST_CPLUSPLUS _MSVC_LANG}\par
73 {\cf21 #else}\par
74 {\cf21 #define DOCTEST_CPLUSPLUS __cplusplus}\par
75 {\cf21 #endif}\par
76 \par
77 {\cf21 #define DOCTEST_COMPILER(MAJOR, MINOR, PATCH) ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}\par
78 \par
79 {\cf20 // GCC/Clang and GCC/MSVC are mutually exclusive, but Clang/MSVC are not because of clang-cl...}\par
80 {\cf21 #if defined(_MSC_VER) && defined(_MSC_FULL_VER)}\par
81 {\cf21 #if _MSC_VER == _MSC_FULL_VER / 10000}\par
82 {\cf21 #define DOCTEST_MSVC DOCTEST_COMPILER(_MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 10000)}\par
83 {\cf21 #else }{\cf20 // MSVC}\par
84 {\cf21 #define DOCTEST_MSVC                                                                               \\}\par
85 {\cf21     DOCTEST_COMPILER(_MSC_VER / 100, (_MSC_FULL_VER / 100000) % 100, _MSC_FULL_VER % 100000)}\par
86 {\cf21 #endif }{\cf20 // MSVC}\par
87 {\cf21 #endif }{\cf20 // MSVC}\par
88 {\cf21 #if defined(__clang__) && defined(__clang_minor__)}\par
89 {\cf21 #define DOCTEST_CLANG DOCTEST_COMPILER(__clang_major__, __clang_minor__, __clang_patchlevel__)}\par
90 {\cf21 #elif defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) &&              \\}\par
91 {\cf21         !defined(__INTEL_COMPILER)}\par
92 {\cf21 #define DOCTEST_GCC DOCTEST_COMPILER(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)}\par
93 {\cf21 #endif }{\cf20 // GCC}\par
94 \par
95 {\cf21 #ifndef DOCTEST_MSVC}\par
96 {\cf21 #define DOCTEST_MSVC 0}\par
97 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
98 {\cf21 #ifndef DOCTEST_CLANG}\par
99 {\cf21 #define DOCTEST_CLANG 0}\par
100 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
101 {\cf21 #ifndef DOCTEST_GCC}\par
102 {\cf21 #define DOCTEST_GCC 0}\par
103 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
104 \par
105 {\cf20 // =================================================================================================}\par
106 {\cf20 // == COMPILER WARNINGS HELPERS ====================================================================}\par
107 {\cf20 // =================================================================================================}\par
108 \par
109 {\cf21 #if DOCTEST_CLANG}\par
110 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
111 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH _Pragma("clang diagnostic push")}\par
112 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(clang diagnostic ignored w)}\par
113 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP _Pragma("clang diagnostic pop")}\par
114 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)                                                \\}\par
115 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
116 {\cf21 #else }{\cf20 // DOCTEST_CLANG}\par
117 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
118 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
119 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
120 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)}\par
121 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
122 \par
123 {\cf21 #if DOCTEST_GCC}\par
124 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
125 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH _Pragma("GCC diagnostic push")}\par
126 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(GCC diagnostic ignored w)}\par
127 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP _Pragma("GCC diagnostic pop")}\par
128 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)                                                  \\}\par
129 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
130 {\cf21 #else }{\cf20 // DOCTEST_GCC}\par
131 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
132 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
133 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
134 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
135 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
136 \par
137 {\cf21 #if DOCTEST_MSVC}\par
138 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH __pragma(warning(push))}\par
139 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w) __pragma(warning(disable : w))}\par
140 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP __pragma(warning(pop))}\par
141 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)                                                 \\}\par
142 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
143 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
144 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
145 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
146 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
147 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
148 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
149 \par
150 {\cf20 // =================================================================================================}\par
151 {\cf20 // == COMPILER WARNINGS ============================================================================}\par
152 {\cf20 // =================================================================================================}\par
153 \par
154 {\cf20 // both the header and the implementation suppress all of these,}\par
155 {\cf20 // so it only makes sense to aggregrate them like so}\par
156 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH                                                      \\}\par
157 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH                                                            \\}\par
158 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wunknown-pragmas")                                            \\}\par
159 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")                                               \\}\par
160 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")                                                     \\}\par
161 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")                                         \\}\par
162 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")                                               \\}\par
163 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")                                      \\}\par
164 {\cf21                                                                                                    \\}\par
165 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH                                                              \\}\par
166 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")                                              \\}\par
167 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")                                                      \\}\par
168 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")                                                       \\}\par
169 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")                                              \\}\par
170 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")                                              \\}\par
171 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")                                         \\}\par
172 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")                                                 \\}\par
173 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")                                                     \\}\par
174 {\cf21                                                                                                    \\}\par
175 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
176 {\cf21     }{\cf20 /* these 4 also disabled globally via cmake: */}{\cf21                                                 \\}\par
177 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4514) }{\cf20 /* unreferenced inline function has been removed */}{\cf21         \\}\par
178 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4571) }{\cf20 /* SEH related */}{\cf21                                           \\}\par
179 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4710) }{\cf20 /* function not inlined */}{\cf21                                  \\}\par
180 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4711) }{\cf20 /* function selected for inline expansion*/}{\cf21                 \\}\par
181 {\cf21     }{\cf20 /* */}{\cf21                                                                                           \\}\par
182 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4616) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
183 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4619) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
184 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4996) }{\cf20 /* The compiler encountered a deprecated declaration */}{\cf21     \\}\par
185 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4706) }{\cf20 /* assignment within conditional expression */}{\cf21              \\}\par
186 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4512) }{\cf20 /* 'class' : assignment operator could not be generated */}{\cf21  \\}\par
187 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4127) }{\cf20 /* conditional expression is constant */}{\cf21                    \\}\par
188 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
189 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
190 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
191 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
192 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
193 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4640) }{\cf20 /* construction of local static object not thread-safe */}{\cf21   \\}\par
194 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
195 {\cf21     }{\cf20 /* static analysis */}{\cf21                                                                           \\}\par
196 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26439) }{\cf20 /* Function may not throw. Declare it 'noexcept' */}{\cf21        \\}\par
197 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26495) }{\cf20 /* Always initialize a member variable */}{\cf21                  \\}\par
198 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26451) }{\cf20 /* Arithmetic overflow ... */}{\cf21                              \\}\par
199 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26444) }{\cf20 /* Avoid unnamed objects with custom ctor and dtor... */}{\cf21   \\}\par
200 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26812) }{\cf20 /* Prefer 'enum class' over 'enum' */}{\cf21 }\par
201 \par
202 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP                                                       \\}\par
203 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\}\par
204 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\}\par
205 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
206 \par
207 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
208 \par
209 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
210 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wnon-virtual-dtor"})\par
211 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdeprecated")\par
212 \par
213 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
214 DOCTEST_GCC_SUPPRESS_WARNING("-Wctor-dtor-privacy")\par
215 DOCTEST_GCC_SUPPRESS_WARNING("-Wnon-virtual-dtor")\par
216 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-promo")\par
217 \par
218 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
219 DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 // default constructor was implicitly defined as deleted}\par
220 \par
221 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN                                 \\}\par
222 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
223 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4548) }{\cf20 /* before comma no effect; expected side - effect */}{\cf21        \\}\par
224 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4265) }{\cf20 /* virtual functions, but destructor is not virtual */}{\cf21      \\}\par
225 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4986) }{\cf20 /* exception specification does not match previous */}{\cf21       \\}\par
226 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4350) }{\cf20 /* 'member1' called instead of 'member2' */}{\cf21                 \\}\par
227 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4668) }{\cf20 /* not defined as a preprocessor macro */}{\cf21                   \\}\par
228 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4365) }{\cf20 /* signed/unsigned mismatch */}{\cf21                              \\}\par
229 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4774) }{\cf20 /* format string not a string literal */}{\cf21                    \\}\par
230 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
231 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
232 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
233 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
234 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
235 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4623) }{\cf20 /* default constructor was implicitly deleted */}{\cf21            \\}\par
236 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5039) }{\cf20 /* pointer to pot. throwing function passed to extern C */}{\cf21  \\}\par
237 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
238 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5105) }{\cf20 /* macro producing 'defined' has undefined behavior */}{\cf21      \\}\par
239 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4738) }{\cf20 /* storing float result in memory, loss of performance */}{\cf21 }\par
240 \par
241 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
242 \par
243 {\cf20 // =================================================================================================}\par
244 {\cf20 // == FEATURE DETECTION ============================================================================}\par
245 {\cf20 // =================================================================================================}\par
246 \par
247 {\cf20 // general compiler feature support table: https://en.cppreference.com/w/cpp/compiler_support}\par
248 {\cf20 // MSVC C++11 feature support table: https://msdn.microsoft.com/en-us/library/hh567368.aspx}\par
249 {\cf20 // GCC C++11 feature support table: https://gcc.gnu.org/projects/cxx-status.html}\par
250 {\cf20 // MSVC version table:}\par
251 {\cf20 // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering}\par
252 {\cf20 // MSVC++ 14.3 (17) _MSC_VER == 1930 (Visual Studio 2022)}\par
253 {\cf20 // MSVC++ 14.2 (16) _MSC_VER == 1920 (Visual Studio 2019)}\par
254 {\cf20 // MSVC++ 14.1 (15) _MSC_VER == 1910 (Visual Studio 2017)}\par
255 {\cf20 // MSVC++ 14.0      _MSC_VER == 1900 (Visual Studio 2015)}\par
256 {\cf20 // MSVC++ 12.0      _MSC_VER == 1800 (Visual Studio 2013)}\par
257 {\cf20 // MSVC++ 11.0      _MSC_VER == 1700 (Visual Studio 2012)}\par
258 {\cf20 // MSVC++ 10.0      _MSC_VER == 1600 (Visual Studio 2010)}\par
259 {\cf20 // MSVC++ 9.0       _MSC_VER == 1500 (Visual Studio 2008)}\par
260 {\cf20 // MSVC++ 8.0       _MSC_VER == 1400 (Visual Studio 2005)}\par
261 \par
262 {\cf20 // Universal Windows Platform support}\par
263 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
264 {\cf21 #define DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
265 {\cf21 #endif }{\cf20 // WINAPI_FAMILY}\par
266 {\cf21 #if DOCTEST_MSVC && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
267 {\cf21 #define DOCTEST_CONFIG_WINDOWS_SEH}\par
268 {\cf21 #endif }{\cf20 // MSVC}\par
269 {\cf21 #if defined(DOCTEST_CONFIG_NO_WINDOWS_SEH) && defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
270 {\cf21 #undef DOCTEST_CONFIG_WINDOWS_SEH}\par
271 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
272 \par
273 {\cf21 #if !defined(_WIN32) && !defined(__QNX__) && !defined(DOCTEST_CONFIG_POSIX_SIGNALS) &&             \\}\par
274 {\cf21         !defined(__EMSCRIPTEN__) && !defined(__wasi__)}\par
275 {\cf21 #define DOCTEST_CONFIG_POSIX_SIGNALS}\par
276 {\cf21 #endif }{\cf20 // _WIN32}\par
277 {\cf21 #if defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS) && defined(DOCTEST_CONFIG_POSIX_SIGNALS)}\par
278 {\cf21 #undef DOCTEST_CONFIG_POSIX_SIGNALS}\par
279 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_POSIX_SIGNALS}\par
280 \par
281 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
282 {\cf21 #if !defined(__cpp_exceptions) && !defined(__EXCEPTIONS) && !defined(_CPPUNWIND)                   \\}\par
283 {\cf21         || defined(__wasi__)}\par
284 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
285 {\cf21 #endif }{\cf20 // no exceptions}\par
286 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
287 \par
288 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
289 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
290 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
291 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
292 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
293 \par
294 {\cf21 #if defined(DOCTEST_CONFIG_NO_EXCEPTIONS) && !defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)}\par
295 {\cf21 #define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
296 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS && !DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
297 \par
298 {\cf21 #ifdef __wasi__}\par
299 {\cf21 #define DOCTEST_CONFIG_NO_MULTITHREADING}\par
300 {\cf21 #endif}\par
301 \par
302 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN) && !defined(DOCTEST_CONFIG_IMPLEMENT)}\par
303 {\cf21 #define DOCTEST_CONFIG_IMPLEMENT}\par
304 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
305 \par
306 {\cf21 #if defined(_WIN32) || defined(__CYGWIN__)}\par
307 {\cf21 #if DOCTEST_MSVC}\par
308 {\cf21 #define DOCTEST_SYMBOL_EXPORT __declspec(dllexport)}\par
309 {\cf21 #define DOCTEST_SYMBOL_IMPORT __declspec(dllimport)}\par
310 {\cf21 #else }{\cf20 // MSVC}\par
311 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((dllexport))}\par
312 {\cf21 #define DOCTEST_SYMBOL_IMPORT __attribute__((dllimport))}\par
313 {\cf21 #endif }{\cf20 // MSVC}\par
314 {\cf21 #else  }{\cf20 // _WIN32}\par
315 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((visibility("default")))}\par
316 {\cf21 #define DOCTEST_SYMBOL_IMPORT}\par
317 {\cf21 #endif }{\cf20 // _WIN32}\par
318 \par
319 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
320 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT}\par
321 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_EXPORT}\par
322 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
323 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_IMPORT}\par
324 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
325 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
326 {\cf21 #define DOCTEST_INTERFACE}\par
327 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
328 \par
329 {\cf20 // needed for extern template instantiations}\par
330 {\cf20 // see https://github.com/fmtlib/fmt/issues/2228}\par
331 {\cf21 #if DOCTEST_MSVC}\par
332 {\cf21 #define DOCTEST_INTERFACE_DECL}\par
333 {\cf21 #define DOCTEST_INTERFACE_DEF DOCTEST_INTERFACE}\par
334 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
335 {\cf21 #define DOCTEST_INTERFACE_DECL DOCTEST_INTERFACE}\par
336 {\cf21 #define DOCTEST_INTERFACE_DEF}\par
337 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
338 \par
339 {\cf21 #define DOCTEST_EMPTY}\par
340 \par
341 {\cf21 #if DOCTEST_MSVC}\par
342 {\cf21 #define DOCTEST_NOINLINE __declspec(noinline)}\par
343 {\cf21 #define DOCTEST_UNUSED}\par
344 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
345 {\cf21 #elif DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 5, 0)}\par
346 {\cf21 #define DOCTEST_NOINLINE}\par
347 {\cf21 #define DOCTEST_UNUSED}\par
348 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
349 {\cf21 #else}\par
350 {\cf21 #define DOCTEST_NOINLINE __attribute__((noinline))}\par
351 {\cf21 #define DOCTEST_UNUSED __attribute__((unused))}\par
352 {\cf21 #define DOCTEST_ALIGNMENT(x) __attribute__((aligned(x)))}\par
353 {\cf21 #endif}\par
354 \par
355 {\cf21 #ifndef DOCTEST_NORETURN}\par
356 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
357 {\cf21 #define DOCTEST_NORETURN}\par
358 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
359 {\cf21 #define DOCTEST_NORETURN [[noreturn]]}\par
360 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
361 {\cf21 #endif }{\cf20 // DOCTEST_NORETURN}\par
362 \par
363 {\cf21 #ifndef DOCTEST_NOEXCEPT}\par
364 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
365 {\cf21 #define DOCTEST_NOEXCEPT}\par
366 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
367 {\cf21 #define DOCTEST_NOEXCEPT noexcept}\par
368 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
369 {\cf21 #endif }{\cf20 // DOCTEST_NOEXCEPT}\par
370 \par
371 {\cf21 #ifndef DOCTEST_CONSTEXPR}\par
372 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
373 {\cf21 #define DOCTEST_CONSTEXPR const}\par
374 {\cf21 #define DOCTEST_CONSTEXPR_FUNC inline}\par
375 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
376 {\cf21 #define DOCTEST_CONSTEXPR constexpr}\par
377 {\cf21 #define DOCTEST_CONSTEXPR_FUNC constexpr}\par
378 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
379 {\cf21 #endif }{\cf20 // DOCTEST_CONSTEXPR}\par
380 \par
381 {\cf20 // =================================================================================================}\par
382 {\cf20 // == FEATURE DETECTION END ========================================================================}\par
383 {\cf20 // =================================================================================================}\par
384 \par
385 {\cf21 #define DOCTEST_DECLARE_INTERFACE(name)                                                            \\}\par
386 {\cf21     virtual ~name();                                                                               \\}\par
387 {\cf21     name() = default;                                                                              \\}\par
388 {\cf21     name(const name&) = delete;                                                                    \\}\par
389 {\cf21     name(name&&) = delete;                                                                         \\}\par
390 {\cf21     name& operator=(const name&) = delete;                                                         \\}\par
391 {\cf21     name& operator=(name&&) = delete;}\par
392 \par
393 {\cf21 #define DOCTEST_DEFINE_INTERFACE(name)                                                             \\}\par
394 {\cf21     name::~name() = default;}\par
395 \par
396 {\cf20 // internal macros for string concatenation and anonymous variable name generation}\par
397 {\cf21 #define DOCTEST_CAT_IMPL(s1, s2) s1##s2}\par
398 {\cf21 #define DOCTEST_CAT(s1, s2) DOCTEST_CAT_IMPL(s1, s2)}\par
399 {\cf21 #ifdef __COUNTER__ }{\cf20 // not standard and may be missing for some compilers}\par
400 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)}\par
401 {\cf21 #else }{\cf20 // __COUNTER__}\par
402 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)}\par
403 {\cf21 #endif }{\cf20 // __COUNTER__}\par
404 \par
405 {\cf21 #ifndef DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
406 {\cf21 #define DOCTEST_REF_WRAP(x) x&}\par
407 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
408 {\cf21 #define DOCTEST_REF_WRAP(x) x}\par
409 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
410 \par
411 {\cf20 // not using __APPLE__ because... this is how Catch does it}\par
412 {\cf21 #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED}\par
413 {\cf21 #define DOCTEST_PLATFORM_MAC}\par
414 {\cf21 #elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)}\par
415 {\cf21 #define DOCTEST_PLATFORM_IPHONE}\par
416 {\cf21 #elif defined(_WIN32)}\par
417 {\cf21 #define DOCTEST_PLATFORM_WINDOWS}\par
418 {\cf21 #elif defined(__wasi__)}\par
419 {\cf21 #define DOCTEST_PLATFORM_WASI}\par
420 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM}\par
421 {\cf21 #define DOCTEST_PLATFORM_LINUX}\par
422 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM}\par
423 \par
424 {\cf17 namespace }doctest \{ {\cf17 namespace }detail \{\par
425     {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} consume({\cf17 const} {\cf18 int}*, {\cf18 int}) {\cf17 noexcept} \{ {\cf19 return} 0; \}\par
426 \}\}\par
427 \par
428 {\cf21 #define DOCTEST_GLOBAL_NO_WARNINGS(var, ...)                                                         \\}\par
429 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wglobal-constructors")                                \\}\par
430 {\cf21     static const int var = doctest::detail::consume(&var, __VA_ARGS__);                              \\}\par
431 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
432 \par
433 {\cf21 #ifndef DOCTEST_BREAK_INTO_DEBUGGER}\par
434 {\cf20 // should probably take a look at https://github.com/scottt/debugbreak}\par
435 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
436 {\cf21 #if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))}\par
437 {\cf20 // Break at the location of the failing check if possible}\par
438 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
439 {\cf21 #else}\par
440 {\cf21 #include <signal.h>}\par
441 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() raise(SIGTRAP)}\par
442 {\cf21 #endif}\par
443 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
444 {\cf21 #if defined(__x86_64) || defined(__x86_64__) || defined(__amd64__) || defined(__i386)}\par
445 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
446 {\cf21 #elif defined(__ppc__) || defined(__ppc64__)}\par
447 {\cf20 // https://www.cocoawithlove.com/2008/03/break-into-debugger.html}\par
448 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("li r0, 20\\nsc\\nnop\\nli r0, 37\\nli r4, 2\\nsc\\nnop\\n": : : "memory","r0","r3","r4") }{\cf20 // NOLINT(hicpp-no-assembler)}\par
449 {\cf21 #else}\par
450 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("brk #0"); }{\cf20 // NOLINT(hicpp-no-assembler)}\par
451 {\cf21 #endif}\par
452 {\cf21 #elif DOCTEST_MSVC}\par
453 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __debugbreak()}\par
454 {\cf21 #elif defined(__MINGW32__)}\par
455 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wredundant-decls"})\par
456 extern "C" __declspec(dllimport) {\cf18 void} __stdcall DebugBreak();\par
457 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
458 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() ::DebugBreak()}\par
459 {\cf21 #else }{\cf20 // linux}\par
460 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() (static_cast<void>(0))}\par
461 {\cf21 #endif }{\cf20 // linux}\par
462 {\cf21 #endif }{\cf20 // DOCTEST_BREAK_INTO_DEBUGGER}\par
463 \par
464 {\cf20 // this is kept here for backwards compatibility since the config option was changed}\par
465 {\cf21 #ifdef DOCTEST_CONFIG_USE_IOSFWD}\par
466 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
467 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
468 {\cf21 #endif}\par
469 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_IOSFWD}\par
470 \par
471 {\cf20 // for clang - always include ciso646 (which drags some std stuff) because}\par
472 {\cf20 // we want to check if we are using libc++ with the _LIBCPP_VERSION macro in}\par
473 {\cf20 // which case we don't want to forward declare stuff from std - for reference:}\par
474 {\cf20 // https://github.com/doctest/doctest/issues/126}\par
475 {\cf20 // https://github.com/doctest/doctest/issues/356}\par
476 {\cf21 #if DOCTEST_CLANG}\par
477 {\cf21 #include <ciso646>}\par
478 {\cf21 #ifdef _LIBCPP_VERSION}\par
479 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
480 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
481 {\cf21 #endif}\par
482 {\cf21 #endif }{\cf20 // _LIBCPP_VERSION}\par
483 {\cf21 #endif }{\cf20 // clang}\par
484 \par
485 {\cf21 #ifdef DOCTEST_CONFIG_USE_STD_HEADERS}\par
486 {\cf21 #ifndef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
487 {\cf21 #define DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
488 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
489 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
490 {\cf21 #include <cstddef>}\par
491 {\cf21 #include <ostream>}\par
492 {\cf21 #include <istream>}\par
493 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
494 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
495 \par
496 {\cf20 // Forward declaring 'X' in namespace std is not permitted by the C++ Standard.}\par
497 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)\par
498 \par
499 namespace std \{ {\cf20 // NOLINT(cert-dcl58-cpp)}\par
500 {\cf17 typedef} {\cf17 decltype}({\cf17 nullptr}) nullptr_t; {\cf20 // NOLINT(modernize-use-using)}\par
501 {\cf17 typedef} {\cf17 decltype}({\cf17 sizeof}({\cf18 void}*)) size_t; {\cf20 // NOLINT(modernize-use-using)}\par
502 {\cf17 template} <{\cf17 class} {\cf18 char}T>\par
503 {\cf17 struct }char_traits;\par
504 {\cf17 template} <>\par
505 {\cf17 struct }char_traits<char>;\par
506 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
507 {\cf17 class }basic_ostream; {\cf20 // NOLINT(fuchsia-virtual-inheritance)}\par
508 {\cf17 typedef} basic_ostream<char, char_traits<char>> ostream; {\cf20 // NOLINT(modernize-use-using)}\par
509 {\cf17 template}<{\cf17 class} traits>\par
510 {\cf20 // NOLINTNEXTLINE}\par
511 basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>&, {\cf17 const} {\cf18 char}*);\par
512 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
513 {\cf17 class }basic_istream;\par
514 {\cf17 typedef} basic_istream<char, char_traits<char>> istream; {\cf20 // NOLINT(modernize-use-using)}\par
515 {\cf17 template} <{\cf17 class}... Types>\par
516 {\cf17 class }tuple;\par
517 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
518 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
519 {\cf17 template} <{\cf17 class} Ty>\par
520 {\cf17 class }allocator;\par
521 {\cf17 template} <{\cf17 class} Elem, {\cf17 class} Traits, {\cf17 class} Alloc>\par
522 {\cf17 class }basic_string;\par
523 {\cf17 using }string = basic_string<char, char_traits<char>, allocator<char>>;\par
524 {\cf21 #endif }{\cf20 // VS 2019}\par
525 \} {\cf20 // namespace std}\par
526 \par
527 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
528 \par
529 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
530 \par
531 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
532 {\cf21 #include <type_traits>}\par
533 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
534 \par
535 {\cf17 namespace }doctest \{\par
536 \par
537 {\cf17 using }std::size_t;\par
538 \par
539 DOCTEST_INTERFACE {\cf17 extern} {\cf18 bool} is_running_in_test;\par
540 \par
541 {\cf21 #ifndef DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
542 {\cf21 #define DOCTEST_CONFIG_STRING_SIZE_TYPE unsigned}\par
543 {\cf21 #endif}\par
544 \par
545 {\cf20 // A 24 byte string class (can be as small as 17 for x64 and 13 for x86) that can hold strings with length}\par
546 {\cf20 // of up to 23 chars on the stack before going on the heap - the last byte of the buffer is used for:}\par
547 {\cf20 // - "is small" bit - the highest bit - if "0" then it is small - otherwise its "1" (128)}\par
548 {\cf20 // - if small - capacity left before going on the heap - using the lowest 5 bits}\par
549 {\cf20 // - if small - 2 bits are left unused - the second and third highest ones}\par
550 {\cf20 // - if small - acts as a null terminator if strlen() is 23 (24 including the null terminator)}\par
551 {\cf20 //              and the "is small" bit remains "0" ("as well as the capacity left") so its OK}\par
552 {\cf20 // Idea taken from this lecture about the string implementation of facebook/folly - fbstring}\par
553 {\cf20 // https://www.youtube.com/watch?v=kPR8h4-qZdk}\par
554 {\cf20 // TODO:}\par
555 {\cf20 // - optimizations - like not deleting memory unnecessarily in operator= and etc.}\par
556 {\cf20 // - resize/reserve/clear}\par
557 {\cf20 // - replace}\par
558 {\cf20 // - back/front}\par
559 {\cf20 // - iterator stuff}\par
560 {\cf20 // - find & friends}\par
561 {\cf20 // - push_back/pop_back}\par
562 {\cf20 // - assign/insert/erase}\par
563 {\cf20 // - relational operators as free functions - taking const char* as one of the params}\par
564 {\cf17 class }DOCTEST_INTERFACE String\par
565 \{\par
566 {\cf17 public}:\par
567     {\cf17 using }size_type = DOCTEST_CONFIG_STRING_SIZE_TYPE;\par
568 \par
569 {\cf17 private}:\par
570     {\cf17 static} DOCTEST_CONSTEXPR size_type len  = 24;      \par
571     {\cf17 static} DOCTEST_CONSTEXPR size_type last = len - 1; \par
572 \par
573     {\cf17 struct }view {\cf20 // len should be more than sizeof(view) - because of the final byte for flags}\par
574     \{\par
575         {\cf18 char}*    ptr;\par
576         size_type size;\par
577         size_type capacity;\par
578     \};\par
579 \par
580     {\cf17 union}\par
581     \{\par
582         {\cf18 char} buf[len]; {\cf20 // NOLINT(*-avoid-c-arrays)}\par
583         view data;\par
584     \};\par
585 \par
586     {\cf18 char}* allocate(size_type sz);\par
587 \par
588     {\cf18 bool} isOnStack() const noexcept \{ {\cf19 return} (buf[last] & 128) == 0; \}\par
589     {\cf18 void} setOnHeap() noexcept;\par
590     {\cf18 void} setLast(size_type in = last) noexcept;\par
591     {\cf18 void} setSize(size_type sz) noexcept;\par
592 \par
593     {\cf18 void} copy(const String& other);\par
594 \par
595 public:\par
596     static DOCTEST_CONSTEXPR size_type npos = static_cast<size_type>(-1);\par
597 \par
598     String() noexcept;\par
599     ~String();\par
600 \par
601     {\cf20 // cppcheck-suppress noExplicitConstructor}\par
602     String(const {\cf18 char}* in);\par
603     String(const {\cf18 char}* in, size_type in_size);\par
604 \par
605     String(std::istream& in, size_type in_size);\par
606 \par
607     String(const String& other);\par
608     String& operator=(const String& other);\par
609 \par
610     String& operator+=(const String& other);\par
611 \par
612     String(String&& other) noexcept;\par
613     String& operator=(String&& other) noexcept;\par
614 \par
615     {\cf18 char}  operator[](size_type i) const;\par
616     {\cf18 char}& operator[](size_type i);\par
617 \par
618     {\cf20 // the only functions I'm willing to leave in the interface - available for inlining}\par
619     const {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
620     {\cf18 char}*       c_str() \{\par
621         {\cf19 if} (isOnStack()) \{\par
622             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
623         \}\par
624         {\cf19 return} data.ptr;\par
625     \}\par
626 \par
627     size_type size() {\cf17 const};\par
628     size_type capacity() {\cf17 const};\par
629 \par
630     String substr(size_type pos, size_type cnt = npos) &&;\par
631     String substr(size_type pos, size_type cnt = npos) {\cf17 const} &;\par
632 \par
633     size_type find({\cf18 char} ch, size_type pos = 0) {\cf17 const};\par
634     size_type rfind({\cf18 char} ch, size_type pos = npos) {\cf17 const};\par
635 \par
636     {\cf18 int} compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
637     {\cf18 int} compare({\cf17 const} String& other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
638 \par
639 {\cf17 friend} DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in);\par
640 \};\par
641 \par
642 DOCTEST_INTERFACE String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
643 \par
644 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
645 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
646 DOCTEST_INTERFACE {\cf18 bool} operator<({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
647 DOCTEST_INTERFACE {\cf18 bool} operator>({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
648 DOCTEST_INTERFACE {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
649 DOCTEST_INTERFACE {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
650 \par
651 {\cf17 class }DOCTEST_INTERFACE Contains \{\par
652 {\cf17 public}:\par
653     {\cf17 explicit} Contains({\cf17 const} String& {\cf18 string});\par
654 \par
655     {\cf18 bool} checkWith({\cf17 const} String& other) {\cf17 const};\par
656 \par
657     String string;\par
658 \};\par
659 \par
660 DOCTEST_INTERFACE String toString({\cf17 const} Contains& in);\par
661 \par
662 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
663 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
664 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
665 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
666 \par
667 {\cf17 namespace }Color \{\par
668     {\cf17 enum} Enum\par
669     \{\par
670         None = 0,\par
671         White,\par
672         Red,\par
673         Green,\par
674         Blue,\par
675         Cyan,\par
676         Yellow,\par
677         Grey,\par
678 \par
679         Bright = 0x10,\par
680 \par
681         BrightRed   = Bright | Red,\par
682         BrightGreen = Bright | Green,\par
683         LightGrey   = Bright | Grey,\par
684         BrightWhite = Bright | White\par
685     \};\par
686 \par
687     DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, Color::Enum code);\par
688 \} {\cf20 // namespace Color}\par
689 \par
690 {\cf17 namespace }assertType \{\par
691     {\cf17 enum} Enum\par
692     \{\par
693         {\cf20 // macro traits}\par
694 \par
695         is_warn    = 1,\par
696         is_check   = 2 * is_warn,\par
697         is_require = 2 * is_check,\par
698 \par
699         is_normal      = 2 * is_require,\par
700         is_throws      = 2 * is_normal,\par
701         is_throws_as   = 2 * is_throws,\par
702         is_throws_with = 2 * is_throws_as,\par
703         is_nothrow     = 2 * is_throws_with,\par
704 \par
705         is_false = 2 * is_nothrow,\par
706         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
707 \par
708         is_eq = 2 * is_unary,\par
709         is_ne = 2 * is_eq,\par
710 \par
711         is_lt = 2 * is_ne,\par
712         is_gt = 2 * is_lt,\par
713 \par
714         is_ge = 2 * is_gt,\par
715         is_le = 2 * is_ge,\par
716 \par
717         {\cf20 // macro types}\par
718 \par
719         DT_WARN    = is_normal | is_warn,\par
720         DT_CHECK   = is_normal | is_check,\par
721         DT_REQUIRE = is_normal | is_require,\par
722 \par
723         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
724         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
725         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
726 \par
727         DT_WARN_THROWS    = is_throws | is_warn,\par
728         DT_CHECK_THROWS   = is_throws | is_check,\par
729         DT_REQUIRE_THROWS = is_throws | is_require,\par
730 \par
731         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
732         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
733         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
734 \par
735         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
736         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
737         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
738 \par
739         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
740         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
741         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
742 \par
743         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
744         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
745         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
746 \par
747         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
748         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
749         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
750 \par
751         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
752         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
753         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
754 \par
755         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
756         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
757         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
758 \par
759         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
760         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
761         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
762 \par
763         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
764         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
765         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
766 \par
767         DT_WARN_LE    = is_normal | is_le | is_warn,\par
768         DT_CHECK_LE   = is_normal | is_le | is_check,\par
769         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
770 \par
771         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
772         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
773         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
774 \par
775         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
776         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
777         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
778     \};\par
779 \} {\cf20 // namespace assertType}\par
780 \par
781 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* assertString(assertType::Enum at);\par
782 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* failureString(assertType::Enum at);\par
783 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file);\par
784 \par
785 {\cf17 struct }DOCTEST_INTERFACE TestCaseData\par
786 \{\par
787     String      m_file;       {\cf20 // the file in which the test was registered (using String - see #350)}\par
788     {\cf18 unsigned}    m_line;       {\cf20 // the line where the test was registered}\par
789     {\cf17 const} {\cf18 char}* m_name;       {\cf20 // name of the test case}\par
790     {\cf17 const} {\cf18 char}* m_test_suite; {\cf20 // the test suite in which the test was added}\par
791     {\cf17 const} {\cf18 char}* m_description;\par
792     {\cf18 bool}        m_skip;\par
793     {\cf18 bool}        m_no_breaks;\par
794     {\cf18 bool}        m_no_output;\par
795     {\cf18 bool}        m_may_fail;\par
796     {\cf18 bool}        m_should_fail;\par
797     {\cf18 int}         m_expected_failures;\par
798     {\cf18 double}      m_timeout;\par
799 \};\par
800 \par
801 {\cf17 struct }DOCTEST_INTERFACE AssertData\par
802 \{\par
803     {\cf20 // common - for all asserts}\par
804     {\cf17 const} TestCaseData* m_test_case;\par
805     assertType::Enum    m_at;\par
806     {\cf17 const} {\cf18 char}*         m_file;\par
807     {\cf18 int}                 m_line;\par
808     {\cf17 const} {\cf18 char}*         m_expr;\par
809     {\cf18 bool}                m_failed;\par
810 \par
811     {\cf20 // exception-related - for all asserts}\par
812     {\cf18 bool}   m_threw;\par
813     String m_exception;\par
814 \par
815     {\cf20 // for normal asserts}\par
816     String m_decomp;\par
817 \par
818     {\cf20 // for specific exception-related asserts}\par
819     {\cf18 bool}           m_threw_as;\par
820     {\cf17 const} {\cf18 char}*    m_exception_type;\par
821 \par
822     {\cf17 class }DOCTEST_INTERFACE StringContains \{\par
823         {\cf17 private}:\par
824             Contains content;\par
825             {\cf18 bool} isContains;\par
826 \par
827         {\cf17 public}:\par
828             StringContains({\cf17 const} String& str) : content(str), isContains(false) \{ \}\par
829             StringContains(Contains cntn) : content(static_cast<Contains&&>(cntn)), isContains(true) \{ \}\par
830 \par
831             {\cf18 bool} check({\cf17 const} String& str) \{ {\cf19 return} isContains ? (content == str) : (content.string == str); \}\par
832 \par
833             {\cf17 operator} {\cf17 const} String&() {\cf17 const} \{ {\cf19 return} content.string; \}\par
834 \par
835             {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} content.string.c_str(); \}\par
836     \} m_exception_string;\par
837 \par
838     AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
839         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string);\par
840 \};\par
841 \par
842 {\cf17 struct }DOCTEST_INTERFACE MessageData\par
843 \{\par
844     String           m_string;\par
845     {\cf17 const} {\cf18 char}*      m_file;\par
846     {\cf18 int}              m_line;\par
847     assertType::Enum m_severity;\par
848 \};\par
849 \par
850 {\cf17 struct }DOCTEST_INTERFACE SubcaseSignature\par
851 \{\par
852     String      m_name;\par
853     {\cf17 const} {\cf18 char}* m_file;\par
854     {\cf18 int}         m_line;\par
855 \par
856     {\cf18 bool} operator==({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
857     {\cf18 bool} operator<({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
858 \};\par
859 \par
860 {\cf17 struct }DOCTEST_INTERFACE IContextScope\par
861 \{\par
862     DOCTEST_DECLARE_INTERFACE(IContextScope)\par
863     virtual {\cf18 void} stringify(std::ostream*) const = 0;\par
864 \};\par
865 \par
866 namespace detail \{\par
867     {\cf17 struct }DOCTEST_INTERFACE TestCase;\par
868 \} {\cf20 // namespace detail}\par
869 \par
870 {\cf17 struct }ContextOptions \par
871 \{\par
872     std::ostream* cout = {\cf17 nullptr}; {\cf20 // stdout stream}\par
873     String        binary_name;    {\cf20 // the test binary name}\par
874 \par
875     {\cf17 const} detail::TestCase* currentTest = {\cf17 nullptr};\par
876 \par
877     {\cf20 // == parameters from the command line}\par
878     String   out;       {\cf20 // output filename}\par
879     String   order_by;  {\cf20 // how tests should be ordered}\par
880     {\cf18 unsigned} rand_seed; {\cf20 // the seed for rand ordering}\par
881 \par
882     {\cf18 unsigned} first; {\cf20 // the first (matching) test to be executed}\par
883     {\cf18 unsigned} last;  {\cf20 // the last (matching) test to be executed}\par
884 \par
885     {\cf18 int} abort_after;           {\cf20 // stop tests after this many failed assertions}\par
886     {\cf18 int} subcase_filter_levels; {\cf20 // apply the subcase filters for the first N levels}\par
887 \par
888     {\cf18 bool} success;              {\cf20 // include successful assertions in output}\par
889     {\cf18 bool} case_sensitive;       {\cf20 // if filtering should be case sensitive}\par
890     {\cf18 bool} exit;                 {\cf20 // if the program should be exited after the tests are ran/whatever}\par
891     {\cf18 bool} duration;             {\cf20 // print the time duration of each test case}\par
892     {\cf18 bool} minimal;              {\cf20 // minimal console output (only test failures)}\par
893     {\cf18 bool} quiet;                {\cf20 // no console output}\par
894     {\cf18 bool} no_throw;             {\cf20 // to skip exceptions-related assertion macros}\par
895     {\cf18 bool} no_exitcode;          {\cf20 // if the framework should return 0 as the exitcode}\par
896     {\cf18 bool} no_run;               {\cf20 // to not run the tests at all (can be done with an "*" exclude)}\par
897     {\cf18 bool} no_intro;             {\cf20 // to not print the intro of the framework}\par
898     {\cf18 bool} no_version;           {\cf20 // to not print the version of the framework}\par
899     {\cf18 bool} no_colors;            {\cf20 // if output to the console should be colorized}\par
900     {\cf18 bool} force_colors;         {\cf20 // forces the use of colors even when a tty cannot be detected}\par
901     {\cf18 bool} no_breaks;            {\cf20 // to not break into the debugger}\par
902     {\cf18 bool} no_skip;              {\cf20 // don't skip test cases which are marked to be skipped}\par
903     {\cf18 bool} gnu_file_line;        {\cf20 // if line numbers should be surrounded with :x: and not (x):}\par
904     {\cf18 bool} no_path_in_filenames; {\cf20 // if the path to files should be removed from the output}\par
905     {\cf18 bool} no_line_numbers;      {\cf20 // if source code line numbers should be omitted from the output}\par
906     {\cf18 bool} no_debug_output;      {\cf20 // no output in the debug console when a debugger is attached}\par
907     {\cf18 bool} no_skipped_summary;   {\cf20 // don't print "skipped" in the summary !!! UNDOCUMENTED !!!}\par
908     {\cf18 bool} no_time_in_output;    {\cf20 // omit any time/timestamps from output !!! UNDOCUMENTED !!!}\par
909 \par
910     {\cf18 bool} help;             {\cf20 // to print the help}\par
911     {\cf18 bool} version;          {\cf20 // to print the version}\par
912     {\cf18 bool} count;            {\cf20 // if only the count of matching tests is to be retrieved}\par
913     {\cf18 bool} list_test_cases;  {\cf20 // to list all tests matching the filters}\par
914     {\cf18 bool} list_test_suites; {\cf20 // to list all suites matching the filters}\par
915     {\cf18 bool} list_reporters;   {\cf20 // lists all registered reporters}\par
916 \};\par
917 \par
918 {\cf17 namespace }detail \{\par
919     {\cf17 namespace }types \{\par
920 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
921         {\cf17 using namespace }std;\par
922 {\cf21 #else}\par
923         {\cf17 template} <{\cf18 bool} COND, {\cf17 typename} T = {\cf18 void}>\par
924         {\cf17 struct }enable_if \{ \};\par
925 \par
926         {\cf17 template} <{\cf17 typename} T>\par
927         {\cf17 struct }enable_if<true, T> \{ {\cf17 using }type = T; \};\par
928 \par
929         {\cf17 struct }true_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 true}; \};\par
930         {\cf17 struct }false_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 false}; \};\par
931 \par
932         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference \{ {\cf17 using }type = T; \};\par
933         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&> \{ {\cf17 using }type = T; \};\par
934         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&&> \{ {\cf17 using }type = T; \};\par
935 \par
936         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference : false_type \{ \};\par
937         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference<T&&> : true_type \{ \};\par
938 \par
939         {\cf17 template}<{\cf17 typename} T> {\cf17 struct }remove_const \{ {\cf17 using }type = T; \};\par
940         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_const<const T> \{ {\cf17 using }type = T; \};\par
941 \par
942         {\cf20 // Compiler intrinsics}\par
943         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_enum \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = __is_enum(T); \};\par
944         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }underlying_type \{ {\cf17 using }type = __underlying_type(T); \};\par
945 \par
946         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer : false_type \{ \};\par
947         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer<T*> : true_type \{ \};\par
948 \par
949         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_array : false_type \{ \};\par
950         {\cf20 // NOLINTNEXTLINE(*-avoid-c-arrays)}\par
951         {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} SIZE> {\cf17 struct }is_array<T[SIZE]> : true_type \{ \};\par
952 {\cf21 #endif}\par
953     \}\par
954 \par
955     {\cf20 // <utility>}\par
956     {\cf17 template} <{\cf17 typename} T>\par
957     T&& declval();\par
958 \par
959     {\cf17 template} <{\cf17 class} T>\par
960     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type& t) DOCTEST_NOEXCEPT \{\par
961         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
962     \}\par
963 \par
964     {\cf17 template} <{\cf17 class} T>\par
965     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type&& t) DOCTEST_NOEXCEPT \{\par
966         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
967     \}\par
968 \par
969     {\cf17 template} <{\cf17 typename} T>\par
970     {\cf17 struct }deferred_false : types::false_type \{ \};\par
971 \par
972 {\cf20 // MSVS 2015 :(}\par
973 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
974     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
975     {\cf17 struct }has_global_insertion_operator : types::false_type \{ \};\par
976 \par
977     {\cf17 template} <{\cf17 typename} T>\par
978     {\cf17 struct }has_global_insertion_operator<T, decltype(::operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
979 \par
980     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
981     {\cf17 struct }has_insertion_operator \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = has_global_insertion_operator<T>::value; \};\par
982 \par
983     {\cf17 template} <{\cf17 typename} T, {\cf18 bool} global>\par
984     {\cf17 struct }insert_hack;\par
985 \par
986     {\cf17 template} <{\cf17 typename} T>\par
987     {\cf17 struct }insert_hack<T, true> \{\par
988         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ ::operator<<(os, t); \}\par
989     \};\par
990 \par
991     {\cf17 template} <{\cf17 typename} T>\par
992     {\cf17 struct }insert_hack<T, false> \{\par
993         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ operator<<(os, t); \}\par
994     \};\par
995 \par
996     {\cf17 template} <{\cf17 typename} T>\par
997     {\cf17 using }insert_hack_t = insert_hack<T, has_global_insertion_operator<T>::value>;\par
998 {\cf21 #else}\par
999     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
1000     {\cf17 struct }has_insertion_operator : types::false_type \{ \};\par
1001 {\cf21 #endif}\par
1002 \par
1003 {\cf17 template} <{\cf17 typename} T>\par
1004 {\cf17 struct }has_insertion_operator<T, decltype(operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
1005 \par
1006     DOCTEST_INTERFACE std::ostream* tlssPush();\par
1007     DOCTEST_INTERFACE String tlssPop();\par
1008 \par
1009     {\cf17 template} <{\cf18 bool} C>\par
1010     {\cf17 struct }StringMakerBase \{\par
1011         {\cf17 template} <{\cf17 typename} T>\par
1012         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T)) \{\par
1013 {\cf21 #ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES}\par
1014             {\cf17 static_assert}(deferred_false<T>::value, {\cf22 "No stringification detected for type T. See string conversion manual"});\par
1015 {\cf21 #endif}\par
1016             {\cf19 return} {\cf22 "\{?\}"};\par
1017         \}\par
1018     \};\par
1019 \par
1020     {\cf17 template} <{\cf17 typename} T>\par
1021     {\cf17 struct }filldata;\par
1022 \par
1023     {\cf17 template} <{\cf17 typename} T>\par
1024     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T& in) \{\par
1025         filldata<T>::fill(stream, in);\par
1026     \}\par
1027 \par
1028     {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
1029     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T (&in)[N]) \{ {\cf20 // NOLINT(*-avoid-c-arrays)}\par
1030         {\cf20 // T[N], T(&)[N], T(&&)[N] have same behaviour.}\par
1031         {\cf20 // Hence remove reference.}\par
1032         filloss<{\cf17 typename} types::remove_reference<{\cf17 decltype}(in)>::type>(stream, in);\par
1033     \}\par
1034 \par
1035     {\cf17 template} <{\cf17 typename} T>\par
1036     String toStream({\cf17 const} T& in) \{\par
1037         std::ostream* stream = tlssPush();\par
1038         filloss(stream, in);\par
1039         {\cf19 return} tlssPop();\par
1040     \}\par
1041 \par
1042     {\cf17 template} <>\par
1043     {\cf17 struct }StringMakerBase<true> \{\par
1044         {\cf17 template} <{\cf17 typename} T>\par
1045         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T) in) \{\par
1046             {\cf19 return} toStream(in);\par
1047         \}\par
1048     \};\par
1049 \} {\cf20 // namespace detail}\par
1050 \par
1051 {\cf17 template} <{\cf17 typename} T>\par
1052 {\cf17 struct }StringMaker : {\cf17 public} detail::StringMakerBase<\par
1053     detail::has_insertion_operator<T>::value || detail::types::is_pointer<T>::value || detail::types::is_array<T>::value>\par
1054 \{\};\par
1055 \par
1056 {\cf21 #ifndef DOCTEST_STRINGIFY}\par
1057 {\cf21 #ifdef DOCTEST_CONFIG_DOUBLE_STRINGIFY}\par
1058 {\cf21 #define DOCTEST_STRINGIFY(...) toString(toString(__VA_ARGS__))}\par
1059 {\cf21 #else}\par
1060 {\cf21 #define DOCTEST_STRINGIFY(...) toString(__VA_ARGS__)}\par
1061 {\cf21 #endif}\par
1062 {\cf21 #endif}\par
1063 \par
1064 {\cf17 template} <{\cf17 typename} T>\par
1065 String toString() \{\par
1066 {\cf21 #if DOCTEST_MSVC >= 0 && DOCTEST_CLANG == 0 && DOCTEST_GCC == 0}\par
1067     String ret = __FUNCSIG__; {\cf20 // class doctest::String __cdecl doctest::toString<TYPE>(void)}\par
1068     String::size_type beginPos = ret.find({\cf23 '<'});\par
1069     {\cf19 return} ret.substr(beginPos + 1, ret.size() - beginPos - {\cf17 static_cast<}String::size_type{\cf17 >}({\cf17 sizeof}({\cf22 ">(void)"})));\par
1070 {\cf21 #else}\par
1071     String ret = __PRETTY_FUNCTION__; {\cf20 // doctest::String toString() [with T = TYPE]}\par
1072     String::size_type begin = ret.find({\cf23 '='}) + 2;\par
1073     {\cf19 return} ret.substr(begin, ret.size() - begin - 1);\par
1074 {\cf21 #endif}\par
1075 \}\par
1076 \par
1077 template <typename T, typename detail::types::enable_if<!detail::types::is_enum<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1078 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1079     {\cf19 return} StringMaker<T>::convert(value);\par
1080 \}\par
1081 \par
1082 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1083 DOCTEST_INTERFACE String toString({\cf17 const} {\cf18 char}* in);\par
1084 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1085 \par
1086 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
1087 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
1088 DOCTEST_INTERFACE String toString({\cf17 const} std::string& in);\par
1089 {\cf21 #endif }{\cf20 // VS 2019}\par
1090 \par
1091 DOCTEST_INTERFACE String toString(String in);\par
1092 \par
1093 DOCTEST_INTERFACE String toString(std::nullptr_t);\par
1094 \par
1095 DOCTEST_INTERFACE String toString({\cf18 bool} in);\par
1096 \par
1097 DOCTEST_INTERFACE String toString({\cf18 float} in);\par
1098 DOCTEST_INTERFACE String toString({\cf18 double} in);\par
1099 DOCTEST_INTERFACE String toString({\cf18 double} {\cf18 long} in);\par
1100 \par
1101 DOCTEST_INTERFACE String toString({\cf18 char} in);\par
1102 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 signed} in);\par
1103 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 unsigned} in);\par
1104 DOCTEST_INTERFACE String toString({\cf18 short} in);\par
1105 DOCTEST_INTERFACE String toString({\cf18 short} {\cf18 unsigned} in);\par
1106 DOCTEST_INTERFACE String toString({\cf18 signed} in);\par
1107 DOCTEST_INTERFACE String toString({\cf18 unsigned} in);\par
1108 DOCTEST_INTERFACE String toString({\cf18 long} in);\par
1109 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 unsigned} in);\par
1110 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} in);\par
1111 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in);\par
1112 \par
1113 template <typename T, typename detail::types::enable_if<detail::types::is_enum<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1114 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1115     {\cf17 using }UT = {\cf17 typename} detail::types::underlying_type<T>::type;\par
1116     {\cf19 return} (DOCTEST_STRINGIFY({\cf17 static_cast<}UT{\cf17 >}(value)));\par
1117 \}\par
1118 \par
1119 {\cf17 namespace }detail \{\par
1120     {\cf17 template} <{\cf17 typename} T>\par
1121     {\cf17 struct }filldata\par
1122     \{\par
1123         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T& in) \{\par
1124 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
1125         insert_hack_t<T>::insert(*stream, in);\par
1126 {\cf21 #else}\par
1127         operator<<(*stream, in);\par
1128 {\cf21 #endif}\par
1129         \}\par
1130     \};\par
1131 \par
1132 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1133 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1134     template <typename T, {\cf18 size_t} N>\par
1135     struct filldata<T[N]> \{\par
1136         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T(&in)[N]) \{\par
1137             *stream << {\cf22 "["};\par
1138             {\cf19 for} ({\cf18 size_t} i = 0; i < N; i++) \{\par
1139                 {\cf19 if} (i != 0) \{ *stream << {\cf22 ", "}; \}\par
1140                 *stream << (DOCTEST_STRINGIFY(in[i]));\par
1141             \}\par
1142             *stream << {\cf22 "]"};\par
1143         \}\par
1144     \};\par
1145 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1146 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1147 \par
1148     {\cf20 // Specialized since we don't want the terminating null byte!}\par
1149 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1150     {\cf17 template} <{\cf18 size_t} N>\par
1151     {\cf17 struct }filldata<const char[N]> \{\par
1152         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 char} (&in)[N]) \{\par
1153             *stream << String(in, in[N - 1] ? N : N - 1);\par
1154         \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
1155     \};\par
1156 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1157 \par
1158     {\cf17 template} <>\par
1159     {\cf17 struct }filldata<const void*> \{\par
1160         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in);\par
1161     \};\par
1162 \par
1163     {\cf17 template} <{\cf17 typename} T>\par
1164     {\cf17 struct }filldata<T*> \{\par
1165         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T* in) \{\par
1166             filldata<const void*>::fill(stream, in);\par
1167         \}\par
1168     \};\par
1169 \}\par
1170 \par
1171 {\cf17 struct }DOCTEST_INTERFACE Approx\par
1172 \{\par
1173     Approx({\cf18 double} value);\par
1174 \par
1175     Approx operator()({\cf18 double} value) {\cf17 const};\par
1176 \par
1177 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1178     {\cf17 template} <{\cf17 typename} T>\par
1179     {\cf17 explicit} Approx({\cf17 const} T& value,\par
1180                     {\cf17 typename} detail::types::enable_if<std::is_constructible<double, T>::value>::type* =\par
1181                             {\cf17 static_cast<}T*{\cf17 >}({\cf17 nullptr})) \{\par
1182         *{\cf17 this} = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(value);\par
1183     \}\par
1184 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1185 \par
1186     Approx& epsilon({\cf18 double} newEpsilon);\par
1187 \par
1188 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1189     {\cf17 template} <{\cf17 typename} T>\par
1190     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type epsilon(\par
1191             {\cf17 const} T& newEpsilon) \{\par
1192         m_epsilon = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newEpsilon);\par
1193         {\cf19 return} *{\cf17 this};\par
1194     \}\par
1195 {\cf21 #endif }{\cf20 //  DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1196 \par
1197     Approx& scale({\cf18 double} newScale);\par
1198 \par
1199 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1200     {\cf17 template} <{\cf17 typename} T>\par
1201     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type scale(\par
1202             {\cf17 const} T& newScale) \{\par
1203         m_scale = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newScale);\par
1204         {\cf19 return} *{\cf17 this};\par
1205     \}\par
1206 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1207 \par
1208     {\cf20 // clang-format off}\par
1209     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1210     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1211     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1212     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1213     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1214     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1215     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1216     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1217     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1218     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1219     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1220     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1221 \par
1222 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1223 {\cf21 #define DOCTEST_APPROX_PREFIX \\}\par
1224 {\cf21     template <typename T> friend typename std::enable_if<std::is_constructible<double, T>::value, bool>::type}\par
1225 \par
1226     DOCTEST_APPROX_PREFIX operator==({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} operator==({\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs), rhs); \}\par
1227     DOCTEST_APPROX_PREFIX operator==({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
1228     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
1229     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
1230     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value || lhs == rhs; \}\par
1231     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1232     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value || lhs == rhs; \}\par
1233     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1234     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value && lhs != rhs; \}\par
1235     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1236     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value && lhs != rhs; \}\par
1237     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1238 {\cf21 #undef DOCTEST_APPROX_PREFIX}\par
1239 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1240 \par
1241     {\cf20 // clang-format on}\par
1242 \par
1243     {\cf18 double} m_epsilon;\par
1244     {\cf18 double} m_scale;\par
1245     {\cf18 double} m_value;\par
1246 \};\par
1247 \par
1248 DOCTEST_INTERFACE String toString({\cf17 const} Approx& in);\par
1249 \par
1250 DOCTEST_INTERFACE {\cf17 const} ContextOptions* getContextOptions();\par
1251 \par
1252 {\cf17 template} <{\cf17 typename} F>\par
1253 {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN\par
1254 \{\par
1255     F value; {\cf18 bool} flipped;\par
1256     IsNaN(F f, {\cf18 bool} flip = {\cf17 false}) : value(f), flipped(flip) \{ \}\par
1257     IsNaN<F> operator!(){\cf17  const }\{ {\cf19 return} \{ value, !flipped \}; \}\par
1258     {\cf17 operator} bool() {\cf17 const};\par
1259 \};\par
1260 {\cf21 #ifndef __MINGW32__}\par
1261 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<float>;\par
1262 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<double>;\par
1263 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<long double>;\par
1264 {\cf21 #endif}\par
1265 DOCTEST_INTERFACE String toString(IsNaN<float> in);\par
1266 DOCTEST_INTERFACE String toString(IsNaN<double> in);\par
1267 DOCTEST_INTERFACE String toString(IsNaN<double long> in);\par
1268 \par
1269 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
1270 \par
1271 {\cf17 namespace }detail \{\par
1272     {\cf20 // clang-format off}\par
1273 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1274     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array       \{ {\cf17 using }type = T; \};\par
1275     {\cf17 template}<{\cf17 class} T, {\cf18 unsigned} N>   {\cf17 struct }decay_array<T[N]> \{ {\cf17 using }type = T*; \};\par
1276     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array<T[]>  \{ {\cf17 using }type = T*; \};\par
1277 \par
1278     {\cf17 template}<{\cf17 class} T>   {\cf17 struct }not_char_pointer              \{ {\cf17 static} DOCTEST_CONSTEXPR value = 1; \};\par
1279     {\cf17 template}<>          {\cf17 struct }not_char_pointer<char*>       \{ {\cf17 static} DOCTEST_CONSTEXPR value = 0; \};\par
1280     {\cf17 template}<>          {\cf17 struct }not_char_pointer<const char*> \{ {\cf17 static} DOCTEST_CONSTEXPR value = 0; \};\par
1281 \par
1282     {\cf17 template}<{\cf17 class} T> {\cf17 struct }can_use_op : {\cf17 public} not_char_pointer<typename decay_array<T>::type> \{\};\par
1283 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1284     {\cf20 // clang-format on}\par
1285 \par
1286     {\cf17 struct }DOCTEST_INTERFACE TestFailureException\par
1287     \{\par
1288     \};\par
1289 \par
1290     DOCTEST_INTERFACE {\cf18 bool} checkIfShouldThrow(assertType::Enum at);\par
1291 \par
1292 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1293     DOCTEST_NORETURN\par
1294 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1295     DOCTEST_INTERFACE {\cf18 void} throwException();\par
1296 \par
1297     {\cf17 struct }DOCTEST_INTERFACE Subcase\par
1298     \{\par
1299         SubcaseSignature m_signature;\par
1300         {\cf18 bool}             m_entered = {\cf17 false};\par
1301 \par
1302         Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
1303         Subcase({\cf17 const} Subcase&) = {\cf17 delete};\par
1304         Subcase(Subcase&&) = {\cf17 delete};\par
1305         Subcase& operator=({\cf17 const} Subcase&) = {\cf17 delete};\par
1306         Subcase& operator=(Subcase&&) = {\cf17 delete};\par
1307         ~Subcase();\par
1308 \par
1309         {\cf17 operator} bool() {\cf17 const};\par
1310 \par
1311         {\cf17 private}:\par
1312             {\cf18 bool} checkFilters();\par
1313     \};\par
1314 \par
1315     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>\par
1316     String stringifyBinaryExpr({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} {\cf18 char}* op,\par
1317                                {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1318         {\cf19 return} (DOCTEST_STRINGIFY(lhs)) + op + (DOCTEST_STRINGIFY(rhs));\par
1319     \}\par
1320 \par
1321 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1322 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-comparison"})\par
1323 {\cf21 #endif}\par
1324 \par
1325 {\cf20 // This will check if there is any way it could find a operator like member or friend and uses it.}\par
1326 {\cf20 // If not it doesn't find the operator or if the operator at global scope is defined after}\par
1327 {\cf20 // this template, the template won't be instantiated due to SFINAE. Once the template is not}\par
1328 {\cf20 // instantiated it can look for global operator using normal conversions.}\par
1329 {\cf21 #define SFINAE_OP(ret,op) decltype((void)(doctest::detail::declval<L>() op doctest::detail::declval<R>()),ret\{\})}\par
1330 \par
1331 {\cf21 #define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op, op_str, op_macro)                              \\}\par
1332 {\cf21     template <typename R>                                                                          \\}\par
1333 {\cf21     DOCTEST_NOINLINE SFINAE_OP(Result,op) operator op(R&& rhs) \{                                   \\}\par
1334 {\cf21     bool res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\}\par
1335 {\cf21         if(m_at & assertType::is_false)                                                            \\}\par
1336 {\cf21             res = !res;                                                                            \\}\par
1337 {\cf21         if(!res || doctest::getContextOptions()->success)                                          \\}\par
1338 {\cf21             return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\}\par
1339 {\cf21         return Result(res);                                                                        \\}\par
1340 {\cf21     \}}\par
1341 \par
1342     {\cf20 // more checks could be added - like in Catch:}\par
1343     {\cf20 // https://github.com/catchorg/Catch2/pull/1480/files}\par
1344     {\cf20 // https://github.com/catchorg/Catch2/pull/1481/files}\par
1345 {\cf21 #define DOCTEST_FORBIT_EXPRESSION(rt, op)                                                          \\}\par
1346 {\cf21     template <typename R>                                                                          \\}\par
1347 {\cf21     rt& operator op(const R&) \{                                                                    \\}\par
1348 {\cf21         static_assert(deferred_false<R>::value,                                                    \\}\par
1349 {\cf21                       "Expression Too Complex Please Rewrite As Binary Comparison!");              \\}\par
1350 {\cf21         return *this;                                                                              \\}\par
1351 {\cf21     \}}\par
1352 \par
1353     {\cf17 struct }DOCTEST_INTERFACE Result {\cf20 // NOLINT(*-member-init)}\par
1354     \{\par
1355         {\cf18 bool}   m_passed;\par
1356         String m_decomp;\par
1357 \par
1358         Result() = {\cf19 default}; {\cf20 // TODO: Why do we need this? (To remove NOLINT)}\par
1359         Result({\cf18 bool} passed, {\cf17 const} String& decomposition = String());\par
1360 \par
1361         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1362         DOCTEST_FORBIT_EXPRESSION(Result, &)\par
1363         DOCTEST_FORBIT_EXPRESSION(Result, ^)\par
1364         DOCTEST_FORBIT_EXPRESSION(Result, |)\par
1365         DOCTEST_FORBIT_EXPRESSION(Result, &&)\par
1366         DOCTEST_FORBIT_EXPRESSION(Result, ||)\par
1367         DOCTEST_FORBIT_EXPRESSION(Result, ==)\par
1368         DOCTEST_FORBIT_EXPRESSION(Result, !=)\par
1369         DOCTEST_FORBIT_EXPRESSION(Result, <)\par
1370         DOCTEST_FORBIT_EXPRESSION(Result, >)\par
1371         DOCTEST_FORBIT_EXPRESSION(Result, <=)\par
1372         DOCTEST_FORBIT_EXPRESSION(Result, >=)\par
1373         DOCTEST_FORBIT_EXPRESSION(Result, =)\par
1374         DOCTEST_FORBIT_EXPRESSION(Result, +=)\par
1375         DOCTEST_FORBIT_EXPRESSION(Result, -=)\par
1376         DOCTEST_FORBIT_EXPRESSION(Result, *=)\par
1377         DOCTEST_FORBIT_EXPRESSION(Result, /=)\par
1378         DOCTEST_FORBIT_EXPRESSION(Result, %=)\par
1379         DOCTEST_FORBIT_EXPRESSION(Result, <<=)\par
1380         DOCTEST_FORBIT_EXPRESSION(Result, >>=)\par
1381         DOCTEST_FORBIT_EXPRESSION(Result, &=)\par
1382         DOCTEST_FORBIT_EXPRESSION(Result, ^=)\par
1383         DOCTEST_FORBIT_EXPRESSION(Result, |=)\par
1384     \};\par
1385 \par
1386 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1387 \par
1388     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
1389     DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wsign-conversion"})\par
1390     DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-compare")\par
1391     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1392     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wconversion")}\par
1393     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wfloat-equal")}\par
1394 \par
1395     DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
1396     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
1397     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-compare")\par
1398     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1399     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")}\par
1400     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wfloat-equal")}\par
1401 \par
1402     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
1403     {\cf20 // https://stackoverflow.com/questions/39479163 what's the difference between 4018 and 4389}\par
1404     DOCTEST_MSVC_SUPPRESS_WARNING(4388) {\cf20 // signed/unsigned mismatch}\par
1405     DOCTEST_MSVC_SUPPRESS_WARNING(4389) {\cf20 // 'operator' : signed/unsigned mismatch}\par
1406     DOCTEST_MSVC_SUPPRESS_WARNING(4018) {\cf20 // 'expression' : signed/unsigned mismatch}\par
1407     {\cf20 //DOCTEST_MSVC_SUPPRESS_WARNING(4805) // 'operation' : unsafe mix of type 'type' and type 'type' in operation}\par
1408 \par
1409 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1410 \par
1411     {\cf20 // clang-format off}\par
1412 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1413 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE bool}\par
1414 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1415 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE typename types::enable_if<can_use_op<L>::value || can_use_op<R>::value, bool>::type}\par
1416     {\cf17 inline} {\cf18 bool} eq({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) == String(rhs); \}\par
1417     {\cf17 inline} {\cf18 bool} ne({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) != String(rhs); \}\par
1418     {\cf17 inline} {\cf18 bool} lt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <  String(rhs); \}\par
1419     {\cf17 inline} {\cf18 bool} gt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >  String(rhs); \}\par
1420     {\cf17 inline} {\cf18 bool} le({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <= String(rhs); \}\par
1421     {\cf17 inline} {\cf18 bool} ge({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >= String(rhs); \}\par
1422 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1423     {\cf20 // clang-format on}\par
1424 \par
1425 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
1426 {\cf21     template <typename L, typename R>                                                              \\}\par
1427 {\cf21     DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \\}\par
1428 {\cf21                                         const DOCTEST_REF_WRAP(R) rhs) \{                           \\}\par
1429 {\cf21         return lhs op rhs;                                                                         \\}\par
1430 {\cf21     \}}\par
1431 \par
1432     DOCTEST_RELATIONAL_OP(eq, ==)\par
1433     DOCTEST_RELATIONAL_OP(ne, !=)\par
1434     DOCTEST_RELATIONAL_OP(lt, <)\par
1435     DOCTEST_RELATIONAL_OP(gt, >)\par
1436     DOCTEST_RELATIONAL_OP(le, <=)\par
1437     DOCTEST_RELATIONAL_OP(ge, >=)\par
1438 \par
1439 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1440 {\cf21 #define DOCTEST_CMP_EQ(l, r) l == r}\par
1441 {\cf21 #define DOCTEST_CMP_NE(l, r) l != r}\par
1442 {\cf21 #define DOCTEST_CMP_GT(l, r) l > r}\par
1443 {\cf21 #define DOCTEST_CMP_LT(l, r) l < r}\par
1444 {\cf21 #define DOCTEST_CMP_GE(l, r) l >= r}\par
1445 {\cf21 #define DOCTEST_CMP_LE(l, r) l <= r}\par
1446 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1447 {\cf21 #define DOCTEST_CMP_EQ(l, r) eq(l, r)}\par
1448 {\cf21 #define DOCTEST_CMP_NE(l, r) ne(l, r)}\par
1449 {\cf21 #define DOCTEST_CMP_GT(l, r) gt(l, r)}\par
1450 {\cf21 #define DOCTEST_CMP_LT(l, r) lt(l, r)}\par
1451 {\cf21 #define DOCTEST_CMP_GE(l, r) ge(l, r)}\par
1452 {\cf21 #define DOCTEST_CMP_LE(l, r) le(l, r)}\par
1453 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1454 \par
1455     {\cf17 template} <{\cf17 typename} L>\par
1456     {\cf20 // cppcheck-suppress copyCtorAndEqOperator}\par
1457     {\cf17 struct }Expression_lhs\par
1458     \{\par
1459         L                lhs;\par
1460         assertType::Enum m_at;\par
1461 \par
1462         {\cf17 explicit} Expression_lhs(L&& in, assertType::Enum at)\par
1463                 : lhs(static_cast<L&&>(in))\par
1464                 , m_at(at) \{\}\par
1465 \par
1466         DOCTEST_NOINLINE {\cf17 operator} Result() \{\par
1467 {\cf20 // this is needed only for MSVC 2015}\par
1468 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) {\cf20 // 'int': forcing value to bool}\par
1469             {\cf18 bool} res = {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(lhs);\par
1470 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1471             {\cf19 if}(m_at & assertType::is_false) \{ \par
1472                 res = !res;\par
1473             \}\par
1474 \par
1475             {\cf19 if}(!res || getContextOptions()->success) \{\par
1476                 {\cf19 return} \{ res, (DOCTEST_STRINGIFY(lhs)) \};\par
1477             \}\par
1478             {\cf19 return} \{ res \};\par
1479         \}\par
1480 \par
1481         {\cf20 /* This is required for user-defined conversions from Expression_lhs to L */}\par
1482         {\cf17 operator} L(){\cf17  const }\{ {\cf19 return} lhs; \}\par
1483 \par
1484         {\cf20 // clang-format off}\par
1485         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==, {\cf22 " == "}, DOCTEST_CMP_EQ) \par
1486         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=, {\cf22 " != "}, DOCTEST_CMP_NE) \par
1487         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>,  {\cf22 " >  "}, DOCTEST_CMP_GT) \par
1488         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<,  {\cf22 " <  "}, DOCTEST_CMP_LT) \par
1489         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>=, {\cf22 " >= "}, DOCTEST_CMP_GE) \par
1490         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<=, {\cf22 " <= "}, DOCTEST_CMP_LE) \par
1491         {\cf20 // clang-format on}\par
1492 \par
1493         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1494         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &)\par
1495         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^)\par
1496         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |)\par
1497         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &&)\par
1498         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ||)\par
1499         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, =)\par
1500         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, +=)\par
1501         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, -=)\par
1502         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, *=)\par
1503         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, /=)\par
1504         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, %=)\par
1505         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<=)\par
1506         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>=)\par
1507         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &=)\par
1508         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^=)\par
1509         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |=)\par
1510         {\cf20 // these 2 are unfortunate because they should be allowed - they have higher precedence over the comparisons, but the}\par
1511         {\cf20 // ExpressionDecomposer class uses the left shift operator to capture the left operand of the binary expression...}\par
1512         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<)\par
1513         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>)\par
1514     \};\par
1515 \par
1516 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1517 \par
1518     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1519     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1520     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
1521 \par
1522 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1523 \par
1524 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1525 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1526 {\cf21 #endif}\par
1527 \par
1528     {\cf17 struct }DOCTEST_INTERFACE ExpressionDecomposer\par
1529     \{\par
1530         assertType::Enum m_at;\par
1531 \par
1532         ExpressionDecomposer(assertType::Enum at);\par
1533 \par
1534         {\cf20 // The right operator for capturing expressions is "<=" instead of "<<" (based on the operator precedence table)}\par
1535         {\cf20 // but then there will be warnings from GCC about "-Wparentheses" and since "_Pragma()" is problematic this will stay for now...}\par
1536         {\cf20 // https://github.com/catchorg/Catch2/issues/870}\par
1537         {\cf20 // https://github.com/catchorg/Catch2/issues/565}\par
1538         {\cf17 template} <{\cf17 typename} L>\par
1539         Expression_lhs<L> operator<<(L&& operand) \{\par
1540             {\cf19 return} Expression_lhs<L>({\cf17 static_cast<}L&&{\cf17 >}(operand), m_at);\par
1541         \}\par
1542 \par
1543         template <typename L,typename types::enable_if<!doctest::detail::types::is_rvalue_reference<L>::value,{\cf18 void} >::type* = {\cf17 nullptr}>\par
1544         Expression_lhs<const L&> operator<<({\cf17 const} L &operand) \{\par
1545             {\cf19 return} Expression_lhs<const L&>(operand, m_at);\par
1546         \}\par
1547     \};\par
1548 \par
1549     {\cf17 struct }DOCTEST_INTERFACE TestSuite\par
1550     \{\par
1551         {\cf17 const} {\cf18 char}* m_test_suite = {\cf17 nullptr};\par
1552         {\cf17 const} {\cf18 char}* m_description = {\cf17 nullptr};\par
1553         {\cf18 bool}        m_skip = {\cf17 false};\par
1554         {\cf18 bool}        m_no_breaks = {\cf17 false};\par
1555         {\cf18 bool}        m_no_output = {\cf17 false};\par
1556         {\cf18 bool}        m_may_fail = {\cf17 false};\par
1557         {\cf18 bool}        m_should_fail = {\cf17 false};\par
1558         {\cf18 int}         m_expected_failures = 0;\par
1559         {\cf18 double}      m_timeout = 0;\par
1560 \par
1561         TestSuite& operator*({\cf17 const} {\cf18 char}* in);\par
1562 \par
1563         {\cf17 template} <{\cf17 typename} T>\par
1564         TestSuite& operator*({\cf17 const} T& in) \{\par
1565             in.fill(*{\cf17 this});\par
1566             {\cf19 return} *{\cf17 this};\par
1567         \}\par
1568     \};\par
1569 \par
1570     {\cf17 using }funcType = void (*)();\par
1571 \par
1572     {\cf17 struct }DOCTEST_INTERFACE TestCase : {\cf17 public} TestCaseData\par
1573     \{\par
1574         funcType m_test; {\cf20 // a function pointer to the test case}\par
1575 \par
1576         String m_type; {\cf20 // for templated test cases - gets appended to the real name}\par
1577         {\cf18 int} m_template_id; {\cf20 // an ID used to distinguish between the different versions of a templated test case}\par
1578         String m_full_name; {\cf20 // contains the name (only for templated test cases!) + the template type}\par
1579 \par
1580         TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
1581                  {\cf17 const} String& type = String(), {\cf18 int} template_id = -1);\par
1582 \par
1583         TestCase({\cf17 const} TestCase& other);\par
1584         TestCase(TestCase&&) = {\cf17 delete};\par
1585 \par
1586         DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
1587         TestCase& operator=(const TestCase& other);\par
1588         DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1589 \par
1590         TestCase& operator=(TestCase&&) = delete;\par
1591 \par
1592         TestCase& operator*(const {\cf18 char}* in);\par
1593 \par
1594         template <typename T>\par
1595         TestCase& operator*(const T& in) \{\par
1596             in.fill(*{\cf17 this});\par
1597             {\cf19 return} *{\cf17 this};\par
1598         \}\par
1599 \par
1600         {\cf18 bool} operator<({\cf17 const} TestCase& other) {\cf17 const};\par
1601 \par
1602         ~TestCase() = {\cf19 default};\par
1603     \};\par
1604 \par
1605     {\cf20 // forward declarations of functions used by the macros}\par
1606     DOCTEST_INTERFACE {\cf18 int}  regTest({\cf17 const} TestCase& tc);\par
1607     DOCTEST_INTERFACE {\cf18 int}  setTestSuite({\cf17 const} TestSuite& ts);\par
1608     DOCTEST_INTERFACE {\cf18 bool} isDebuggerActive();\par
1609 \par
1610     {\cf17 template}<{\cf17 typename} T>\par
1611     {\cf18 int} instantiationHelper({\cf17 const} T&) \{ {\cf19 return} 0; \}\par
1612 \par
1613     {\cf17 namespace }binaryAssertComparison \{\par
1614         {\cf17 enum} Enum\par
1615         \{\par
1616             eq = 0,\par
1617             ne,\par
1618             gt,\par
1619             lt,\par
1620             ge,\par
1621             le\par
1622         \};\par
1623     \} {\cf20 // namespace binaryAssertComparison}\par
1624 \par
1625     {\cf20 // clang-format off}\par
1626     {\cf17 template} <{\cf18 int}, {\cf17 class} L, {\cf17 class} R> {\cf17 struct }RelationalComparator     \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
1627 \par
1628 {\cf21 #define DOCTEST_BINARY_RELATIONAL_OP(n, op) \\}\par
1629 {\cf21     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const \{ return op(lhs, rhs); \} \};}\par
1630     {\cf20 // clang-format on}\par
1631 \par
1632     DOCTEST_BINARY_RELATIONAL_OP(0, doctest::detail::eq)\par
1633     DOCTEST_BINARY_RELATIONAL_OP(1, doctest::detail::ne)\par
1634     DOCTEST_BINARY_RELATIONAL_OP(2, doctest::detail::gt)\par
1635     DOCTEST_BINARY_RELATIONAL_OP(3, doctest::detail::lt)\par
1636     DOCTEST_BINARY_RELATIONAL_OP(4, doctest::detail::ge)\par
1637     DOCTEST_BINARY_RELATIONAL_OP(5, doctest::detail::le)\par
1638 \par
1639     struct DOCTEST_INTERFACE ResultBuilder : public AssertData\par
1640     \{\par
1641         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1642                       {\cf17 const} {\cf18 char}* exception_type = {\cf22 ""}, {\cf17 const} String& exception_string = {\cf22 ""});\par
1643 \par
1644         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1645                       {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string);\par
1646 \par
1647         {\cf18 void} setResult({\cf17 const} Result& res);\par
1648 \par
1649         {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1650         DOCTEST_NOINLINE {\cf18 bool} binary_assert({\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1651                                             {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1652             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1653             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1654                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1655             \}\par
1656             {\cf19 return} !m_failed;\par
1657         \}\par
1658 \par
1659         {\cf17 template} <{\cf17 typename} L>\par
1660         DOCTEST_NOINLINE {\cf18 bool} unary_assert({\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1661             m_failed = !val;\par
1662 \par
1663             {\cf19 if} (m_at & assertType::is_false) \{ \par
1664                 m_failed = !m_failed;\par
1665             \}\par
1666 \par
1667             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1668                 m_decomp = (DOCTEST_STRINGIFY(val));\par
1669             \}\par
1670 \par
1671             {\cf19 return} !m_failed;\par
1672         \}\par
1673 \par
1674         {\cf18 void} translateException();\par
1675 \par
1676         {\cf18 bool} log();\par
1677         {\cf18 void} react() {\cf17 const};\par
1678     \};\par
1679 \par
1680     {\cf17 namespace }assertAction \{\par
1681         {\cf17 enum} Enum\par
1682         \{\par
1683             nothing     = 0,\par
1684             dbgbreak    = 1,\par
1685             shouldthrow = 2\par
1686         \};\par
1687     \} {\cf20 // namespace assertAction}\par
1688 \par
1689     DOCTEST_INTERFACE {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad);\par
1690 \par
1691     DOCTEST_INTERFACE {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1692                                          {\cf17 const} {\cf18 char}* expr, {\cf17 const} Result& result);\par
1693 \par
1694 {\cf21 #define DOCTEST_ASSERT_OUT_OF_TESTS(decomp)                                                        \\}\par
1695 {\cf21     do \{                                                                                           \\}\par
1696 {\cf21         if(!is_running_in_test) \{                                                                  \\}\par
1697 {\cf21             if(failed) \{                                                                           \\}\par
1698 {\cf21                 ResultBuilder rb(at, file, line, expr);                                            \\}\par
1699 {\cf21                 rb.m_failed = failed;                                                              \\}\par
1700 {\cf21                 rb.m_decomp = decomp;                                                              \\}\par
1701 {\cf21                 failed_out_of_a_testing_context(rb);                                               \\}\par
1702 {\cf21                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\}\par
1703 {\cf21                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\}\par
1704 {\cf21                 if(checkIfShouldThrow(at))                                                         \\}\par
1705 {\cf21                     throwException();                                                              \\}\par
1706 {\cf21             \}                                                                                      \\}\par
1707 {\cf21             return !failed;                                                                        \\}\par
1708 {\cf21         \}                                                                                          \\}\par
1709 {\cf21     \} while(false)}\par
1710 \par
1711 {\cf21 #define DOCTEST_ASSERT_IN_TESTS(decomp)                                                            \\}\par
1712 {\cf21     ResultBuilder rb(at, file, line, expr);                                                        \\}\par
1713 {\cf21     rb.m_failed = failed;                                                                          \\}\par
1714 {\cf21     if(rb.m_failed || getContextOptions()->success)                                                \\}\par
1715 {\cf21         rb.m_decomp = decomp;                                                                      \\}\par
1716 {\cf21     if(rb.log())                                                                                   \\}\par
1717 {\cf21         DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\}\par
1718 {\cf21     if(rb.m_failed && checkIfShouldThrow(at))                                                      \\}\par
1719 {\cf21     throwException()}\par
1720 \par
1721     {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1722     DOCTEST_NOINLINE {\cf18 bool} binary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1723                                         {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1724                                         {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1725         {\cf18 bool} failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1726 \par
1727         {\cf20 // ###################################################################################}\par
1728         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1729         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1730         {\cf20 // ###################################################################################}\par
1731         DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1732         DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1733         {\cf19 return} !failed;\par
1734     \}\par
1735 \par
1736     {\cf17 template} <{\cf17 typename} L>\par
1737     DOCTEST_NOINLINE {\cf18 bool} unary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1738                                        {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1739         {\cf18 bool} failed = !val;\par
1740 \par
1741         {\cf19 if}(at & assertType::is_false) \par
1742             failed = !failed;\par
1743 \par
1744         {\cf20 // ###################################################################################}\par
1745         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1746         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1747         {\cf20 // ###################################################################################}\par
1748         DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));\par
1749         DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));\par
1750         {\cf19 return} !failed;\par
1751     \}\par
1752 \par
1753     {\cf17 struct }DOCTEST_INTERFACE IExceptionTranslator\par
1754     \{\par
1755         DOCTEST_DECLARE_INTERFACE(IExceptionTranslator)\par
1756         virtual {\cf18 bool} translate(String&) const = 0;\par
1757     \};\par
1758 \par
1759     template <typename T>\par
1760     class ExceptionTranslator : public IExceptionTranslator \par
1761     \{\par
1762     {\cf17 public}:\par
1763         {\cf17 explicit} ExceptionTranslator(String (*translateFunction)(T))\par
1764                 : m_translateFunction(translateFunction) \{\}\par
1765 \par
1766         {\cf18 bool} translate(String& res){\cf17  const override }\{\par
1767 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1768             {\cf19 try} \{\par
1769                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1770                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1771             \} {\cf19 catch}({\cf17 const} T& ex) \{\par
1772                 res = m_translateFunction(ex); \par
1773                 {\cf19 return} {\cf17 true};\par
1774             \} {\cf19 catch}(...) \{\}         \par
1775 {\cf21 #endif                              }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1776             {\cf17 static_cast<}{\cf18 void}{\cf17 >}(res); {\cf20 // to silence -Wunused-parameter}\par
1777             {\cf19 return} {\cf17 false};\par
1778         \}\par
1779 \par
1780     {\cf17 private}:\par
1781         String (*m_translateFunction)(T);\par
1782     \};\par
1783 \par
1784     DOCTEST_INTERFACE {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et);\par
1785 \par
1786     {\cf20 // ContextScope base class used to allow implementing methods of ContextScope}\par
1787     {\cf20 // that don't depend on the template parameter in doctest.cpp.}\par
1788     {\cf17 struct }DOCTEST_INTERFACE ContextScopeBase : {\cf17 public} IContextScope \{\par
1789         ContextScopeBase({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1790 \par
1791         ContextScopeBase& operator=({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1792         ContextScopeBase& operator=(ContextScopeBase&&) = {\cf17 delete};\par
1793 \par
1794         ~ContextScopeBase() {\cf17 override} = {\cf19 default};\par
1795 \par
1796     {\cf17 protected}:\par
1797         ContextScopeBase();\par
1798         ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept};\par
1799 \par
1800         {\cf18 void} destroy();\par
1801         {\cf18 bool} need_to_destroy\{{\cf17 true}\};\par
1802     \};\par
1803 \par
1804     {\cf17 template} <{\cf17 typename} L> {\cf17 class }ContextScope : {\cf17 public} ContextScopeBase\par
1805     \{\par
1806         L lambda_;\par
1807 \par
1808     {\cf17 public}:\par
1809         {\cf17 explicit} ContextScope({\cf17 const} L &lambda) : lambda_(lambda) \{\}\par
1810         {\cf17 explicit} ContextScope(L&& lambda) : lambda_(static_cast<L&&>(lambda)) \{ \}\par
1811 \par
1812         ContextScope({\cf17 const} ContextScope&) = {\cf17 delete};\par
1813         ContextScope(ContextScope&&) noexcept = default;\par
1814 \par
1815         ContextScope& operator=(const ContextScope&) = delete;\par
1816         ContextScope& operator=(ContextScope&&) = delete;\par
1817 \par
1818         {\cf18 void} stringify(std::ostream* s){\cf17  const override }\{ lambda_(s); \}\par
1819 \par
1820         ~ContextScope(){\cf17  override }\{\par
1821             {\cf19 if} (need_to_destroy) \{\par
1822                 destroy();\par
1823             \}\par
1824         \}\par
1825     \};\par
1826 \par
1827     {\cf17 struct }DOCTEST_INTERFACE MessageBuilder : {\cf17 public} MessageData\par
1828     \{\par
1829         std::ostream* m_stream;\par
1830         {\cf18 bool}          logged = {\cf17 false};\par
1831 \par
1832         MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity);\par
1833 \par
1834         MessageBuilder({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1835         MessageBuilder(MessageBuilder&&) = {\cf17 delete};\par
1836 \par
1837         MessageBuilder& operator=({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1838         MessageBuilder& operator=(MessageBuilder&&) = {\cf17 delete};\par
1839 \par
1840         ~MessageBuilder();\par
1841 \par
1842         {\cf20 // the preferred way of chaining parameters for stringification}\par
1843 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1844         template <typename T>\par
1845         MessageBuilder& operator,(const T& in) \{\par
1846             *m_stream << (DOCTEST_STRINGIFY(in));\par
1847             {\cf19 return} *{\cf17 this};\par
1848         \}\par
1849 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1850 \par
1851         {\cf20 // kept here just for backwards-compatibility - the comma operator should be preferred now}\par
1852         {\cf17 template} <{\cf17 typename} T>\par
1853         MessageBuilder& operator<<({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1854 \par
1855         {\cf20 // the `,` operator has the lowest operator precedence - if `<<` is used by the user then}\par
1856         {\cf20 // the `,` operator will be called last which is not what we want and thus the `*` operator}\par
1857         {\cf20 // is used first (has higher operator precedence compared to `<<`) so that we guarantee that}\par
1858         {\cf20 // an operator of the MessageBuilder class is called first before the rest of the parameters}\par
1859         {\cf17 template} <{\cf17 typename} T>\par
1860         MessageBuilder& operator*({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1861 \par
1862         {\cf18 bool} log();\par
1863         {\cf18 void} react();\par
1864     \};\par
1865 \par
1866     {\cf17 template} <{\cf17 typename} L>\par
1867     ContextScope<L> MakeContextScope({\cf17 const} L &lambda) \{\par
1868         {\cf19 return} ContextScope<L>(lambda);\par
1869     \}\par
1870 \} {\cf20 // namespace detail}\par
1871 \par
1872 {\cf21 #define DOCTEST_DEFINE_DECORATOR(name, type, def)                                                  \\}\par
1873 {\cf21     struct name                                                                                    \\}\par
1874 {\cf21     \{                                                                                              \\}\par
1875 {\cf21         type data;                                                                                 \\}\par
1876 {\cf21         name(type in = def)                                                                        \\}\par
1877 {\cf21                 : data(in) \{\}                                                                      \\}\par
1878 {\cf21         void fill(detail::TestCase& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}           \\}\par
1879 {\cf21         void fill(detail::TestSuite& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}          \\}\par
1880 {\cf21     \}}\par
1881 \par
1882 DOCTEST_DEFINE_DECORATOR(test_suite, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1883 DOCTEST_DEFINE_DECORATOR(description, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1884 DOCTEST_DEFINE_DECORATOR(skip, {\cf18 bool}, {\cf17 true});\par
1885 DOCTEST_DEFINE_DECORATOR(no_breaks, {\cf18 bool}, {\cf17 true});\par
1886 DOCTEST_DEFINE_DECORATOR(no_output, {\cf18 bool}, {\cf17 true});\par
1887 DOCTEST_DEFINE_DECORATOR(timeout, {\cf18 double}, 0);\par
1888 DOCTEST_DEFINE_DECORATOR(may_fail, {\cf18 bool}, {\cf17 true});\par
1889 DOCTEST_DEFINE_DECORATOR(should_fail, {\cf18 bool}, {\cf17 true});\par
1890 DOCTEST_DEFINE_DECORATOR(expected_failures, {\cf18 int}, 0);\par
1891 \par
1892 {\cf17 template} <{\cf17 typename} T>\par
1893 {\cf18 int} registerExceptionTranslator(String (*translateFunction)(T)) \{\par
1894     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})\par
1895     {\cf17 static} detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);\par
1896     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1897     detail::registerExceptionTranslatorImpl(&exceptionTranslator);\par
1898     {\cf19 return} 0;\par
1899 \}\par
1900 \par
1901 \} {\cf20 // namespace doctest}\par
1902 \par
1903 {\cf20 // in a separate namespace outside of doctest because the DOCTEST_TEST_SUITE macro}\par
1904 {\cf20 // introduces an anonymous namespace in which getCurrentTestSuite gets overridden}\par
1905 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
1906 DOCTEST_INTERFACE doctest::detail::TestSuite& getCurrentTestSuite();\par
1907 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
1908 \par
1909 {\cf17 namespace }doctest \{\par
1910 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1911 {\cf17 template} <{\cf17 typename} T>\par
1912 {\cf18 int} registerExceptionTranslator(String (*)(T)) \{\par
1913     {\cf19 return} 0;\par
1914 \}\par
1915 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1916 \par
1917 {\cf17 namespace }detail \{\par
1918     {\cf17 using }assert_handler = void (*)({\cf17 const} AssertData&);\par
1919     {\cf17 struct }ContextState;\par
1920 \} {\cf20 // namespace detail}\par
1921 \par
1922 {\cf17 class }DOCTEST_INTERFACE Context\par
1923 \{\par
1924     detail::ContextState* p;\par
1925 \par
1926     {\cf18 void} parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults = {\cf17 false});\par
1927 \par
1928 {\cf17 public}:\par
1929     {\cf17 explicit} Context({\cf18 int} argc = 0, {\cf17 const} {\cf18 char}* {\cf17 const}* argv = {\cf17 nullptr});\par
1930 \par
1931     Context({\cf17 const} Context&) = {\cf17 delete};\par
1932     Context(Context&&) = {\cf17 delete};\par
1933 \par
1934     Context& operator=({\cf17 const} Context&) = {\cf17 delete};\par
1935     Context& operator=(Context&&) = {\cf17 delete};\par
1936 \par
1937     ~Context(); {\cf20 // NOLINT(performance-trivially-destructible)}\par
1938 \par
1939     {\cf18 void} applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv);\par
1940 \par
1941     {\cf18 void} addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value);\par
1942     {\cf18 void} clearFilters();\par
1943     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value);\par
1944     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value);\par
1945     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value);\par
1946 \par
1947     {\cf18 bool} shouldExit();\par
1948 \par
1949     {\cf18 void} setAsDefaultForAssertsOutOfTestCases();\par
1950 \par
1951     {\cf18 void} setAssertHandler(detail::assert_handler ah);\par
1952 \par
1953     {\cf18 void} setCout(std::ostream* out);\par
1954 \par
1955     {\cf18 int} run();\par
1956 \};\par
1957 \par
1958 {\cf17 namespace }TestCaseFailureReason \{\par
1959     {\cf17 enum} Enum\par
1960     \{\par
1961         None                     = 0,\par
1962         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
1963         Exception                = 2,   {\cf20 // test case threw an exception}\par
1964         Crash                    = 4,   {\cf20 // a crash...}\par
1965         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
1966         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
1967         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
1968         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
1969         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
1970         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
1971         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
1972     \};\par
1973 \} {\cf20 // namespace TestCaseFailureReason}\par
1974 \par
1975 {\cf17 struct }DOCTEST_INTERFACE CurrentTestCaseStats\par
1976 \{\par
1977     {\cf18 int}    numAssertsCurrentTest;\par
1978     {\cf18 int}    numAssertsFailedCurrentTest;\par
1979     {\cf18 double} seconds;\par
1980     {\cf18 int}    failure_flags; {\cf20 // use TestCaseFailureReason::Enum}\par
1981     {\cf18 bool}   testCaseSuccess;\par
1982 \};\par
1983 \par
1984 {\cf17 struct }DOCTEST_INTERFACE TestCaseException\par
1985 \{\par
1986     String error_string;\par
1987     {\cf18 bool}   is_crash;\par
1988 \};\par
1989 \par
1990 {\cf17 struct }DOCTEST_INTERFACE TestRunStats\par
1991 \{\par
1992     {\cf18 unsigned} numTestCases;\par
1993     {\cf18 unsigned} numTestCasesPassingFilters;\par
1994     {\cf18 unsigned} numTestSuitesPassingFilters;\par
1995     {\cf18 unsigned} numTestCasesFailed;\par
1996     {\cf18 int}      numAsserts;\par
1997     {\cf18 int}      numAssertsFailed;\par
1998 \};\par
1999 \par
2000 {\cf17 struct }QueryData\par
2001 \{\par
2002     {\cf17 const} TestRunStats*  run_stats = {\cf17 nullptr};\par
2003     {\cf17 const} TestCaseData** data      = {\cf17 nullptr};\par
2004     {\cf18 unsigned}             num_data  = 0;\par
2005 \};\par
2006 \par
2007 {\cf17 struct }DOCTEST_INTERFACE IReporter\par
2008 \{\par
2009     {\cf20 // The constructor has to accept "const ContextOptions&" as a single argument}\par
2010     {\cf20 // which has most of the options for the run + a pointer to the stdout stream}\par
2011     {\cf20 // Reporter(const ContextOptions& in)}\par
2012 \par
2013     {\cf20 // called when a query should be reported (listing test cases, printing the version, etc.)}\par
2014     {\cf17 virtual} {\cf18 void} report_query({\cf17 const} QueryData&) = 0;\par
2015 \par
2016     {\cf20 // called when the whole test run starts}\par
2017     {\cf17 virtual} {\cf18 void} test_run_start() = 0;\par
2018     {\cf20 // called when the whole test run ends (caching a pointer to the input doesn't make sense here)}\par
2019     {\cf17 virtual} {\cf18 void} test_run_end({\cf17 const} TestRunStats&) = 0;\par
2020 \par
2021     {\cf20 // called when a test case is started (safe to cache a pointer to the input)}\par
2022     {\cf17 virtual} {\cf18 void} test_case_start({\cf17 const} TestCaseData&) = 0;\par
2023     {\cf20 // called when a test case is reentered because of unfinished subcases (safe to cache a pointer to the input)}\par
2024     {\cf17 virtual} {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&) = 0;\par
2025     {\cf20 // called when a test case has ended}\par
2026     {\cf17 virtual} {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&) = 0;\par
2027 \par
2028     {\cf20 // called when an exception is thrown from the test case (or it crashes)}\par
2029     {\cf17 virtual} {\cf18 void} test_case_exception({\cf17 const} TestCaseException&) = 0;\par
2030 \par
2031     {\cf20 // called whenever a subcase is entered (don't cache pointers to the input)}\par
2032     {\cf17 virtual} {\cf18 void} subcase_start({\cf17 const} SubcaseSignature&) = 0;\par
2033     {\cf20 // called whenever a subcase is exited (don't cache pointers to the input)}\par
2034     {\cf17 virtual} {\cf18 void} subcase_end() = 0;\par
2035 \par
2036     {\cf20 // called for each assert (don't cache pointers to the input)}\par
2037     {\cf17 virtual} {\cf18 void} log_assert({\cf17 const} AssertData&) = 0;\par
2038     {\cf20 // called for each message (don't cache pointers to the input)}\par
2039     {\cf17 virtual} {\cf18 void} log_message({\cf17 const} MessageData&) = 0;\par
2040 \par
2041     {\cf20 // called when a test case is skipped either because it doesn't pass the filters, has a skip decorator}\par
2042     {\cf20 // or isn't in the execution range (between first and last) (safe to cache a pointer to the input)}\par
2043     {\cf17 virtual} {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&) = 0;\par
2044 \par
2045     DOCTEST_DECLARE_INTERFACE(IReporter)\par
2046 \par
2047     {\cf20 // can obtain all currently active contexts and stringify them if one wishes to do so}\par
2048     static {\cf18 int}                         get_num_active_contexts();\par
2049     static const IContextScope* const* get_active_contexts();\par
2050 \par
2051     {\cf20 // can iterate through contexts which have been stringified automatically in their destructors when an exception has been thrown}\par
2052     static {\cf18 int}           get_num_stringified_contexts();\par
2053     static const String* get_stringified_contexts();\par
2054 \};\par
2055 \par
2056 namespace detail \{\par
2057     {\cf17 using }reporterCreatorFunc =  IReporter* (*)({\cf17 const} ContextOptions&);\par
2058 \par
2059     DOCTEST_INTERFACE {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} prio, reporterCreatorFunc c, {\cf18 bool} isReporter);\par
2060 \par
2061     {\cf17 template} <{\cf17 typename} Reporter>\par
2062     IReporter* reporterCreator({\cf17 const} ContextOptions& o) \{\par
2063         {\cf19 return} {\cf17 new} Reporter(o);\par
2064     \}\par
2065 \} {\cf20 // namespace detail}\par
2066 \par
2067 {\cf17 template} <{\cf17 typename} Reporter>\par
2068 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, {\cf18 bool} isReporter) \{\par
2069     detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);\par
2070     {\cf19 return} 0;\par
2071 \}\par
2072 \} {\cf20 // namespace doctest}\par
2073 \par
2074 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2075 {\cf21 #define DOCTEST_FUNC_EMPTY [] \{ return false; \}()}\par
2076 {\cf21 #else}\par
2077 {\cf21 #define DOCTEST_FUNC_EMPTY (void)0}\par
2078 {\cf21 #endif}\par
2079 \par
2080 {\cf20 // if registering is not disabled}\par
2081 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
2082 \par
2083 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2084 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN [&]}\par
2085 {\cf21 #define DOCTEST_FUNC_SCOPE_END ()}\par
2086 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) return v}\par
2087 {\cf21 #else}\par
2088 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN do}\par
2089 {\cf21 #define DOCTEST_FUNC_SCOPE_END while(false)}\par
2090 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) (void)0}\par
2091 {\cf21 #endif}\par
2092 \par
2093 {\cf20 // common code in asserts - for convenience}\par
2094 {\cf21 #define DOCTEST_ASSERT_LOG_REACT_RETURN(b)                                                         \\}\par
2095 {\cf21     if(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\}\par
2096 {\cf21     b.react();                                                                                     \\}\par
2097 {\cf21     DOCTEST_FUNC_SCOPE_RET(!b.m_failed)}\par
2098 \par
2099 {\cf21 #ifdef DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2100 {\cf21 #define DOCTEST_WRAP_IN_TRY(x) x;}\par
2101 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2102 {\cf21 #define DOCTEST_WRAP_IN_TRY(x)                                                                     \\}\par
2103 {\cf21     try \{                                                                                          \\}\par
2104 {\cf21         x;                                                                                         \\}\par
2105 {\cf21     \} catch(...) \{ DOCTEST_RB.translateException(); \}}\par
2106 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2107 \par
2108 {\cf21 #ifdef DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2109 {\cf21 #define DOCTEST_CAST_TO_VOID(...)                                                                  \\}\par
2110 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                       \\}\par
2111 {\cf21     static_cast<void>(__VA_ARGS__);                                                                \\}\par
2112 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
2113 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2114 {\cf21 #define DOCTEST_CAST_TO_VOID(...) __VA_ARGS__;}\par
2115 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2116 \par
2117 {\cf20 // registers the test by initializing a dummy var with a function}\par
2118 {\cf21 #define DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)                                    \\}\par
2119 {\cf21     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT */}{\cf21     \\}\par
2120 {\cf21             doctest::detail::regTest(                                                              \\}\par
2121 {\cf21                     doctest::detail::TestCase(                                                     \\}\par
2122 {\cf21                             f, __FILE__, __LINE__,                                                 \\}\par
2123 {\cf21                             doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\}\par
2124 {\cf21                     decorators))}\par
2125 \par
2126 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, decorators)                                     \\}\par
2127 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2128 {\cf21         struct der : public base                                                                   \\}\par
2129 {\cf21         \{                                                                                          \\}\par
2130 {\cf21             void f();                                                                              \\}\par
2131 {\cf21         \};                                                                                         \\}\par
2132 {\cf21         static inline DOCTEST_NOINLINE void func() \{                                               \\}\par
2133 {\cf21             der v;                                                                                 \\}\par
2134 {\cf21             v.f();                                                                                 \\}\par
2135 {\cf21         \}                                                                                          \\}\par
2136 {\cf21         DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\}\par
2137 {\cf21     \}                                                                                              \\}\par
2138 {\cf21     inline DOCTEST_NOINLINE void der::f() }{\cf20 // NOLINT(misc-definitions-in-headers)}\par
2139 \par
2140 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)                                        \\}\par
2141 {\cf21     static void f();                                                                               \\}\par
2142 {\cf21     DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\}\par
2143 {\cf21     static void f()}\par
2144 \par
2145 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f, proxy, decorators)                        \\}\par
2146 {\cf21     static doctest::detail::funcType proxy() \{ return f; \}                                         \\}\par
2147 {\cf21     DOCTEST_REGISTER_FUNCTION(inline, proxy(), decorators)                                         \\}\par
2148 {\cf21     static void f()}\par
2149 \par
2150 {\cf20 // for registering tests}\par
2151 {\cf21 #define DOCTEST_TEST_CASE(decorators)                                                              \\}\par
2152 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2153 \par
2154 {\cf20 // for registering tests in classes - requires C++17 for inline variables!}\par
2155 {\cf21 #if DOCTEST_CPLUSPLUS >= 201703L}\par
2156 {\cf21 #define DOCTEST_TEST_CASE_CLASS(decorators)                                                        \\}\par
2157 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),           \\}\par
2158 {\cf21                                                   DOCTEST_ANONYMOUS(DOCTEST_ANON_PROXY_),          \\}\par
2159 {\cf21                                                   decorators)}\par
2160 {\cf21 #else }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2161 {\cf21 #define DOCTEST_TEST_CASE_CLASS(...)                                                               \\}\par
2162 {\cf21     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}\par
2163 {\cf21 #endif }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2164 \par
2165 {\cf20 // for registering tests with a fixture}\par
2166 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(c, decorators)                                                   \\}\par
2167 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\}\par
2168 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2169 \par
2170 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2171 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...)                                                        \\}\par
2172 {\cf21     namespace doctest \{                                                                            \\}\par
2173 {\cf21         template <>                                                                                \\}\par
2174 {\cf21         inline String toString<__VA_ARGS__>() \{                                                    \\}\par
2175 {\cf21             return str;                                                                            \\}\par
2176 {\cf21         \}                                                                                          \\}\par
2177 {\cf21     \}                                                                                              \\}\par
2178 {\cf21     static_assert(true, "")}\par
2179 \par
2180 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__, __VA_ARGS__)}\par
2181 \par
2182 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, iter, func)                                 \\}\par
2183 {\cf21     template <typename T>                                                                          \\}\par
2184 {\cf21     static void func();                                                                            \\}\par
2185 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2186 {\cf21         template <typename Tuple>                                                                  \\}\par
2187 {\cf21         struct iter;                                                                               \\}\par
2188 {\cf21         template <typename Type, typename... Rest>                                                 \\}\par
2189 {\cf21         struct iter<std::tuple<Type, Rest...>>                                                     \\}\par
2190 {\cf21         \{                                                                                          \\}\par
2191 {\cf21             iter(const char* file, unsigned line, int index) \{                                     \\}\par
2192 {\cf21                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\}\par
2193 {\cf21                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\}\par
2194 {\cf21                                             doctest::toString<Type>(),                             \\}\par
2195 {\cf21                                             int(line) * 1000 + index)                              \\}\par
2196 {\cf21                                          * dec);                                                   \\}\par
2197 {\cf21                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\}\par
2198 {\cf21             \}                                                                                      \\}\par
2199 {\cf21         \};                                                                                         \\}\par
2200 {\cf21         template <>                                                                                \\}\par
2201 {\cf21         struct iter<std::tuple<>>                                                                  \\}\par
2202 {\cf21         \{                                                                                          \\}\par
2203 {\cf21             iter(const char*, unsigned, int) \{\}                                                    \\}\par
2204 {\cf21         \};                                                                                         \\}\par
2205 {\cf21     \}                                                                                              \\}\par
2206 {\cf21     template <typename T>                                                                          \\}\par
2207 {\cf21     static void func()}\par
2208 \par
2209 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec, T, id)                                              \\}\par
2210 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \\}\par
2211 {\cf21                                            DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))}\par
2212 \par
2213 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, anon, ...)                                 \\}\par
2214 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), }{\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */}{\cf21  \\}\par
2215 {\cf21         doctest::detail::instantiationHelper(                                                      \\}\par
2216 {\cf21             DOCTEST_CAT(id, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))}\par
2217 \par
2218 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \\}\par
2219 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\}\par
2220 {\cf21     static_assert(true, "")}\par
2221 \par
2222 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \\}\par
2223 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\}\par
2224 {\cf21     static_assert(true, "")}\par
2225 \par
2226 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, anon, ...)                                         \\}\par
2227 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\}\par
2228 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\}\par
2229 {\cf21     template <typename T>                                                                          \\}\par
2230 {\cf21     static void anon()}\par
2231 \par
2232 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(dec, T, ...)                                                    \\}\par
2233 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__)}\par
2234 \par
2235 {\cf20 // for subcases}\par
2236 {\cf21 #define DOCTEST_SUBCASE(name)                                                                      \\}\par
2237 {\cf21     if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\}\par
2238 {\cf21                doctest::detail::Subcase(name, __FILE__, __LINE__))}\par
2239 \par
2240 {\cf20 // for grouping tests in test suites by using code blocks}\par
2241 {\cf21 #define DOCTEST_TEST_SUITE_IMPL(decorators, ns_name)                                               \\}\par
2242 {\cf21     namespace ns_name \{ namespace doctest_detail_test_suite_ns \{                                   \\}\par
2243 {\cf21             static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\}\par
2244 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\}\par
2245 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors")                \\}\par
2246 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wmissing-field-initializers")             \\}\par
2247 {\cf21                 static doctest::detail::TestSuite data\{\};                                          \\}\par
2248 {\cf21                 static bool                       inited = false;                                  \\}\par
2249 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\}\par
2250 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\}\par
2251 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\}\par
2252 {\cf21                 if(!inited) \{                                                                      \\}\par
2253 {\cf21                     data* decorators;                                                              \\}\par
2254 {\cf21                     inited = true;                                                                 \\}\par
2255 {\cf21                 \}                                                                                  \\}\par
2256 {\cf21                 return data;                                                                       \\}\par
2257 {\cf21             \}                                                                                      \\}\par
2258 {\cf21         \}                                                                                          \\}\par
2259 {\cf21     \}                                                                                              \\}\par
2260 {\cf21     namespace ns_name}\par
2261 \par
2262 {\cf21 #define DOCTEST_TEST_SUITE(decorators)                                                             \\}\par
2263 {\cf21     DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))}\par
2264 \par
2265 {\cf20 // for starting a testsuite block}\par
2266 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(decorators)                                                       \\}\par
2267 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2268 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\}\par
2269 {\cf21     static_assert(true, "")}\par
2270 \par
2271 {\cf20 // for ending a testsuite block}\par
2272 {\cf21 #define DOCTEST_TEST_SUITE_END                                                                     \\}\par
2273 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2274 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * ""))                      \\}\par
2275 {\cf21     using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2276 \par
2277 {\cf20 // for registering exception translators}\par
2278 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName, signature)                      \\}\par
2279 {\cf21     inline doctest::String translatorName(signature);                                              \\}\par
2280 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2281 {\cf21             doctest::registerExceptionTranslator(translatorName))                                  \\}\par
2282 {\cf21     doctest::String translatorName(signature)}\par
2283 \par
2284 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2285 {\cf21     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\}\par
2286 {\cf21                                                signature)}\par
2287 \par
2288 {\cf20 // for registering reporters}\par
2289 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)                                        \\}\par
2290 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2291 {\cf21             doctest::registerReporter<reporter>(name, priority, true))                             \\}\par
2292 {\cf21     static_assert(true, "")}\par
2293 \par
2294 {\cf20 // for registering listeners}\par
2295 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)                                        \\}\par
2296 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2297 {\cf21             doctest::registerReporter<reporter>(name, priority, false))                            \\}\par
2298 {\cf21     static_assert(true, "")}\par
2299 \par
2300 {\cf20 // clang-format off}\par
2301 {\cf20 // for logging - disabling formatting because it's important to have these on 2 separate lines - see PR #557}\par
2302 {\cf21 #define DOCTEST_INFO(...)                                                                          \\}\par
2303 {\cf21     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\}\par
2304 {\cf21                       DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\}\par
2305 {\cf21                       __VA_ARGS__)}\par
2306 {\cf20 // clang-format on}\par
2307 \par
2308 {\cf21 #define DOCTEST_INFO_IMPL(mb_name, s_name, ...)                                       \\}\par
2309 {\cf21     auto DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\}\par
2310 {\cf21         [&](std::ostream* s_name) \{                                                                \\}\par
2311 {\cf21         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\}\par
2312 {\cf21         mb_name.m_stream = s_name;                                                                 \\}\par
2313 {\cf21         mb_name * __VA_ARGS__;                                                                     \\}\par
2314 {\cf21     \})}\par
2315 \par
2316 {\cf21 #define DOCTEST_CAPTURE(x) DOCTEST_INFO(#x " := ", x)}\par
2317 \par
2318 {\cf21 #define DOCTEST_ADD_AT_IMPL(type, file, line, mb, ...)                                             \\}\par
2319 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2320 {\cf21         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\}\par
2321 {\cf21         mb * __VA_ARGS__;                                                                          \\}\par
2322 {\cf21         if(mb.log())                                                                               \\}\par
2323 {\cf21             DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\}\par
2324 {\cf21         mb.react();                                                                                \\}\par
2325 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2326 \par
2327 {\cf20 // clang-format off}\par
2328 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2329 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2330 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2331 {\cf20 // clang-format on}\par
2332 \par
2333 {\cf21 #define DOCTEST_MESSAGE(...) DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2334 {\cf21 #define DOCTEST_FAIL_CHECK(...) DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2335 {\cf21 #define DOCTEST_FAIL(...) DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2336 \par
2337 {\cf21 #define DOCTEST_TO_LVALUE(...) __VA_ARGS__ }{\cf20 // Not removed to keep backwards compatibility.}\par
2338 \par
2339 {\cf21 #ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2340 \par
2341 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2(assert_type, ...)                                               \\}\par
2342 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2343 {\cf21     }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21                                   \\}\par
2344 {\cf21     doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\}\par
2345 {\cf21                                                __LINE__, #__VA_ARGS__);                            \\}\par
2346 {\cf21     DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\}\par
2347 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2348 {\cf21             << __VA_ARGS__)) }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21          \\}\par
2349 {\cf21     DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\}\par
2350 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2351 \par
2352 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2353 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2354 {\cf21         DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\}\par
2355 {\cf21     \} DOCTEST_FUNC_SCOPE_END }{\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
2356 \par
2357 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comp, ...)                                              \\}\par
2358 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2359 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2360 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2361 {\cf21         DOCTEST_WRAP_IN_TRY(                                                                       \\}\par
2362 {\cf21                 DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\}\par
2363 {\cf21                         __VA_ARGS__))                                                              \\}\par
2364 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2365 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2366 \par
2367 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2368 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2369 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2370 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2371 {\cf21         DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\}\par
2372 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2373 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2374 \par
2375 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2376 \par
2377 {\cf20 // necessary for <ASSERT>_MESSAGE}\par
2378 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2 DOCTEST_ASSERT_IMPLEMENT_1}\par
2379 \par
2380 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2381 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2382 {\cf21     doctest::detail::decomp_assert(                                                                \\}\par
2383 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__,                    \\}\par
2384 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2385 {\cf21                     << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2386 \par
2387 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comparison, ...)                                        \\}\par
2388 {\cf21     doctest::detail::binary_assert<doctest::detail::binaryAssertComparison::comparison>(           \\}\par
2389 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__, __VA_ARGS__)}\par
2390 \par
2391 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2392 {\cf21     doctest::detail::unary_assert(doctest::assertType::assert_type, __FILE__, __LINE__,            \\}\par
2393 {\cf21                                   #__VA_ARGS__, __VA_ARGS__)}\par
2394 \par
2395 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2396 \par
2397 {\cf21 #define DOCTEST_WARN(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)}\par
2398 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)}\par
2399 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)}\par
2400 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)}\par
2401 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)}\par
2402 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)}\par
2403 \par
2404 {\cf20 // clang-format off}\par
2405 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2406 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2407 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2408 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2409 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2410 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2411 {\cf20 // clang-format on}\par
2412 \par
2413 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)}\par
2414 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)}\par
2415 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)}\par
2416 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)}\par
2417 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)}\par
2418 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)}\par
2419 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)}\par
2420 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)}\par
2421 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)}\par
2422 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)}\par
2423 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)}\par
2424 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)}\par
2425 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)}\par
2426 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)}\par
2427 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)}\par
2428 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)}\par
2429 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)}\par
2430 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)}\par
2431 \par
2432 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)}\par
2433 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)}\par
2434 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)}\par
2435 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)}\par
2436 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}\par
2437 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}\par
2438 \par
2439 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2440 \par
2441 {\cf21 #define DOCTEST_ASSERT_THROWS_AS(expr, assert_type, message, ...)                                  \\}\par
2442 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2443 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2444 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2445 {\cf21                                                        __LINE__, #expr, #__VA_ARGS__, message);    \\}\par
2446 {\cf21             try \{                                                                                  \\}\par
2447 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2448 {\cf21             \} catch(const typename doctest::detail::types::remove_const<                           \\}\par
2449 {\cf21                     typename doctest::detail::types::remove_reference<__VA_ARGS__>::type>::type&) \{\\}\par
2450 {\cf21                 DOCTEST_RB.translateException();                                                   \\}\par
2451 {\cf21                 DOCTEST_RB.m_threw_as = true;                                                      \\}\par
2452 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2453 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2454 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2455 {\cf21             DOCTEST_FUNC_SCOPE_RET(false);                                                         \\}\par
2456 {\cf21         \}                                                                                          \\}\par
2457 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2458 \par
2459 {\cf21 #define DOCTEST_ASSERT_THROWS_WITH(expr, expr_str, assert_type, ...)                               \\}\par
2460 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2461 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2462 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2463 {\cf21                                                        __LINE__, expr_str, "", __VA_ARGS__);       \\}\par
2464 {\cf21             try \{                                                                                  \\}\par
2465 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2466 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2467 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2468 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2469 {\cf21            DOCTEST_FUNC_SCOPE_RET(false);                                                          \\}\par
2470 {\cf21         \}                                                                                          \\}\par
2471 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2472 \par
2473 {\cf21 #define DOCTEST_ASSERT_NOTHROW(assert_type, ...)                                                   \\}\par
2474 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2475 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2476 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2477 {\cf21         try \{                                                                                      \\}\par
2478 {\cf21             DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \\}\par
2479 {\cf21         \} catch(...) \{ DOCTEST_RB.translateException(); \}                                          \\}\par
2480 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2481 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2482 \par
2483 {\cf20 // clang-format off}\par
2484 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")}\par
2485 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")}\par
2486 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")}\par
2487 \par
2488 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)}\par
2489 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)}\par
2490 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)}\par
2491 \par
2492 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)}\par
2493 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)}\par
2494 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)}\par
2495 \par
2496 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2497 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2498 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2499 \par
2500 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW, __VA_ARGS__)}\par
2501 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW, __VA_ARGS__)}\par
2502 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW, __VA_ARGS__)}\par
2503 \par
2504 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2505 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2506 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2507 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2508 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2509 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2510 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2511 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2512 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2513 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2514 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2515 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2516 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2517 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2518 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2519 {\cf20 // clang-format on}\par
2520 \par
2521 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2522 \par
2523 {\cf20 // =================================================================================================}\par
2524 {\cf20 // == WHAT FOLLOWS IS VERSIONS OF THE MACROS THAT DO NOT DO ANY REGISTERING!                      ==}\par
2525 {\cf20 // == THIS CAN BE ENABLED BY DEFINING DOCTEST_CONFIG_DISABLE GLOBALLY!                            ==}\par
2526 {\cf20 // =================================================================================================}\par
2527 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2528 \par
2529 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, name)                                           \\}\par
2530 {\cf21     namespace }{\cf20 /* NOLINT */}{\cf21  \{                                                                       \\}\par
2531 {\cf21         template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                           \\}\par
2532 {\cf21         struct der : public base                                                                   \\}\par
2533 {\cf21         \{ void f(); \};                                                                             \\}\par
2534 {\cf21     \}                                                                                              \\}\par
2535 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2536 {\cf21     inline void der<DOCTEST_UNUSED_TEMPLATE_TYPE>::f()}\par
2537 \par
2538 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, name)                                              \\}\par
2539 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2540 {\cf21     static inline void f()}\par
2541 \par
2542 {\cf20 // for registering tests}\par
2543 {\cf21 #define DOCTEST_TEST_CASE(name)                                                                    \\}\par
2544 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2545 \par
2546 {\cf20 // for registering tests in classes}\par
2547 {\cf21 #define DOCTEST_TEST_CASE_CLASS(name)                                                              \\}\par
2548 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2549 \par
2550 {\cf20 // for registering tests with a fixture}\par
2551 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(x, name)                                                         \\}\par
2552 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), x,                           \\}\par
2553 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2554 \par
2555 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2556 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...) static_assert(true, "")}\par
2557 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) static_assert(true, "")}\par
2558 \par
2559 {\cf20 // for typed tests}\par
2560 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(name, type, ...)                                                \\}\par
2561 {\cf21     template <typename type>                                                                       \\}\par
2562 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2563 \par
2564 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, type, id)                                          \\}\par
2565 {\cf21     template <typename type>                                                                       \\}\par
2566 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2567 \par
2568 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...) static_assert(true, "")}\par
2569 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...) static_assert(true, "")}\par
2570 \par
2571 {\cf20 // for subcases}\par
2572 {\cf21 #define DOCTEST_SUBCASE(name)}\par
2573 \par
2574 {\cf20 // for a testsuite block}\par
2575 {\cf21 #define DOCTEST_TEST_SUITE(name) namespace }{\cf20 // NOLINT}\par
2576 \par
2577 {\cf20 // for starting a testsuite block}\par
2578 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(name) static_assert(true, "")}\par
2579 \par
2580 {\cf20 // for ending a testsuite block}\par
2581 {\cf21 #define DOCTEST_TEST_SUITE_END using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2582 \par
2583 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2584 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2585 {\cf21     static inline doctest::String DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_)(signature)}\par
2586 \par
2587 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2588 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2589 \par
2590 {\cf21 #define DOCTEST_INFO(...) (static_cast<void>(0))}\par
2591 {\cf21 #define DOCTEST_CAPTURE(x) (static_cast<void>(0))}\par
2592 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) (static_cast<void>(0))}\par
2593 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) (static_cast<void>(0))}\par
2594 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) (static_cast<void>(0))}\par
2595 {\cf21 #define DOCTEST_MESSAGE(...) (static_cast<void>(0))}\par
2596 {\cf21 #define DOCTEST_FAIL_CHECK(...) (static_cast<void>(0))}\par
2597 {\cf21 #define DOCTEST_FAIL(...) (static_cast<void>(0))}\par
2598 \par
2599 {\cf21 #if defined(DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED)                                    \\}\par
2600 {\cf21  && defined(DOCTEST_CONFIG_ASSERTS_RETURN_VALUES)}\par
2601 \par
2602 {\cf21 #define DOCTEST_WARN(...) [&] \{ return __VA_ARGS__; \}()}\par
2603 {\cf21 #define DOCTEST_CHECK(...) [&] \{ return __VA_ARGS__; \}()}\par
2604 {\cf21 #define DOCTEST_REQUIRE(...) [&] \{ return __VA_ARGS__; \}()}\par
2605 {\cf21 #define DOCTEST_WARN_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2606 {\cf21 #define DOCTEST_CHECK_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2607 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2608 \par
2609 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2610 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2611 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2612 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2613 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2614 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2615 \par
2616 {\cf17 namespace }doctest \{\par
2617 {\cf17 namespace }detail \{\par
2618 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
2619 {\cf21     template <typename L, typename R>                                                              \\}\par
2620 {\cf21     bool name(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) \{ return lhs op rhs; \}}\par
2621 \par
2622     DOCTEST_RELATIONAL_OP(eq, ==)\par
2623     DOCTEST_RELATIONAL_OP(ne, !=)\par
2624     DOCTEST_RELATIONAL_OP(lt, <)\par
2625     DOCTEST_RELATIONAL_OP(gt, >)\par
2626     DOCTEST_RELATIONAL_OP(le, <=)\par
2627     DOCTEST_RELATIONAL_OP(ge, >=)\par
2628 \} {\cf20 // namespace detail}\par
2629 \} {\cf20 // namespace doctest}\par
2630 \par
2631 {\cf21 #define DOCTEST_WARN_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2632 {\cf21 #define DOCTEST_CHECK_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2633 {\cf21 #define DOCTEST_REQUIRE_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2634 {\cf21 #define DOCTEST_WARN_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2635 {\cf21 #define DOCTEST_CHECK_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2636 {\cf21 #define DOCTEST_REQUIRE_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2637 {\cf21 #define DOCTEST_WARN_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2638 {\cf21 #define DOCTEST_CHECK_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2639 {\cf21 #define DOCTEST_REQUIRE_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2640 {\cf21 #define DOCTEST_WARN_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2641 {\cf21 #define DOCTEST_CHECK_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2642 {\cf21 #define DOCTEST_REQUIRE_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2643 {\cf21 #define DOCTEST_WARN_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2644 {\cf21 #define DOCTEST_CHECK_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2645 {\cf21 #define DOCTEST_REQUIRE_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2646 {\cf21 #define DOCTEST_WARN_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2647 {\cf21 #define DOCTEST_CHECK_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2648 {\cf21 #define DOCTEST_REQUIRE_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2649 {\cf21 #define DOCTEST_WARN_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2650 {\cf21 #define DOCTEST_CHECK_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2651 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2652 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2653 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2654 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2655 \par
2656 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2657 \par
2658 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, with, ...) [] \{ static_assert(false, "Exception translation is not available when doctest is disabled."); return false; \}()}\par
2659 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2660 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2661 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2662 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2663 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2664 \par
2665 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2666 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2667 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2668 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2669 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2670 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2671 \par
2672 {\cf21 #define DOCTEST_WARN_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2673 {\cf21 #define DOCTEST_CHECK_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2674 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2675 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2676 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2677 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2678 {\cf21 #define DOCTEST_WARN_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2679 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2680 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2681 \par
2682 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2683 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2684 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2685 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2686 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2687 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2688 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2689 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2690 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2691 \par
2692 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2693 \par
2694 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2695 \par
2696 {\cf21 #define DOCTEST_WARN(...) DOCTEST_FUNC_EMPTY}\par
2697 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_FUNC_EMPTY}\par
2698 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_FUNC_EMPTY}\par
2699 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2700 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2701 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2702 \par
2703 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2704 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2705 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2706 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2707 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2708 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2709 \par
2710 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_FUNC_EMPTY}\par
2711 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_FUNC_EMPTY}\par
2712 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_FUNC_EMPTY}\par
2713 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_FUNC_EMPTY}\par
2714 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_FUNC_EMPTY}\par
2715 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_FUNC_EMPTY}\par
2716 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_FUNC_EMPTY}\par
2717 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_FUNC_EMPTY}\par
2718 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_FUNC_EMPTY}\par
2719 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_FUNC_EMPTY}\par
2720 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_FUNC_EMPTY}\par
2721 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_FUNC_EMPTY}\par
2722 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_FUNC_EMPTY}\par
2723 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_FUNC_EMPTY}\par
2724 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_FUNC_EMPTY}\par
2725 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_FUNC_EMPTY}\par
2726 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_FUNC_EMPTY}\par
2727 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_FUNC_EMPTY}\par
2728 \par
2729 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2730 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2731 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2732 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2733 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2734 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2735 \par
2736 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2737 \par
2738 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2739 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2740 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2741 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2742 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2743 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2744 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2745 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2746 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2747 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2748 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2749 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2750 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2751 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2752 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2753 \par
2754 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2755 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2756 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2757 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2758 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2759 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2760 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2761 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2762 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2763 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2764 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2765 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2766 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2767 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2768 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2769 \par
2770 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2771 \par
2772 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2773 \par
2774 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2775 \par
2776 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2777 \par
2778 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2779 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC DOCTEST_FUNC_EMPTY}\par
2780 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2781 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC [] \{ static_assert(false, "Exceptions are disabled! " \\}\par
2782 {\cf21     "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."); return false; \}()}\par
2783 \par
2784 {\cf21 #undef DOCTEST_REQUIRE}\par
2785 {\cf21 #undef DOCTEST_REQUIRE_FALSE}\par
2786 {\cf21 #undef DOCTEST_REQUIRE_MESSAGE}\par
2787 {\cf21 #undef DOCTEST_REQUIRE_FALSE_MESSAGE}\par
2788 {\cf21 #undef DOCTEST_REQUIRE_EQ}\par
2789 {\cf21 #undef DOCTEST_REQUIRE_NE}\par
2790 {\cf21 #undef DOCTEST_REQUIRE_GT}\par
2791 {\cf21 #undef DOCTEST_REQUIRE_LT}\par
2792 {\cf21 #undef DOCTEST_REQUIRE_GE}\par
2793 {\cf21 #undef DOCTEST_REQUIRE_LE}\par
2794 {\cf21 #undef DOCTEST_REQUIRE_UNARY}\par
2795 {\cf21 #undef DOCTEST_REQUIRE_UNARY_FALSE}\par
2796 \par
2797 {\cf21 #define DOCTEST_REQUIRE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2798 {\cf21 #define DOCTEST_REQUIRE_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2799 {\cf21 #define DOCTEST_REQUIRE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2800 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2801 {\cf21 #define DOCTEST_REQUIRE_EQ DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2802 {\cf21 #define DOCTEST_REQUIRE_NE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2803 {\cf21 #define DOCTEST_REQUIRE_GT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2804 {\cf21 #define DOCTEST_REQUIRE_LT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2805 {\cf21 #define DOCTEST_REQUIRE_GE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2806 {\cf21 #define DOCTEST_REQUIRE_LE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2807 {\cf21 #define DOCTEST_REQUIRE_UNARY DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2808 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2809 \par
2810 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2811 \par
2812 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2813 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2814 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2815 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2816 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2817 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2818 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2819 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2820 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2821 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2822 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2823 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2824 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2825 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2826 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2827 \par
2828 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2829 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2830 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2831 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2832 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2833 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2834 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2835 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2836 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2837 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2838 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2839 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2840 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2841 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2842 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2843 \par
2844 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2845 \par
2846 {\cf20 // clang-format off}\par
2847 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY - FORWARDING TO THE RIGHT MACROS}\par
2848 {\cf21 #define DOCTEST_FAST_WARN_EQ             DOCTEST_WARN_EQ}\par
2849 {\cf21 #define DOCTEST_FAST_CHECK_EQ            DOCTEST_CHECK_EQ}\par
2850 {\cf21 #define DOCTEST_FAST_REQUIRE_EQ          DOCTEST_REQUIRE_EQ}\par
2851 {\cf21 #define DOCTEST_FAST_WARN_NE             DOCTEST_WARN_NE}\par
2852 {\cf21 #define DOCTEST_FAST_CHECK_NE            DOCTEST_CHECK_NE}\par
2853 {\cf21 #define DOCTEST_FAST_REQUIRE_NE          DOCTEST_REQUIRE_NE}\par
2854 {\cf21 #define DOCTEST_FAST_WARN_GT             DOCTEST_WARN_GT}\par
2855 {\cf21 #define DOCTEST_FAST_CHECK_GT            DOCTEST_CHECK_GT}\par
2856 {\cf21 #define DOCTEST_FAST_REQUIRE_GT          DOCTEST_REQUIRE_GT}\par
2857 {\cf21 #define DOCTEST_FAST_WARN_LT             DOCTEST_WARN_LT}\par
2858 {\cf21 #define DOCTEST_FAST_CHECK_LT            DOCTEST_CHECK_LT}\par
2859 {\cf21 #define DOCTEST_FAST_REQUIRE_LT          DOCTEST_REQUIRE_LT}\par
2860 {\cf21 #define DOCTEST_FAST_WARN_GE             DOCTEST_WARN_GE}\par
2861 {\cf21 #define DOCTEST_FAST_CHECK_GE            DOCTEST_CHECK_GE}\par
2862 {\cf21 #define DOCTEST_FAST_REQUIRE_GE          DOCTEST_REQUIRE_GE}\par
2863 {\cf21 #define DOCTEST_FAST_WARN_LE             DOCTEST_WARN_LE}\par
2864 {\cf21 #define DOCTEST_FAST_CHECK_LE            DOCTEST_CHECK_LE}\par
2865 {\cf21 #define DOCTEST_FAST_REQUIRE_LE          DOCTEST_REQUIRE_LE}\par
2866 \par
2867 {\cf21 #define DOCTEST_FAST_WARN_UNARY          DOCTEST_WARN_UNARY}\par
2868 {\cf21 #define DOCTEST_FAST_CHECK_UNARY         DOCTEST_CHECK_UNARY}\par
2869 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY       DOCTEST_REQUIRE_UNARY}\par
2870 {\cf21 #define DOCTEST_FAST_WARN_UNARY_FALSE    DOCTEST_WARN_UNARY_FALSE}\par
2871 {\cf21 #define DOCTEST_FAST_CHECK_UNARY_FALSE   DOCTEST_CHECK_UNARY_FALSE}\par
2872 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE}\par
2873 \par
2874 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)}\par
2875 {\cf20 // clang-format on}\par
2876 \par
2877 {\cf20 // BDD style macros}\par
2878 {\cf20 // clang-format off}\par
2879 {\cf21 #define DOCTEST_SCENARIO(name) DOCTEST_TEST_CASE("  Scenario: " name)}\par
2880 {\cf21 #define DOCTEST_SCENARIO_CLASS(name) DOCTEST_TEST_CASE_CLASS("  Scenario: " name)}\par
2881 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE(name, T, ...)  DOCTEST_TEST_CASE_TEMPLATE("  Scenario: " name, T, __VA_ARGS__)}\par
2882 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE("  Scenario: " name, T, id)}\par
2883 \par
2884 {\cf21 #define DOCTEST_GIVEN(name)     DOCTEST_SUBCASE("   Given: " name)}\par
2885 {\cf21 #define DOCTEST_WHEN(name)      DOCTEST_SUBCASE("    When: " name)}\par
2886 {\cf21 #define DOCTEST_AND_WHEN(name)  DOCTEST_SUBCASE("And when: " name)}\par
2887 {\cf21 #define DOCTEST_THEN(name)      DOCTEST_SUBCASE("    Then: " name)}\par
2888 {\cf21 #define DOCTEST_AND_THEN(name)  DOCTEST_SUBCASE("     And: " name)}\par
2889 {\cf20 // clang-format on}\par
2890 \par
2891 {\cf20 // == SHORT VERSIONS OF THE MACROS}\par
2892 {\cf21 #ifndef DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
2893 \par
2894 {\cf21 #define TEST_CASE(name) DOCTEST_TEST_CASE(name)}\par
2895 {\cf21 #define TEST_CASE_CLASS(name) DOCTEST_TEST_CASE_CLASS(name)}\par
2896 {\cf21 #define TEST_CASE_FIXTURE(x, name) DOCTEST_TEST_CASE_FIXTURE(x, name)}\par
2897 {\cf21 #define TYPE_TO_STRING_AS(str, ...) DOCTEST_TYPE_TO_STRING_AS(str, __VA_ARGS__)}\par
2898 {\cf21 #define TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING(__VA_ARGS__)}\par
2899 {\cf21 #define TEST_CASE_TEMPLATE(name, T, ...) DOCTEST_TEST_CASE_TEMPLATE(name, T, __VA_ARGS__)}\par
2900 {\cf21 #define TEST_CASE_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, T, id)}\par
2901 {\cf21 #define TEST_CASE_TEMPLATE_INVOKE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, __VA_ARGS__)}\par
2902 {\cf21 #define TEST_CASE_TEMPLATE_APPLY(id, ...) DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, __VA_ARGS__)}\par
2903 {\cf21 #define SUBCASE(name) DOCTEST_SUBCASE(name)}\par
2904 {\cf21 #define TEST_SUITE(decorators) DOCTEST_TEST_SUITE(decorators)}\par
2905 {\cf21 #define TEST_SUITE_BEGIN(name) DOCTEST_TEST_SUITE_BEGIN(name)}\par
2906 {\cf21 #define TEST_SUITE_END DOCTEST_TEST_SUITE_END}\par
2907 {\cf21 #define REGISTER_EXCEPTION_TRANSLATOR(signature) DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)}\par
2908 {\cf21 #define REGISTER_REPORTER(name, priority, reporter) DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2909 {\cf21 #define REGISTER_LISTENER(name, priority, reporter) DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2910 {\cf21 #define INFO(...) DOCTEST_INFO(__VA_ARGS__)}\par
2911 {\cf21 #define CAPTURE(x) DOCTEST_CAPTURE(x)}\par
2912 {\cf21 #define ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_MESSAGE_AT(file, line, __VA_ARGS__)}\par
2913 {\cf21 #define ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_FAIL_CHECK_AT(file, line, __VA_ARGS__)}\par
2914 {\cf21 #define ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_FAIL_AT(file, line, __VA_ARGS__)}\par
2915 {\cf21 #define MESSAGE(...) DOCTEST_MESSAGE(__VA_ARGS__)}\par
2916 {\cf21 #define FAIL_CHECK(...) DOCTEST_FAIL_CHECK(__VA_ARGS__)}\par
2917 {\cf21 #define FAIL(...) DOCTEST_FAIL(__VA_ARGS__)}\par
2918 {\cf21 #define TO_LVALUE(...) DOCTEST_TO_LVALUE(__VA_ARGS__)}\par
2919 \par
2920 {\cf21 #define WARN(...) DOCTEST_WARN(__VA_ARGS__)}\par
2921 {\cf21 #define WARN_FALSE(...) DOCTEST_WARN_FALSE(__VA_ARGS__)}\par
2922 {\cf21 #define WARN_THROWS(...) DOCTEST_WARN_THROWS(__VA_ARGS__)}\par
2923 {\cf21 #define WARN_THROWS_AS(expr, ...) DOCTEST_WARN_THROWS_AS(expr, __VA_ARGS__)}\par
2924 {\cf21 #define WARN_THROWS_WITH(expr, ...) DOCTEST_WARN_THROWS_WITH(expr, __VA_ARGS__)}\par
2925 {\cf21 #define WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_WARN_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2926 {\cf21 #define WARN_NOTHROW(...) DOCTEST_WARN_NOTHROW(__VA_ARGS__)}\par
2927 {\cf21 #define CHECK(...) DOCTEST_CHECK(__VA_ARGS__)}\par
2928 {\cf21 #define CHECK_FALSE(...) DOCTEST_CHECK_FALSE(__VA_ARGS__)}\par
2929 {\cf21 #define CHECK_THROWS(...) DOCTEST_CHECK_THROWS(__VA_ARGS__)}\par
2930 {\cf21 #define CHECK_THROWS_AS(expr, ...) DOCTEST_CHECK_THROWS_AS(expr, __VA_ARGS__)}\par
2931 {\cf21 #define CHECK_THROWS_WITH(expr, ...) DOCTEST_CHECK_THROWS_WITH(expr, __VA_ARGS__)}\par
2932 {\cf21 #define CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2933 {\cf21 #define CHECK_NOTHROW(...) DOCTEST_CHECK_NOTHROW(__VA_ARGS__)}\par
2934 {\cf21 #define REQUIRE(...) DOCTEST_REQUIRE(__VA_ARGS__)}\par
2935 {\cf21 #define REQUIRE_FALSE(...) DOCTEST_REQUIRE_FALSE(__VA_ARGS__)}\par
2936 {\cf21 #define REQUIRE_THROWS(...) DOCTEST_REQUIRE_THROWS(__VA_ARGS__)}\par
2937 {\cf21 #define REQUIRE_THROWS_AS(expr, ...) DOCTEST_REQUIRE_THROWS_AS(expr, __VA_ARGS__)}\par
2938 {\cf21 #define REQUIRE_THROWS_WITH(expr, ...) DOCTEST_REQUIRE_THROWS_WITH(expr, __VA_ARGS__)}\par
2939 {\cf21 #define REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2940 {\cf21 #define REQUIRE_NOTHROW(...) DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)}\par
2941 \par
2942 {\cf21 #define WARN_MESSAGE(cond, ...) DOCTEST_WARN_MESSAGE(cond, __VA_ARGS__)}\par
2943 {\cf21 #define WARN_FALSE_MESSAGE(cond, ...) DOCTEST_WARN_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2944 {\cf21 #define WARN_THROWS_MESSAGE(expr, ...) DOCTEST_WARN_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2945 {\cf21 #define WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2946 {\cf21 #define WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2947 {\cf21 #define WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2948 {\cf21 #define WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_WARN_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2949 {\cf21 #define CHECK_MESSAGE(cond, ...) DOCTEST_CHECK_MESSAGE(cond, __VA_ARGS__)}\par
2950 {\cf21 #define CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_CHECK_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2951 {\cf21 #define CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_CHECK_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2952 {\cf21 #define CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2953 {\cf21 #define CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2954 {\cf21 #define CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2955 {\cf21 #define CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_CHECK_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2956 {\cf21 #define REQUIRE_MESSAGE(cond, ...) DOCTEST_REQUIRE_MESSAGE(cond, __VA_ARGS__)}\par
2957 {\cf21 #define REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_REQUIRE_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2958 {\cf21 #define REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_REQUIRE_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2959 {\cf21 #define REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2960 {\cf21 #define REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2961 {\cf21 #define REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2962 {\cf21 #define REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2963 \par
2964 {\cf21 #define SCENARIO(name) DOCTEST_SCENARIO(name)}\par
2965 {\cf21 #define SCENARIO_CLASS(name) DOCTEST_SCENARIO_CLASS(name)}\par
2966 {\cf21 #define SCENARIO_TEMPLATE(name, T, ...) DOCTEST_SCENARIO_TEMPLATE(name, T, __VA_ARGS__)}\par
2967 {\cf21 #define SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id)}\par
2968 {\cf21 #define GIVEN(name) DOCTEST_GIVEN(name)}\par
2969 {\cf21 #define WHEN(name) DOCTEST_WHEN(name)}\par
2970 {\cf21 #define AND_WHEN(name) DOCTEST_AND_WHEN(name)}\par
2971 {\cf21 #define THEN(name) DOCTEST_THEN(name)}\par
2972 {\cf21 #define AND_THEN(name) DOCTEST_AND_THEN(name)}\par
2973 \par
2974 {\cf21 #define WARN_EQ(...) DOCTEST_WARN_EQ(__VA_ARGS__)}\par
2975 {\cf21 #define CHECK_EQ(...) DOCTEST_CHECK_EQ(__VA_ARGS__)}\par
2976 {\cf21 #define REQUIRE_EQ(...) DOCTEST_REQUIRE_EQ(__VA_ARGS__)}\par
2977 {\cf21 #define WARN_NE(...) DOCTEST_WARN_NE(__VA_ARGS__)}\par
2978 {\cf21 #define CHECK_NE(...) DOCTEST_CHECK_NE(__VA_ARGS__)}\par
2979 {\cf21 #define REQUIRE_NE(...) DOCTEST_REQUIRE_NE(__VA_ARGS__)}\par
2980 {\cf21 #define WARN_GT(...) DOCTEST_WARN_GT(__VA_ARGS__)}\par
2981 {\cf21 #define CHECK_GT(...) DOCTEST_CHECK_GT(__VA_ARGS__)}\par
2982 {\cf21 #define REQUIRE_GT(...) DOCTEST_REQUIRE_GT(__VA_ARGS__)}\par
2983 {\cf21 #define WARN_LT(...) DOCTEST_WARN_LT(__VA_ARGS__)}\par
2984 {\cf21 #define CHECK_LT(...) DOCTEST_CHECK_LT(__VA_ARGS__)}\par
2985 {\cf21 #define REQUIRE_LT(...) DOCTEST_REQUIRE_LT(__VA_ARGS__)}\par
2986 {\cf21 #define WARN_GE(...) DOCTEST_WARN_GE(__VA_ARGS__)}\par
2987 {\cf21 #define CHECK_GE(...) DOCTEST_CHECK_GE(__VA_ARGS__)}\par
2988 {\cf21 #define REQUIRE_GE(...) DOCTEST_REQUIRE_GE(__VA_ARGS__)}\par
2989 {\cf21 #define WARN_LE(...) DOCTEST_WARN_LE(__VA_ARGS__)}\par
2990 {\cf21 #define CHECK_LE(...) DOCTEST_CHECK_LE(__VA_ARGS__)}\par
2991 {\cf21 #define REQUIRE_LE(...) DOCTEST_REQUIRE_LE(__VA_ARGS__)}\par
2992 {\cf21 #define WARN_UNARY(...) DOCTEST_WARN_UNARY(__VA_ARGS__)}\par
2993 {\cf21 #define CHECK_UNARY(...) DOCTEST_CHECK_UNARY(__VA_ARGS__)}\par
2994 {\cf21 #define REQUIRE_UNARY(...) DOCTEST_REQUIRE_UNARY(__VA_ARGS__)}\par
2995 {\cf21 #define WARN_UNARY_FALSE(...) DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
2996 {\cf21 #define CHECK_UNARY_FALSE(...) DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
2997 {\cf21 #define REQUIRE_UNARY_FALSE(...) DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
2998 \par
2999 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY}\par
3000 {\cf21 #define FAST_WARN_EQ(...) DOCTEST_FAST_WARN_EQ(__VA_ARGS__)}\par
3001 {\cf21 #define FAST_CHECK_EQ(...) DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)}\par
3002 {\cf21 #define FAST_REQUIRE_EQ(...) DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)}\par
3003 {\cf21 #define FAST_WARN_NE(...) DOCTEST_FAST_WARN_NE(__VA_ARGS__)}\par
3004 {\cf21 #define FAST_CHECK_NE(...) DOCTEST_FAST_CHECK_NE(__VA_ARGS__)}\par
3005 {\cf21 #define FAST_REQUIRE_NE(...) DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)}\par
3006 {\cf21 #define FAST_WARN_GT(...) DOCTEST_FAST_WARN_GT(__VA_ARGS__)}\par
3007 {\cf21 #define FAST_CHECK_GT(...) DOCTEST_FAST_CHECK_GT(__VA_ARGS__)}\par
3008 {\cf21 #define FAST_REQUIRE_GT(...) DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)}\par
3009 {\cf21 #define FAST_WARN_LT(...) DOCTEST_FAST_WARN_LT(__VA_ARGS__)}\par
3010 {\cf21 #define FAST_CHECK_LT(...) DOCTEST_FAST_CHECK_LT(__VA_ARGS__)}\par
3011 {\cf21 #define FAST_REQUIRE_LT(...) DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)}\par
3012 {\cf21 #define FAST_WARN_GE(...) DOCTEST_FAST_WARN_GE(__VA_ARGS__)}\par
3013 {\cf21 #define FAST_CHECK_GE(...) DOCTEST_FAST_CHECK_GE(__VA_ARGS__)}\par
3014 {\cf21 #define FAST_REQUIRE_GE(...) DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)}\par
3015 {\cf21 #define FAST_WARN_LE(...) DOCTEST_FAST_WARN_LE(__VA_ARGS__)}\par
3016 {\cf21 #define FAST_CHECK_LE(...) DOCTEST_FAST_CHECK_LE(__VA_ARGS__)}\par
3017 {\cf21 #define FAST_REQUIRE_LE(...) DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)}\par
3018 \par
3019 {\cf21 #define FAST_WARN_UNARY(...) DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)}\par
3020 {\cf21 #define FAST_CHECK_UNARY(...) DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)}\par
3021 {\cf21 #define FAST_REQUIRE_UNARY(...) DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)}\par
3022 {\cf21 #define FAST_WARN_UNARY_FALSE(...) DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
3023 {\cf21 #define FAST_CHECK_UNARY_FALSE(...) DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
3024 {\cf21 #define FAST_REQUIRE_UNARY_FALSE(...) DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
3025 \par
3026 {\cf21 #define TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, __VA_ARGS__)}\par
3027 \par
3028 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
3029 \par
3030 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3031 \par
3032 {\cf20 // this is here to clear the 'current test suite' for the current translation unit - at the top}\par
3033 DOCTEST_TEST_SUITE_END();\par
3034 \par
3035 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3036 \par
3037 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3038 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3039 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3040 \par
3041 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
3042 \par
3043 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_INCLUDED}\par
3044 \par
3045 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3046 {\cf21 #define DOCTEST_SINGLE_HEADER}\par
3047 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3048 \par
3049 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT) || !defined(DOCTEST_SINGLE_HEADER)}\par
3050 \par
3051 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3052 {\cf21 #include "doctest_fwd.h"}\par
3053 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3054 \par
3055 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-macros"})\par
3056 \par
3057 {\cf21 #ifndef DOCTEST_LIBRARY_IMPLEMENTATION}\par
3058 {\cf21 #define DOCTEST_LIBRARY_IMPLEMENTATION}\par
3059 \par
3060 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3061 \par
3062 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
3063 \par
3064 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
3065 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wglobal-constructors"})\par
3066 DOCTEST_CLANG_SUPPRESS_WARNING("-Wexit-time-destructors")\par
3067 DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")\par
3068 DOCTEST_CLANG_SUPPRESS_WARNING("-Wshorten-64-to-32")\par
3069 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-variable-declarations")\par
3070 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch")\par
3071 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch-enum")\par
3072 DOCTEST_CLANG_SUPPRESS_WARNING("-Wcovered-switch-default")\par
3073 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-noreturn")\par
3074 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdisabled-macro-expansion")\par
3075 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-braces")\par
3076 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3077 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-member-function")\par
3078 DOCTEST_CLANG_SUPPRESS_WARNING("-Wnonportable-system-include-path")\par
3079 \par
3080 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
3081 DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")\par
3082 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
3083 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3084 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-braces")\par
3085 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch")\par
3086 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-enum")\par
3087 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-default")\par
3088 DOCTEST_GCC_SUPPRESS_WARNING("-Wunsafe-loop-optimizations")\par
3089 DOCTEST_GCC_SUPPRESS_WARNING("-Wold-style-cast")\par
3090 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-function")\par
3091 DOCTEST_GCC_SUPPRESS_WARNING("-Wmultiple-inheritance")\par
3092 DOCTEST_GCC_SUPPRESS_WARNING("-Wsuggest-attribute")\par
3093 \par
3094 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
3095 DOCTEST_MSVC_SUPPRESS_WARNING(4267) {\cf20 // 'var' : conversion from 'x' to 'y', possible loss of data}\par
3096 DOCTEST_MSVC_SUPPRESS_WARNING(4530) {\cf20 // C++ exception handler used, but unwind semantics not enabled}\par
3097 DOCTEST_MSVC_SUPPRESS_WARNING(4577) {\cf20 // 'noexcept' used with no exception handling mode specified}\par
3098 DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 // format string expected in argument is not a string literal}\par
3099 DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 // conversion from 'int' to 'unsigned', signed/unsigned mismatch}\par
3100 DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 // pointer to potentially throwing function passed to extern C}\par
3101 DOCTEST_MSVC_SUPPRESS_WARNING(4800) {\cf20 // forcing value to bool 'true' or 'false' (performance warning)}\par
3102 DOCTEST_MSVC_SUPPRESS_WARNING(5245) {\cf20 // unreferenced function with internal linkage has been removed}\par
3103 \par
3104 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
3105 \par
3106 {\cf20 // required includes - will go only in one translation unit!}\par
3107 {\cf21 #include <ctime>}\par
3108 {\cf21 #include <cmath>}\par
3109 {\cf21 #include <climits>}\par
3110 {\cf20 // borland (Embarcadero) compiler requires math.h and not cmath - https://github.com/doctest/doctest/pull/37}\par
3111 {\cf21 #ifdef __BORLANDC__}\par
3112 {\cf21 #include <math.h>}\par
3113 {\cf21 #endif }{\cf20 // __BORLANDC__}\par
3114 {\cf21 #include <new>}\par
3115 {\cf21 #include <cstdio>}\par
3116 {\cf21 #include <cstdlib>}\par
3117 {\cf21 #include <cstring>}\par
3118 {\cf21 #include <limits>}\par
3119 {\cf21 #include <utility>}\par
3120 {\cf21 #include <fstream>}\par
3121 {\cf21 #include <sstream>}\par
3122 {\cf21 #include <iostream>}\par
3123 {\cf21 #include <algorithm>}\par
3124 {\cf21 #include <iomanip>}\par
3125 {\cf21 #include <vector>}\par
3126 {\cf21 #ifndef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3127 {\cf21 #include <atomic>}\par
3128 {\cf21 #include <mutex>}\par
3129 {\cf21 #define DOCTEST_DECLARE_MUTEX(name) std::mutex name;}\par
3130 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name) static DOCTEST_DECLARE_MUTEX(name)}\par
3131 {\cf21 #define DOCTEST_LOCK_MUTEX(name) std::lock_guard<std::mutex> DOCTEST_ANONYMOUS(DOCTEST_ANON_LOCK_)(name);}\par
3132 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3133 {\cf21 #define DOCTEST_DECLARE_MUTEX(name)}\par
3134 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name)}\par
3135 {\cf21 #define DOCTEST_LOCK_MUTEX(name)}\par
3136 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3137 {\cf21 #include <set>}\par
3138 {\cf21 #include <map>}\par
3139 {\cf21 #include <unordered_set>}\par
3140 {\cf21 #include <exception>}\par
3141 {\cf21 #include <stdexcept>}\par
3142 {\cf21 #include <csignal>}\par
3143 {\cf21 #include <cfloat>}\par
3144 {\cf21 #include <cctype>}\par
3145 {\cf21 #include <cstdint>}\par
3146 {\cf21 #include <string>}\par
3147 \par
3148 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
3149 {\cf21 #include <sys/types.h>}\par
3150 {\cf21 #include <unistd.h>}\par
3151 {\cf21 #include <sys/sysctl.h>}\par
3152 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_MAC}\par
3153 \par
3154 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3155 \par
3156 {\cf20 // defines for a leaner windows.h}\par
3157 {\cf21 #ifndef WIN32_LEAN_AND_MEAN}\par
3158 {\cf21 #define WIN32_LEAN_AND_MEAN}\par
3159 {\cf21 #endif }{\cf20 // WIN32_LEAN_AND_MEAN}\par
3160 {\cf21 #ifndef NOMINMAX}\par
3161 {\cf21 #define NOMINMAX}\par
3162 {\cf21 #endif }{\cf20 // NOMINMAX}\par
3163 \par
3164 {\cf20 // not sure what AfxWin.h is for - here I do what Catch does}\par
3165 {\cf21 #ifdef __AFXDLL}\par
3166 {\cf21 #include <AfxWin.h>}\par
3167 {\cf21 #else}\par
3168 {\cf21 #include <windows.h>}\par
3169 {\cf21 #endif}\par
3170 {\cf21 #include <io.h>}\par
3171 \par
3172 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3173 \par
3174 {\cf21 #include <sys/time.h>}\par
3175 {\cf21 #include <unistd.h>}\par
3176 \par
3177 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3178 \par
3179 {\cf20 // this is a fix for https://github.com/doctest/doctest/issues/348}\par
3180 {\cf20 // https://mail.gnome.org/archives/xml/2012-January/msg00000.html}\par
3181 {\cf21 #if !defined(HAVE_UNISTD_H) && !defined(STDOUT_FILENO)}\par
3182 {\cf21 #define STDOUT_FILENO fileno(stdout)}\par
3183 {\cf21 #endif }{\cf20 // HAVE_UNISTD_H}\par
3184 \par
3185 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
3186 \par
3187 {\cf20 // counts the number of elements in a C array}\par
3188 {\cf21 #define DOCTEST_COUNTOF(x) (sizeof(x) / sizeof(x[0]))}\par
3189 \par
3190 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3191 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_disabled}\par
3192 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3193 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_not_disabled}\par
3194 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3195 \par
3196 {\cf21 #ifndef DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3197 {\cf21 #define DOCTEST_CONFIG_OPTIONS_PREFIX "dt-"}\par
3198 {\cf21 #endif}\par
3199 \par
3200 {\cf21 #ifndef DOCTEST_THREAD_LOCAL}\par
3201 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTITHREADING) || DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
3202 {\cf21 #define DOCTEST_THREAD_LOCAL}\par
3203 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
3204 {\cf21 #define DOCTEST_THREAD_LOCAL thread_local}\par
3205 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
3206 {\cf21 #endif }{\cf20 // DOCTEST_THREAD_LOCAL}\par
3207 \par
3208 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES}\par
3209 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES 32}\par
3210 {\cf21 #endif}\par
3211 \par
3212 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE}\par
3213 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE 64}\par
3214 {\cf21 #endif}\par
3215 \par
3216 {\cf21 #ifdef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
3217 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3218 {\cf21 #else}\par
3219 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY ""}\par
3220 {\cf21 #endif}\par
3221 \par
3222 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
3223 {\cf21 #define DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3224 {\cf21 #endif}\par
3225 \par
3226 {\cf21 #ifndef DOCTEST_CDECL}\par
3227 {\cf21 #define DOCTEST_CDECL __cdecl}\par
3228 {\cf21 #endif}\par
3229 \par
3230 {\cf17 namespace }doctest \{\par
3231 \par
3232 {\cf18 bool} is_running_in_test = {\cf17 false};\par
3233 \par
3234 {\cf17 namespace }\{\par
3235     {\cf17 using namespace }detail;\par
3236 \par
3237     {\cf17 template} <{\cf17 typename} Ex>\par
3238     DOCTEST_NORETURN {\cf18 void} throw_exception(Ex {\cf17 const}& e) \{\par
3239 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3240         {\cf19 throw} e;\par
3241 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3242         std::cerr << {\cf22 "doctest will terminate because it needed to throw an exception.\\n"}\par
3243                   << {\cf22 "The message was: "} << e.what() << {\cf23 '\\n'};\par
3244         std::terminate();\par
3245 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3246     \}\par
3247 \par
3248 {\cf21 #ifndef DOCTEST_INTERNAL_ERROR}\par
3249 {\cf21 #define DOCTEST_INTERNAL_ERROR(msg)                                                                \\}\par
3250 {\cf21     throw_exception(std::logic_error(                                                              \\}\par
3251 {\cf21             __FILE__ ":" DOCTEST_TOSTR(__LINE__) ": Internal doctest error: " msg))}\par
3252 {\cf21 #endif }{\cf20 // DOCTEST_INTERNAL_ERROR}\par
3253 \par
3254     {\cf20 // case insensitive strcmp}\par
3255     {\cf18 int} stricmp({\cf17 const} {\cf18 char}* a, {\cf17 const} {\cf18 char}* b) \{\par
3256         {\cf19 for}(;; a++, b++) \{\par
3257             {\cf17 const} {\cf18 int} d = tolower(*a) - tolower(*b);\par
3258             {\cf19 if}(d != 0 || !*a)\par
3259                 {\cf19 return} d;\par
3260         \}\par
3261     \}\par
3262 \par
3263     {\cf17 struct }Endianness\par
3264     \{\par
3265         {\cf17 enum} Arch\par
3266         \{\par
3267             Big,\par
3268             Little\par
3269         \};\par
3270 \par
3271         {\cf17 static} Arch which() \{\par
3272             {\cf18 int} x = 1;\par
3273             {\cf20 // casting any data pointer to char* is allowed}\par
3274             {\cf17 auto} ptr = {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&x);\par
3275             {\cf19 if}(*ptr)\par
3276                 {\cf19 return} Little;\par
3277             {\cf19 return} Big;\par
3278         \}\par
3279     \};\par
3280 \} {\cf20 // namespace}\par
3281 \par
3282 {\cf17 namespace }detail \{\par
3283     DOCTEST_THREAD_LOCAL {\cf17 class}\par
3284     \{\par
3285         std::vector<std::streampos> stack;\par
3286         std::stringstream           ss;\par
3287 \par
3288     {\cf17 public}:\par
3289         std::ostream* push() \{\par
3290             stack.push_back(ss.tellp());\par
3291             {\cf19 return} &ss;\par
3292         \}\par
3293 \par
3294         String pop() \{\par
3295             {\cf19 if} (stack.empty())\par
3296                 DOCTEST_INTERNAL_ERROR({\cf22 "TLSS was empty when trying to pop!"});\par
3297 \par
3298             std::streampos pos = stack.back();\par
3299             stack.pop_back();\par
3300             {\cf18 unsigned} sz = {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(ss.tellp() - pos);\par
3301             ss.rdbuf()->pubseekpos(pos, std::ios::in | std::ios::out);\par
3302             {\cf19 return} String(ss, sz);\par
3303         \}\par
3304     \} g_oss;\par
3305 \par
3306     std::ostream* tlssPush() \{\par
3307         {\cf19 return} g_oss.push();\par
3308     \}\par
3309 \par
3310     String tlssPop() \{\par
3311         {\cf19 return} g_oss.pop();\par
3312     \}\par
3313 \par
3314 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3315 \par
3316 {\cf17 namespace }timer_large_integer\par
3317 \{\par
3318     \par
3319 {\cf21 #if defined(DOCTEST_PLATFORM_WINDOWS)}\par
3320     {\cf17 using }type = ULONGLONG;\par
3321 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3322     {\cf17 using }type = std::uint64_t;\par
3323 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3324 \}\par
3325 \par
3326 {\cf17 using }ticks_t = timer_large_integer::type;\par
3327 \par
3328 {\cf21 #ifdef DOCTEST_CONFIG_GETCURRENTTICKS}\par
3329     ticks_t getCurrentTicks() \{ {\cf19 return} DOCTEST_CONFIG_GETCURRENTTICKS(); \}\par
3330 {\cf21 #elif defined(DOCTEST_PLATFORM_WINDOWS)}\par
3331     ticks_t getCurrentTicks() \{\par
3332         {\cf17 static} LARGE_INTEGER hz = \{ \{0\} \}, hzo = \{ \{0\} \};\par
3333         {\cf19 if}(!hz.QuadPart) \{\par
3334             QueryPerformanceFrequency(&hz);\par
3335             QueryPerformanceCounter(&hzo);\par
3336         \}\par
3337         LARGE_INTEGER t;\par
3338         QueryPerformanceCounter(&t);\par
3339         {\cf19 return} ((t.QuadPart - hzo.QuadPart) * LONGLONG(1000000)) / hz.QuadPart;\par
3340     \}\par
3341 {\cf21 #else  }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3342     ticks_t getCurrentTicks() \{\par
3343         timeval t;\par
3344         gettimeofday(&t, {\cf17 nullptr});\par
3345         {\cf19 return} {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_sec) * 1000000 + {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_usec);\par
3346     \}\par
3347 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3348 \par
3349     {\cf17 struct }Timer\par
3350     \{\par
3351         {\cf18 void}         start() \{ m_ticks = getCurrentTicks(); \}\par
3352         {\cf18 unsigned} {\cf18 int} getElapsedMicroseconds(){\cf17  const }\{\par
3353             {\cf19 return} {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(getCurrentTicks() - m_ticks);\par
3354         \}\par
3355         {\cf20 //unsigned int getElapsedMilliseconds() const \{}\par
3356         {\cf20 //    return static_cast<unsigned int>(getElapsedMicroseconds() / 1000);}\par
3357         {\cf20 //\}}\par
3358         {\cf18 double} getElapsedSeconds(){\cf17  const }\{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(getCurrentTicks() - m_ticks) / 1000000.0; \}\par
3359 \par
3360     {\cf17 private}:\par
3361         ticks_t m_ticks = 0;\par
3362     \};\par
3363 \par
3364 {\cf21 #ifdef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3365     {\cf17 template} <{\cf17 typename} T>\par
3366     {\cf17 using }Atomic = T;\par
3367 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3368     {\cf17 template} <{\cf17 typename} T>\par
3369     {\cf17 using }Atomic = std::atomic<T>;\par
3370 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3371 \par
3372 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS) || defined(DOCTEST_CONFIG_NO_MULTITHREADING)}\par
3373     {\cf17 template} <{\cf17 typename} T>\par
3374     {\cf17 using }MultiLaneAtomic = Atomic<T>;\par
3375 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3376     {\cf20 // Provides a multilane implementation of an atomic variable that supports add, sub, load,}\par
3377     {\cf20 // store. Instead of using a single atomic variable, this splits up into multiple ones,}\par
3378     {\cf20 // each sitting on a separate cache line. The goal is to provide a speedup when most}\par
3379     {\cf20 // operations are modifying. It achieves this with two properties:}\par
3380     {\cf20 //}\par
3381     {\cf20 // * Multiple atomics are used, so chance of congestion from the same atomic is reduced.}\par
3382     {\cf20 // * Each atomic sits on a separate cache line, so false sharing is reduced.}\par
3383     {\cf20 //}\par
3384     {\cf20 // The disadvantage is that there is a small overhead due to the use of TLS, and load/store}\par
3385     {\cf20 // is slower because all atomics have to be accessed.}\par
3386     {\cf17 template} <{\cf17 typename} T>\par
3387     {\cf17 class }MultiLaneAtomic\par
3388     \{\par
3389         {\cf17 struct }CacheLineAlignedAtomic\par
3390         \{\par
3391             Atomic<T> atomic\{\};\par
3392             {\cf18 char} padding[DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE - {\cf17 sizeof}(Atomic<T>)];\par
3393         \};\par
3394         CacheLineAlignedAtomic m_atomics[DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES];\par
3395 \par
3396         {\cf17 static_assert}({\cf17 sizeof}(CacheLineAlignedAtomic) == DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE,\par
3397                       {\cf22 "guarantee one atomic takes exactly one cache line"});\par
3398 \par
3399     {\cf17 public}:\par
3400         T operator++() DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1) + 1; \}\par
3401 \par
3402         T operator++({\cf18 int}) DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1); \}\par
3403 \par
3404         T fetch_add(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3405             {\cf19 return} myAtomic().fetch_add(arg, order);\par
3406         \}\par
3407 \par
3408         T fetch_sub(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3409             {\cf19 return} myAtomic().fetch_sub(arg, order);\par
3410         \}\par
3411 \par
3412         {\cf17 operator} T() {\cf17 const} DOCTEST_NOEXCEPT \{ {\cf19 return} load(); \}\par
3413 \par
3414         T load(std::memory_order order = std::memory_order_seq_cst) {\cf17 const} DOCTEST_NOEXCEPT \{\par
3415             {\cf17 auto} result = T();\par
3416             {\cf19 for}({\cf17 auto} {\cf17 const}& c : m_atomics) \{\par
3417                 result += c.atomic.load(order);\par
3418             \}\par
3419             {\cf19 return} result;\par
3420         \}\par
3421 \par
3422         T operator=(T desired) DOCTEST_NOEXCEPT \{ {\cf20 // lgtm [cpp/assignment-does-not-return-this]}\par
3423             store(desired);\par
3424             {\cf19 return} desired;\par
3425         \}\par
3426 \par
3427         {\cf18 void} store(T desired, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3428             {\cf20 // first value becomes desired", all others become 0.}\par
3429             {\cf19 for}({\cf17 auto}& c : m_atomics) \{\par
3430                 c.atomic.store(desired, order);\par
3431                 desired = \{\};\par
3432             \}\par
3433         \}\par
3434 \par
3435     {\cf17 private}:\par
3436         {\cf20 // Each thread has a different atomic that it operates on. If more than NumLanes threads}\par
3437         {\cf20 // use this, some will use the same atomic. So performance will degrade a bit, but still}\par
3438         {\cf20 // everything will work.}\par
3439         {\cf20 //}\par
3440         {\cf20 // The logic here is a bit tricky. The call should be as fast as possible, so that there}\par
3441         {\cf20 // is minimal to no overhead in determining the correct atomic for the current thread.}\par
3442         {\cf20 //}\par
3443         {\cf20 // 1. A global static counter laneCounter counts continuously up.}\par
3444         {\cf20 // 2. Each successive thread will use modulo operation of that counter so it gets an atomic}\par
3445         {\cf20 //    assigned in a round-robin fashion.}\par
3446         {\cf20 // 3. This tlsLaneIdx is stored in the thread local data, so it is directly available with}\par
3447         {\cf20 //    little overhead.}\par
3448         Atomic<T>& myAtomic() DOCTEST_NOEXCEPT \{\par
3449             {\cf17 static} Atomic<size_t> laneCounter;\par
3450             DOCTEST_THREAD_LOCAL {\cf18 size_t} tlsLaneIdx =\par
3451                     laneCounter++ % DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES;\par
3452 \par
3453             {\cf19 return} m_atomics[tlsLaneIdx].atomic;\par
3454         \}\par
3455     \};\par
3456 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3457 \par
3458     {\cf20 // this holds both parameters from the command line and runtime data for tests}\par
3459     {\cf17 struct }ContextState : ContextOptions, TestRunStats, CurrentTestCaseStats\par
3460     \{\par
3461         MultiLaneAtomic<int> numAssertsCurrentTest_atomic;\par
3462         MultiLaneAtomic<int> numAssertsFailedCurrentTest_atomic;\par
3463 \par
3464         std::vector<std::vector<String>> filters = {\cf17 decltype}(filters)(9); {\cf20 // 9 different filters}\par
3465 \par
3466         std::vector<IReporter*> reporters_currently_used;\par
3467 \par
3468         assert_handler ah = {\cf17 nullptr};\par
3469 \par
3470         Timer timer;\par
3471 \par
3472         std::vector<String> stringifiedContexts; {\cf20 // logging from INFO() due to an exception}\par
3473 \par
3474         {\cf20 // stuff for subcases}\par
3475         {\cf18 bool} reachedLeaf;\par
3476         std::vector<SubcaseSignature> subcaseStack;\par
3477         std::vector<SubcaseSignature> nextSubcaseStack;\par
3478         std::unordered_set<unsigned long long> fullyTraversedSubcases;\par
3479         {\cf18 size_t} currentSubcaseDepth;\par
3480         Atomic<bool> shouldLogCurrentException;\par
3481 \par
3482         {\cf18 void} resetRunData() \{\par
3483             numTestCases                = 0;\par
3484             numTestCasesPassingFilters  = 0;\par
3485             numTestSuitesPassingFilters = 0;\par
3486             numTestCasesFailed          = 0;\par
3487             numAsserts                  = 0;\par
3488             numAssertsFailed            = 0;\par
3489             numAssertsCurrentTest       = 0;\par
3490             numAssertsFailedCurrentTest = 0;\par
3491         \}\par
3492 \par
3493         {\cf18 void} finalizeTestCaseData() \{\par
3494             seconds = timer.getElapsedSeconds();\par
3495 \par
3496             {\cf20 // update the non-atomic counters}\par
3497             numAsserts += numAssertsCurrentTest_atomic;\par
3498             numAssertsFailed += numAssertsFailedCurrentTest_atomic;\par
3499             numAssertsCurrentTest       = numAssertsCurrentTest_atomic;\par
3500             numAssertsFailedCurrentTest = numAssertsFailedCurrentTest_atomic;\par
3501 \par
3502             {\cf19 if}(numAssertsFailedCurrentTest)\par
3503                 failure_flags |= TestCaseFailureReason::AssertFailure;\par
3504 \par
3505             {\cf19 if}(Approx(currentTest->m_timeout).epsilon(DBL_EPSILON) != 0 &&\par
3506                Approx(seconds).epsilon(DBL_EPSILON) > currentTest->m_timeout)\par
3507                 failure_flags |= TestCaseFailureReason::Timeout;\par
3508 \par
3509             {\cf19 if}(currentTest->m_should_fail) \{\par
3510                 {\cf19 if}(failure_flags) \{\par
3511                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedAndDid;\par
3512                 \} {\cf19 else} \{\par
3513                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedButDidnt;\par
3514                 \}\par
3515             \} {\cf19 else} {\cf19 if}(failure_flags && currentTest->m_may_fail) \{\par
3516                 failure_flags |= TestCaseFailureReason::CouldHaveFailedAndDid;\par
3517             \} {\cf19 else} {\cf19 if}(currentTest->m_expected_failures > 0) \{\par
3518                 {\cf19 if}(numAssertsFailedCurrentTest == currentTest->m_expected_failures) \{\par
3519                     failure_flags |= TestCaseFailureReason::FailedExactlyNumTimes;\par
3520                 \} {\cf19 else} \{\par
3521                     failure_flags |= TestCaseFailureReason::DidntFailExactlyNumTimes;\par
3522                 \}\par
3523             \}\par
3524 \par
3525             {\cf18 bool} ok_to_fail = (TestCaseFailureReason::ShouldHaveFailedAndDid & failure_flags) ||\par
3526                               (TestCaseFailureReason::CouldHaveFailedAndDid & failure_flags) ||\par
3527                               (TestCaseFailureReason::FailedExactlyNumTimes & failure_flags);\par
3528 \par
3529             {\cf20 // if any subcase has failed - the whole test case has failed}\par
3530             testCaseSuccess = !(failure_flags && !ok_to_fail);\par
3531             {\cf19 if}(!testCaseSuccess)\par
3532                 numTestCasesFailed++;\par
3533         \}\par
3534     \};\par
3535 \par
3536     ContextState* g_cs = {\cf17 nullptr};\par
3537 \par
3538     {\cf20 // used to avoid locks for the debug output}\par
3539     {\cf20 // TODO: figure out if this is indeed necessary/correct - seems like either there still}\par
3540     {\cf20 // could be a race or that there wouldn't be a race even if using the context directly}\par
3541     DOCTEST_THREAD_LOCAL {\cf18 bool} g_no_colors;\par
3542 \par
3543 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3544 \} {\cf20 // namespace detail}\par
3545 \par
3546 {\cf18 char}* String::allocate(size_type sz) \{\par
3547     {\cf19 if} (sz <= last) \{\par
3548         buf[sz] = {\cf23 '\\0'};\par
3549         setLast(last - sz);\par
3550         {\cf19 return} buf;\par
3551     \} {\cf19 else} \{\par
3552         setOnHeap();\par
3553         data.size = sz;\par
3554         data.capacity = data.size + 1;\par
3555         data.ptr = {\cf17 new} {\cf18 char}[data.capacity];\par
3556         data.ptr[sz] = {\cf23 '\\0'};\par
3557         {\cf19 return} data.ptr;\par
3558     \}\par
3559 \}\par
3560 \par
3561 {\cf18 void} String::setOnHeap() {\cf17 noexcept} \{ *{\cf17 reinterpret_cast<}{\cf18 unsigned} {\cf18 char}*{\cf17 >}(&buf[last]) = 128; \}\par
3562 {\cf18 void} String::setLast(size_type in) {\cf17 noexcept} \{ buf[last] = char(in); \}\par
3563 {\cf18 void} String::setSize(size_type sz) {\cf17 noexcept} \{\par
3564     {\cf19 if} (isOnStack()) \{ buf[sz] = {\cf23 '\\0'}; setLast(last - sz); \}\par
3565     {\cf19 else} \{ data.ptr[sz] = {\cf23 '\\0'}; data.size = sz; \}\par
3566 \}\par
3567 \par
3568 {\cf18 void} String::copy({\cf17 const} String& other) \{\par
3569     {\cf19 if}(other.isOnStack()) \{\par
3570         memcpy(buf, other.buf, len);\par
3571     \} {\cf19 else} \{\par
3572         memcpy(allocate(other.data.size), other.data.ptr, other.data.size);\par
3573     \}\par
3574 \}\par
3575 \par
3576 String::String() {\cf17 noexcept} \{\par
3577     buf[0] = {\cf23 '\\0'};\par
3578     setLast();\par
3579 \}\par
3580 \par
3581 String::~String() \{\par
3582     {\cf19 if}(!isOnStack())\par
3583         {\cf17 delete}[] data.ptr;\par
3584 \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3585 \par
3586 String::String({\cf17 const} {\cf18 char}* in)\par
3587         : String(in, strlen(in)) \{\}\par
3588 \par
3589 String::String({\cf17 const} {\cf18 char}* in, size_type in_size) \{\par
3590     memcpy(allocate(in_size), in, in_size);\par
3591 \}\par
3592 \par
3593 String::String(std::istream& in, size_type in_size) \{\par
3594     in.read(allocate(in_size), in_size);\par
3595 \}\par
3596 \par
3597 String::String({\cf17 const} String& other) \{ copy(other); \}\par
3598 \par
3599 String& String::operator=({\cf17 const} String& other) \{\par
3600     {\cf19 if}({\cf17 this} != &other) \{\par
3601         {\cf19 if}(!isOnStack())\par
3602             {\cf17 delete}[] data.ptr;\par
3603 \par
3604         copy(other);\par
3605     \}\par
3606 \par
3607     {\cf19 return} *{\cf17 this};\par
3608 \}\par
3609 \par
3610 String& String::operator+=({\cf17 const} String& other) \{\par
3611     {\cf17 const} size_type my_old_size = size();\par
3612     {\cf17 const} size_type other_size  = other.size();\par
3613     {\cf17 const} size_type total_size  = my_old_size + other_size;\par
3614     {\cf19 if}(isOnStack()) \{\par
3615         {\cf19 if}(total_size < len) \{\par
3616             {\cf20 // append to the current stack space}\par
3617             memcpy(buf + my_old_size, other.c_str(), other_size + 1);\par
3618             {\cf20 // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3619             setLast(last - total_size);\par
3620         \} {\cf19 else} \{\par
3621             {\cf20 // alloc new chunk}\par
3622             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[total_size + 1];\par
3623             {\cf20 // copy current data to new location before writing in the union}\par
3624             memcpy(temp, buf, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3625             {\cf20 // update data in union}\par
3626             setOnHeap();\par
3627             data.size     = total_size;\par
3628             data.capacity = data.size + 1;\par
3629             data.ptr      = temp;\par
3630             {\cf20 // transfer the rest of the data}\par
3631             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3632         \}\par
3633     \} {\cf19 else} \{\par
3634         {\cf19 if}(data.capacity > total_size) \{\par
3635             {\cf20 // append to the current heap block}\par
3636             data.size = total_size;\par
3637             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3638         \} {\cf19 else} \{\par
3639             {\cf20 // resize}\par
3640             data.capacity *= 2;\par
3641             {\cf19 if}(data.capacity <= total_size)\par
3642                 data.capacity = total_size + 1;\par
3643             {\cf20 // alloc new chunk}\par
3644             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[data.capacity];\par
3645             {\cf20 // copy current data to new location before releasing it}\par
3646             memcpy(temp, data.ptr, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3647             {\cf20 // release old chunk}\par
3648             {\cf17 delete}[] data.ptr;\par
3649             {\cf20 // update the rest of the union members}\par
3650             data.size = total_size;\par
3651             data.ptr  = temp;\par
3652             {\cf20 // transfer the rest of the data}\par
3653             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3654         \}\par
3655     \}\par
3656 \par
3657     {\cf19 return} *{\cf17 this};\par
3658 \}\par
3659 \par
3660 String::String(String&& other) {\cf17 noexcept} \{\par
3661     memcpy(buf, other.buf, len);\par
3662     other.buf[0] = {\cf23 '\\0'};\par
3663     other.setLast();\par
3664 \}\par
3665 \par
3666 String& String::operator=(String&& other) {\cf17 noexcept} \{\par
3667     {\cf19 if}({\cf17 this} != &other) \{\par
3668         {\cf19 if}(!isOnStack())\par
3669             {\cf17 delete}[] data.ptr;\par
3670         memcpy(buf, other.buf, len);\par
3671         other.buf[0] = {\cf23 '\\0'};\par
3672         other.setLast();\par
3673     \}\par
3674     {\cf19 return} *{\cf17 this};\par
3675 \}\par
3676 \par
3677 {\cf18 char} String::operator[](size_type i){\cf17  const }\{\par
3678     {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->{\cf17 operator}[](i);\par
3679 \}\par
3680 \par
3681 {\cf18 char}& String::operator[](size_type i) \{\par
3682     {\cf19 if}(isOnStack())\par
3683         {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf)[i];\par
3684     {\cf19 return} data.ptr[i];\par
3685 \}\par
3686 \par
3687 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmaybe-uninitialized"})\par
3688 String::size_type String::size(){\cf17  const }\{\par
3689     {\cf19 if}(isOnStack())\par
3690         {\cf19 return} last - (size_type(buf[last]) & 31); {\cf20 // using "last" would work only if "len" is 32}\par
3691     {\cf19 return} data.size;\par
3692 \}\par
3693 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3694 \par
3695 String::size_type String::capacity(){\cf17  const }\{\par
3696     {\cf19 if}(isOnStack())\par
3697         {\cf19 return} len;\par
3698     {\cf19 return} data.capacity;\par
3699 \}\par
3700 \par
3701 String String::substr(size_type pos, size_type cnt) && \{\par
3702     cnt = std::min(cnt, size() - 1 - pos);\par
3703     {\cf18 char}* cptr = c_str();\par
3704     memmove(cptr, cptr + pos, cnt);\par
3705     setSize(cnt);\par
3706     {\cf19 return} std::move(*{\cf17 this});\par
3707 \}\par
3708 \par
3709 String String::substr(size_type pos, size_type cnt) {\cf17 const} & \{\par
3710     cnt = std::min(cnt, size() - 1 - pos);\par
3711     {\cf19 return} String\{ c_str() + pos, cnt \};\par
3712 \}\par
3713 \par
3714 String::size_type String::find({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3715     {\cf17 const} {\cf18 char}* begin = c_str();\par
3716     {\cf17 const} {\cf18 char}* end = begin + size();\par
3717     {\cf17 const} {\cf18 char}* it = begin + pos;\par
3718     {\cf19 for} (; it < end && *it != ch; it++);\par
3719     {\cf19 if} (it < end) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3720     {\cf19 else} \{ {\cf19 return} npos; \}\par
3721 \}\par
3722 \par
3723 String::size_type String::rfind({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3724     {\cf17 const} {\cf18 char}* begin = c_str();\par
3725     {\cf17 const} {\cf18 char}* it = begin + std::min(pos, size() - 1);\par
3726     {\cf19 for} (; it >= begin && *it != ch; it--);\par
3727     {\cf19 if} (it >= begin) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3728     {\cf19 else} \{ {\cf19 return} npos; \}\par
3729 \}\par
3730 \par
3731 {\cf18 int} String::compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case){\cf17  const }\{\par
3732     {\cf19 if}(no_case)\par
3733         {\cf19 return} doctest::stricmp(c_str(), other);\par
3734     {\cf19 return} std::strcmp(c_str(), other);\par
3735 \}\par
3736 \par
3737 {\cf18 int} String::compare({\cf17 const} String& other, {\cf18 bool} no_case){\cf17  const }\{\par
3738     {\cf19 return} compare(other.c_str(), no_case);\par
3739 \}\par
3740 \par
3741 String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return}  String(lhs) += rhs; \}\par
3742 \par
3743 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) == 0; \}\par
3744 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) != 0; \}\par
3745 {\cf18 bool} operator< ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) < 0; \}\par
3746 {\cf18 bool} operator> ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) > 0; \}\par
3747 {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) < 0 : {\cf17 true}; \}\par
3748 {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) > 0 : {\cf17 true}; \}\par
3749 \par
3750 std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in) \{ {\cf19 return} s << in.c_str(); \}\par
3751 \par
3752 Contains::Contains({\cf17 const} String& str) : string(str) \{ \}\par
3753 \par
3754 {\cf18 bool} Contains::checkWith({\cf17 const} String& other){\cf17  const }\{\par
3755     {\cf19 return} strstr(other.c_str(), {\cf18 string}.c_str()) != {\cf17 nullptr};\par
3756 \}\par
3757 \par
3758 String toString({\cf17 const} Contains& in) \{\par
3759     {\cf19 return} {\cf22 "Contains( "} + in.string + {\cf22 " )"};\par
3760 \}\par
3761 \par
3762 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} rhs.checkWith(lhs); \}\par
3763 {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.checkWith(rhs); \}\par
3764 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} !rhs.checkWith(lhs); \}\par
3765 {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} !lhs.checkWith(rhs); \}\par
3766 \par
3767 {\cf17 namespace }\{\par
3768     {\cf18 void} color_to_stream(std::ostream&, Color::Enum) DOCTEST_BRANCH_ON_DISABLED(\{\}, ;)\par
3769 \} {\cf20 // namespace}\par
3770 \par
3771 {\cf17 namespace }Color \{\par
3772     std::ostream& operator<<(std::ostream& s, Color::Enum code) \{\par
3773         color_to_stream(s, code);\par
3774         {\cf19 return} s;\par
3775     \}\par
3776 \} {\cf20 // namespace Color}\par
3777 \par
3778 {\cf20 // clang-format off}\par
3779 {\cf17 const} {\cf18 char}* assertString(assertType::Enum at) \{\par
3780     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4061) {\cf20 // enum 'x' in switch of enum 'y' is not explicitely handled}\par
3781     {\cf21 #define DOCTEST_GENERATE_ASSERT_TYPE_CASE(assert_type) case assertType::DT_ ## assert_type: return #assert_type}\par
3782 {\cf21     #define DOCTEST_GENERATE_ASSERT_TYPE_CASES(assert_type) \\}\par
3783 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN_ ## assert_type); \\}\par
3784 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK_ ## assert_type); \\}\par
3785 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE_ ## assert_type)}\par
3786     {\cf19 switch}(at) \{\par
3787         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN);\par
3788         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK);\par
3789         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE);\par
3790 \par
3791         DOCTEST_GENERATE_ASSERT_TYPE_CASES(FALSE);\par
3792 \par
3793         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS);\par
3794 \par
3795         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_AS);\par
3796 \par
3797         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH);\par
3798 \par
3799         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH_AS);\par
3800 \par
3801         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NOTHROW);\par
3802 \par
3803         DOCTEST_GENERATE_ASSERT_TYPE_CASES(EQ);\par
3804         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NE);\par
3805         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GT);\par
3806         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LT);\par
3807         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GE);\par
3808         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LE);\par
3809 \par
3810         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY);\par
3811         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY_FALSE);\par
3812 \par
3813         {\cf19 default}: DOCTEST_INTERNAL_ERROR({\cf22 "Tried stringifying invalid assert type!"});\par
3814     \}\par
3815     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3816 \}\par
3817 {\cf20 // clang-format on}\par
3818 \par
3819 {\cf17 const} {\cf18 char}* failureString(assertType::Enum at) \{\par
3820     {\cf19 if}(at & assertType::is_warn) \par
3821         {\cf19 return} {\cf22 "WARNING"};\par
3822     {\cf19 if}(at & assertType::is_check) \par
3823         {\cf19 return} {\cf22 "ERROR"};\par
3824     {\cf19 if}(at & assertType::is_require) \par
3825         {\cf19 return} {\cf22 "FATAL ERROR"};\par
3826     {\cf19 return} {\cf22 ""};\par
3827 \}\par
3828 \par
3829 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3830 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3831 {\cf20 // depending on the current options this will remove the path of filenames}\par
3832 {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file) \{\par
3833 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3834     {\cf19 if}(getContextOptions()->no_path_in_filenames) \{\par
3835         {\cf17 auto} back    = std::strrchr(file, {\cf23 '\\\\'});\par
3836         {\cf17 auto} forward = std::strrchr(file, {\cf23 '/'});\par
3837         {\cf19 if}(back || forward) \{\par
3838             {\cf19 if}(back > forward)\par
3839                 forward = back;\par
3840             {\cf19 return} forward + 1;\par
3841         \}\par
3842     \}\par
3843 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3844     {\cf19 return} file;\par
3845 \}\par
3846 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3847 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3848 \par
3849 {\cf18 bool} SubcaseSignature::operator==({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3850     {\cf19 return} m_line == other.m_line\par
3851         && std::strcmp(m_file, other.m_file) == 0\par
3852         && m_name == other.m_name;\par
3853 \}\par
3854 \par
3855 {\cf18 bool} SubcaseSignature::operator<({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3856     {\cf19 if}(m_line != other.m_line)\par
3857         {\cf19 return} m_line < other.m_line;\par
3858     {\cf19 if}(std::strcmp(m_file, other.m_file) != 0)\par
3859         {\cf19 return} std::strcmp(m_file, other.m_file) < 0;\par
3860     {\cf19 return} m_name.compare(other.m_name) < 0;\par
3861 \}\par
3862 \par
3863 DOCTEST_DEFINE_INTERFACE(IContextScope)\par
3864 \par
3865 {\cf17 namespace }detail \{\par
3866     {\cf18 void} filldata<const void*>::fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in) \{\par
3867         {\cf19 if} (in) \{ *stream << in; \}\par
3868         {\cf19 else} \{ *stream << {\cf22 "nullptr"}; \}\par
3869     \}\par
3870 \par
3871     {\cf17 template} <{\cf17 typename} T>\par
3872     String toStreamLit(T t) \{\par
3873         std::ostream* os = tlssPush();\par
3874         os->operator<<(t);\par
3875         {\cf19 return} tlssPop();\par
3876     \}\par
3877 \}\par
3878 \par
3879 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3880 String toString({\cf17 const} {\cf18 char}* in) \{ {\cf19 return} String({\cf22 "\\""}) + (in ? in : {\cf22 "\{null string\}"}) + {\cf22 "\\""}; \}\par
3881 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3882 \par
3883 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
3884 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
3885 String toString({\cf17 const} std::string& in) \{ {\cf19 return} in.c_str(); \}\par
3886 {\cf21 #endif }{\cf20 // VS 2019}\par
3887 \par
3888 String toString(String in) \{ {\cf19 return} in; \}\par
3889 \par
3890 String toString(std::nullptr_t) \{ {\cf19 return} {\cf22 "nullptr"}; \}\par
3891 \par
3892 String toString({\cf18 bool} in) \{ {\cf19 return} in ? {\cf22 "true"} : {\cf22 "false"}; \}\par
3893 \par
3894 String toString({\cf18 float} in) \{ {\cf19 return} toStreamLit(in); \}\par
3895 String toString({\cf18 double} in) \{ {\cf19 return} toStreamLit(in); \}\par
3896 String toString({\cf18 double} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3897 \par
3898 String toString({\cf18 char} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3899 String toString({\cf18 char} {\cf18 signed} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3900 String toString({\cf18 char} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(in)); \}\par
3901 String toString({\cf18 short} in) \{ {\cf19 return} toStreamLit(in); \}\par
3902 String toString({\cf18 short} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3903 String toString({\cf18 signed} in) \{ {\cf19 return} toStreamLit(in); \}\par
3904 String toString({\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3905 String toString({\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3906 String toString({\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3907 String toString({\cf18 long} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3908 String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3909 \par
3910 Approx::Approx({\cf18 double} value)\par
3911         : m_epsilon({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::numeric_limits<float>::epsilon()) * 100)\par
3912         , m_scale(1.0)\par
3913         , m_value(value) \{\}\par
3914 \par
3915 Approx Approx::operator()({\cf18 double} value){\cf17  const }\{\par
3916     Approx approx(value);\par
3917     approx.epsilon(m_epsilon);\par
3918     approx.scale(m_scale);\par
3919     {\cf19 return} approx;\par
3920 \}\par
3921 \par
3922 Approx& Approx::epsilon({\cf18 double} newEpsilon) \{\par
3923     m_epsilon = newEpsilon;\par
3924     {\cf19 return} *{\cf17 this};\par
3925 \}\par
3926 Approx& Approx::scale({\cf18 double} newScale) \{\par
3927     m_scale = newScale;\par
3928     {\cf19 return} *{\cf17 this};\par
3929 \}\par
3930 \par
3931 {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{\par
3932     {\cf20 // Thanks to Richard Harris for his help refining this formula}\par
3933     {\cf19 return} std::fabs(lhs - rhs.m_value) <\par
3934            rhs.m_epsilon * (rhs.m_scale + std::max<double>(std::fabs(lhs), std::fabs(rhs.m_value)));\par
3935 \}\par
3936 {\cf18 bool} operator==({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
3937 {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
3938 {\cf18 bool} operator!=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
3939 {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value || lhs == rhs; \}\par
3940 {\cf18 bool} operator<=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs || lhs == rhs; \}\par
3941 {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value || lhs == rhs; \}\par
3942 {\cf18 bool} operator>=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs || lhs == rhs; \}\par
3943 {\cf18 bool} operator<({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value && lhs != rhs; \}\par
3944 {\cf18 bool} operator<({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs && lhs != rhs; \}\par
3945 {\cf18 bool} operator>({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value && lhs != rhs; \}\par
3946 {\cf18 bool} operator>({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs && lhs != rhs; \}\par
3947 \par
3948 String toString({\cf17 const} Approx& in) \{\par
3949     {\cf19 return} {\cf22 "Approx( "} + doctest::toString(in.m_value) + {\cf22 " )"};\par
3950 \}\par
3951 {\cf17 const} ContextOptions* getContextOptions() \{ {\cf19 return} DOCTEST_BRANCH_ON_DISABLED({\cf17 nullptr}, g_cs); \}\par
3952 \par
3953 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4738)\par
3954 {\cf17 template} <{\cf17 typename} F>\par
3955 IsNaN<F>::operator bool(){\cf17  const }\{\par
3956     {\cf19 return} std::isnan(value) ^ flipped;\par
3957 \}\par
3958 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3959 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<float>;\par
3960 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<double>;\par
3961 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<long double>;\par
3962 {\cf17 template} <{\cf17 typename} F>\par
3963 String toString(IsNaN<F> in) \{ {\cf19 return} String(in.flipped ? {\cf22 "! "} : {\cf22 ""}) + {\cf22 "IsNaN( "} + doctest::toString(in.value) + {\cf22 " )"}; \}\par
3964 String toString(IsNaN<float> in) \{ {\cf19 return} toString<float>(in); \}\par
3965 String toString(IsNaN<double> in) \{ {\cf19 return} toString<double>(in); \}\par
3966 String toString(IsNaN<double long> in) \{ {\cf19 return} toString<double long>(in); \}\par
3967 \par
3968 \} {\cf20 // namespace doctest}\par
3969 \par
3970 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3971 {\cf17 namespace }doctest \{\par
3972 Context::Context({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3973 Context::~Context() = {\cf19 default};\par
3974 {\cf18 void} Context::applyCommandLine({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3975 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3976 {\cf18 void} Context::clearFilters() \{\}\par
3977 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 bool}) \{\}\par
3978 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 int}) \{\}\par
3979 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3980 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} {\cf17 false}; \}\par
3981 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{\}\par
3982 {\cf18 void} Context::setAssertHandler(detail::assert_handler) \{\}\par
3983 {\cf18 void} Context::setCout(std::ostream*) \{\}\par
3984 {\cf18 int}  Context::run() \{ {\cf19 return} 0; \}\par
3985 \par
3986 {\cf18 int}                         IReporter::get_num_active_contexts() \{ {\cf19 return} 0; \}\par
3987 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3988 {\cf18 int}                         IReporter::get_num_stringified_contexts() \{ {\cf19 return} 0; \}\par
3989 {\cf17 const} String*               IReporter::get_stringified_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3990 \par
3991 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}*, {\cf18 int}, IReporter*) \{ {\cf19 return} 0; \}\par
3992 \par
3993 \} {\cf20 // namespace doctest}\par
3994 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3995 \par
3996 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_NONE)}\par
3997 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_WINDOWS) && !defined(DOCTEST_CONFIG_COLORS_ANSI)}\par
3998 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3999 {\cf21 #define DOCTEST_CONFIG_COLORS_WINDOWS}\par
4000 {\cf21 #else }{\cf20 // linux}\par
4001 {\cf21 #define DOCTEST_CONFIG_COLORS_ANSI}\par
4002 {\cf21 #endif }{\cf20 // platform}\par
4003 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS && DOCTEST_CONFIG_COLORS_ANSI}\par
4004 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_NONE}\par
4005 \par
4006 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
4007 {\cf20 // holds the current test suite}\par
4008 doctest::detail::TestSuite& getCurrentTestSuite() \{\par
4009     {\cf17 static} doctest::detail::TestSuite data\{\};\par
4010     {\cf19 return} data;\par
4011 \}\par
4012 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
4013 \par
4014 {\cf17 namespace }doctest \{\par
4015 {\cf17 namespace }\{\par
4016     {\cf20 // the int (priority) is part of the key for automatic sorting - sadly one can register a}\par
4017     {\cf20 // reporter with a duplicate name and a different priority but hopefully that won't happen often :|}\par
4018     {\cf17 using }reporterMap = std::map<std::pair<int, String>, reporterCreatorFunc>;\par
4019 \par
4020     reporterMap& getReporters() \{\par
4021         {\cf17 static} reporterMap data;\par
4022         {\cf19 return} data;\par
4023     \}\par
4024     reporterMap& getListeners() \{\par
4025         {\cf17 static} reporterMap data;\par
4026         {\cf19 return} data;\par
4027     \}\par
4028 \} {\cf20 // namespace}\par
4029 {\cf17 namespace }detail \{\par
4030 {\cf21 #define DOCTEST_ITERATE_THROUGH_REPORTERS(function, ...)                                           \\}\par
4031 {\cf21     for(auto& curr_rep : g_cs->reporters_currently_used)                                           \\}\par
4032 {\cf21     curr_rep->function(__VA_ARGS__)}\par
4033 \par
4034     {\cf18 bool} checkIfShouldThrow(assertType::Enum at) \{\par
4035         {\cf19 if}(at & assertType::is_require) \par
4036             {\cf19 return} {\cf17 true};\par
4037 \par
4038         {\cf19 if}((at & assertType::is_check) \par
4039            && getContextOptions()->abort_after > 0 &&\par
4040            (g_cs->numAssertsFailed + g_cs->numAssertsFailedCurrentTest_atomic) >=\par
4041                    getContextOptions()->abort_after)\par
4042             {\cf19 return} {\cf17 true};\par
4043 \par
4044         {\cf19 return} {\cf17 false};\par
4045     \}\par
4046 \par
4047 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4048     DOCTEST_NORETURN {\cf18 void} throwException() \{\par
4049         g_cs->shouldLogCurrentException = {\cf17 false};\par
4050         {\cf19 throw} TestFailureException(); {\cf20 // NOLINT(hicpp-exception-baseclass)}\par
4051     \}\par
4052 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4053     {\cf18 void} throwException() \{\}\par
4054 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4055 \} {\cf20 // namespace detail}\par
4056 \par
4057 {\cf17 namespace }\{\par
4058     {\cf17 using namespace }detail;\par
4059     {\cf20 // matching of a string against a wildcard mask (case sensitivity configurable) taken from}\par
4060     {\cf20 // https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing}\par
4061     {\cf18 int} wildcmp({\cf17 const} {\cf18 char}* str, {\cf17 const} {\cf18 char}* wild, {\cf18 bool} caseSensitive) \{\par
4062         {\cf17 const} {\cf18 char}* cp = str;\par
4063         {\cf17 const} {\cf18 char}* mp = wild;\par
4064 \par
4065         {\cf19 while}((*str) && (*wild != {\cf23 '*'})) \{\par
4066             {\cf19 if}((caseSensitive ? (*wild != *str) : (tolower(*wild) != tolower(*str))) &&\par
4067                (*wild != {\cf22 '?'})) \{\par
4068                 {\cf19 return} 0;\par
4069             \}\par
4070             wild++;\par
4071             str++;\par
4072         \}\par
4073 \par
4074         {\cf19 while}(*str) \{\par
4075             {\cf19 if}(*wild == {\cf23 '*'}) \{\par
4076                 {\cf19 if}(!*++wild) \{\par
4077                     {\cf19 return} 1;\par
4078                 \}\par
4079                 mp = wild;\par
4080                 cp = str + 1;\par
4081             \} {\cf19 else} {\cf19 if}((caseSensitive ? (*wild == *str) : (tolower(*wild) == tolower(*str))) ||\par
4082                       (*wild == {\cf22 '?'})) \{\par
4083                 wild++;\par
4084                 str++;\par
4085             \} {\cf19 else} \{\par
4086                 wild = mp;   \par
4087                 str  = cp++; \par
4088             \}\par
4089         \}\par
4090 \par
4091         {\cf19 while}(*wild == {\cf23 '*'}) \{\par
4092             wild++;\par
4093         \}\par
4094         {\cf19 return} !*wild;\par
4095     \}\par
4096 \par
4097     {\cf20 // checks if the name matches any of the filters (and can be configured what to do when empty)}\par
4098     {\cf18 bool} matchesAny({\cf17 const} {\cf18 char}* name, {\cf17 const} std::vector<String>& filters, {\cf18 bool} matchEmpty,\par
4099         {\cf18 bool} caseSensitive) \{\par
4100         {\cf19 if} (filters.empty() && matchEmpty)\par
4101             {\cf19 return} {\cf17 true};\par
4102         {\cf19 for} ({\cf17 auto}& curr : filters)\par
4103             if (wildcmp(name, curr.c_str(), caseSensitive))\par
4104                 return true;\par
4105         {\cf19 return} {\cf17 false};\par
4106     \}\par
4107 \par
4108     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf18 unsigned} {\cf18 long} {\cf18 long} a, {\cf18 unsigned} {\cf18 long} {\cf18 long} b) \{\par
4109         {\cf19 return} (a << 5) + b;\par
4110     \}\par
4111 \par
4112     {\cf20 // C string hash function (djb2) - taken from http://www.cse.yorku.ca/~oz/hash.html}\par
4113     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} {\cf18 char}* str) \{\par
4114         {\cf18 unsigned} {\cf18 long} {\cf18 long} hash = 5381;\par
4115         {\cf18 char} c;\par
4116         {\cf19 while} ((c = *str++))\par
4117             hash = ((hash << 5) + hash) + c; {\cf20 // hash * 33 + c}\par
4118         {\cf19 return} hash;\par
4119     \}\par
4120 \par
4121     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} SubcaseSignature& sig) \{\par
4122         {\cf19 return} hash(hash(hash(sig.m_file), hash(sig.m_name.c_str())), sig.m_line);\par
4123     \}\par
4124 \par
4125     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs, {\cf18 size_t} count) \{\par
4126         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4127         {\cf17 auto} end = sigs.begin() + count;\par
4128         {\cf19 for} ({\cf17 auto} it = sigs.begin(); it != end; it++) \{\par
4129             running = hash(running, hash(*it));\par
4130         \}\par
4131         {\cf19 return} running;\par
4132     \}\par
4133 \par
4134     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs) \{\par
4135         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4136         {\cf19 for} ({\cf17 const} SubcaseSignature& sig : sigs) \{\par
4137             running = hash(running, hash(sig));\par
4138         \}\par
4139         {\cf19 return} running;\par
4140     \}\par
4141 \} {\cf20 // namespace}\par
4142 {\cf17 namespace }detail \{\par
4143     {\cf18 bool} Subcase::checkFilters() \{\par
4144         {\cf19 if} (g_cs->subcaseStack.size() < {\cf18 size_t}(g_cs->subcase_filter_levels)) \{\par
4145             {\cf19 if} (!matchesAny(m_signature.m_name.c_str(), g_cs->filters[6], {\cf17 true}, g_cs->case_sensitive))\par
4146                 {\cf19 return} {\cf17 true};\par
4147             {\cf19 if} (matchesAny(m_signature.m_name.c_str(), g_cs->filters[7], {\cf17 false}, g_cs->case_sensitive))\par
4148                 {\cf19 return} {\cf17 true};\par
4149         \}\par
4150         {\cf19 return} {\cf17 false};\par
4151     \}\par
4152 \par
4153     Subcase::Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line)\par
4154             : m_signature(\{name, file, line\}) \{\par
4155         {\cf19 if} (!g_cs->reachedLeaf) \{\par
4156             {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->subcaseStack.size()\par
4157                 || g_cs->nextSubcaseStack[g_cs->subcaseStack.size()] == m_signature) \{\par
4158                 {\cf20 // Going down.}\par
4159                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4160 \par
4161                 g_cs->subcaseStack.push_back(m_signature);\par
4162                 g_cs->currentSubcaseDepth++;\par
4163                 m_entered = {\cf17 true};\par
4164                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4165             \}\par
4166         \} {\cf19 else} \{\par
4167             {\cf19 if} (g_cs->subcaseStack[g_cs->currentSubcaseDepth] == m_signature) \{\par
4168                 {\cf20 // This subcase is reentered via control flow.}\par
4169                 g_cs->currentSubcaseDepth++;\par
4170                 m_entered = {\cf17 true};\par
4171                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4172             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->currentSubcaseDepth\par
4173                     && g_cs->fullyTraversedSubcases.find(hash(hash(g_cs->subcaseStack, g_cs->currentSubcaseDepth), hash(m_signature)))\par
4174                     == g_cs->fullyTraversedSubcases.end()) \{\par
4175                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4176                 {\cf20 // This subcase is part of the one to be executed next.}\par
4177                 g_cs->nextSubcaseStack.clear();\par
4178                 g_cs->nextSubcaseStack.insert(g_cs->nextSubcaseStack.end(),\par
4179                     g_cs->subcaseStack.begin(), g_cs->subcaseStack.begin() + g_cs->currentSubcaseDepth);\par
4180                 g_cs->nextSubcaseStack.push_back(m_signature);\par
4181             \}\par
4182         \}\par
4183     \}\par
4184 \par
4185     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4186     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4187     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4188 \par
4189     Subcase::~Subcase() \{\par
4190         {\cf19 if} (m_entered) \{\par
4191             g_cs->currentSubcaseDepth--;\par
4192 \par
4193             {\cf19 if} (!g_cs->reachedLeaf) \{\par
4194                 {\cf20 // Leaf.}\par
4195                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4196                 g_cs->nextSubcaseStack.clear();\par
4197                 g_cs->reachedLeaf = {\cf17 true};\par
4198             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.empty()) \{\par
4199                 {\cf20 // All children are finished.}\par
4200                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4201             \}\par
4202 \par
4203 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4204             {\cf19 if}(std::uncaught_exceptions() > 0\par
4205 #{\cf19 else}\par
4206             {\cf19 if}(std::uncaught_exception()\par
4207 #endif\par
4208                 && g_cs->shouldLogCurrentException) \{\par
4209                 DOCTEST_ITERATE_THROUGH_REPORTERS(\par
4210                         test_case_exception, \{{\cf22 "exception thrown in subcase - will translate later "}\par
4211                                                 {\cf22 "when the whole test case has been exited (cannot "}\par
4212                                                 {\cf22 "translate while there is an active exception)"},\par
4213                                                 false\});\par
4214                 g_cs->shouldLogCurrentException = {\cf17 false};\par
4215             \}\par
4216 \par
4217             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4218         \}\par
4219     \}\par
4220 \par
4221     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4222     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4223     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4224 \par
4225     Subcase::operator bool(){\cf17  const }\{ {\cf19 return} m_entered; \}\par
4226 \par
4227     Result::Result({\cf18 bool} passed, {\cf17 const} String& decomposition)\par
4228             : m_passed(passed)\par
4229             , m_decomp(decomposition) \{\}\par
4230 \par
4231     ExpressionDecomposer::ExpressionDecomposer(assertType::Enum at)\par
4232             : m_at(at) \{\}\par
4233 \par
4234     TestSuite& TestSuite::operator*({\cf17 const} {\cf18 char}* in) \{\par
4235         m_test_suite = in;\par
4236         {\cf19 return} *{\cf17 this};\par
4237     \}\par
4238 \par
4239     TestCase::TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
4240                        {\cf17 const} String& type, {\cf18 int} template_id) \{\par
4241         m_file              = file;\par
4242         m_line              = line;\par
4243         m_name              = {\cf17 nullptr}; {\cf20 // will be later overridden in operator*}\par
4244         m_test_suite        = test_suite.m_test_suite;\par
4245         m_description       = test_suite.m_description;\par
4246         m_skip              = test_suite.m_skip;\par
4247         m_no_breaks         = test_suite.m_no_breaks;\par
4248         m_no_output         = test_suite.m_no_output;\par
4249         m_may_fail          = test_suite.m_may_fail;\par
4250         m_should_fail       = test_suite.m_should_fail;\par
4251         m_expected_failures = test_suite.m_expected_failures;\par
4252         m_timeout           = test_suite.m_timeout;\par
4253 \par
4254         m_test        = test;\par
4255         m_type        = type;\par
4256         m_template_id = template_id;\par
4257     \}\par
4258 \par
4259     TestCase::TestCase({\cf17 const} TestCase& other)\par
4260             : TestCaseData() \{\par
4261         *{\cf17 this} = other;\par
4262     \}\par
4263 \par
4264     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
4265     TestCase& TestCase::operator=(const TestCase& other) \{\par
4266         TestCaseData::operator=(other);\par
4267         m_test        = other.m_test;\par
4268         m_type        = other.m_type;\par
4269         m_template_id = other.m_template_id;\par
4270         m_full_name   = other.m_full_name;\par
4271 \par
4272         {\cf19 if}(m_template_id != -1)\par
4273             m_name = m_full_name.c_str();\par
4274         {\cf19 return} *{\cf17 this};\par
4275     \}\par
4276     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4277 \par
4278     TestCase& TestCase::operator*({\cf17 const} {\cf18 char}* in) \{\par
4279         m_name = in;\par
4280         {\cf20 // make a new name with an appended type for templated test case}\par
4281         {\cf19 if}(m_template_id != -1) \{\par
4282             m_full_name = String(m_name) + {\cf22 "<"} + m_type + {\cf22 ">"};\par
4283             {\cf20 // redirect the name to point to the newly constructed full name}\par
4284             m_name = m_full_name.c_str();\par
4285         \}\par
4286         {\cf19 return} *{\cf17 this};\par
4287     \}\par
4288 \par
4289     {\cf18 bool} TestCase::operator<({\cf17 const} TestCase& other){\cf17  const }\{\par
4290         {\cf20 // this will be used only to differentiate between test cases - not relevant for sorting}\par
4291         {\cf19 if}(m_line != other.m_line)\par
4292             {\cf19 return} m_line < other.m_line;\par
4293         {\cf17 const} {\cf18 int} name_cmp = strcmp(m_name, other.m_name);\par
4294         {\cf19 if}(name_cmp != 0)\par
4295             {\cf19 return} name_cmp < 0;\par
4296         {\cf17 const} {\cf18 int} file_cmp = m_file.compare(other.m_file);\par
4297         {\cf19 if}(file_cmp != 0)\par
4298             {\cf19 return} file_cmp < 0;\par
4299         {\cf19 return} m_template_id < other.m_template_id;\par
4300     \}\par
4301 \par
4302     {\cf20 // all the registered tests}\par
4303     std::set<TestCase>& getRegisteredTests() \{\par
4304         {\cf17 static} std::set<TestCase> data;\par
4305         {\cf19 return} data;\par
4306     \}\par
4307 \} {\cf20 // namespace detail}\par
4308 {\cf17 namespace }\{\par
4309     {\cf17 using namespace }detail;\par
4310     {\cf20 // for sorting tests by file/line}\par
4311     {\cf18 bool} fileOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4312         {\cf20 // this is needed because MSVC gives different case for drive letters}\par
4313         {\cf20 // for __FILE__ when evaluated in a header and a source file}\par
4314         {\cf17 const} {\cf18 int} res = lhs->m_file.compare(rhs->m_file, {\cf18 bool}(DOCTEST_MSVC));\par
4315         {\cf19 if}(res != 0)\par
4316             {\cf19 return} res < 0;\par
4317         {\cf19 if}(lhs->m_line != rhs->m_line)\par
4318             {\cf19 return} lhs->m_line < rhs->m_line;\par
4319         {\cf19 return} lhs->m_template_id < rhs->m_template_id;\par
4320     \}\par
4321 \par
4322     {\cf20 // for sorting tests by suite/file/line}\par
4323     {\cf18 bool} suiteOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4324         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_test_suite, rhs->m_test_suite);\par
4325         {\cf19 if}(res != 0)\par
4326             {\cf19 return} res < 0;\par
4327         {\cf19 return} fileOrderComparator(lhs, rhs);\par
4328     \}\par
4329 \par
4330     {\cf20 // for sorting tests by name/suite/file/line}\par
4331     {\cf18 bool} nameOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4332         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_name, rhs->m_name);\par
4333         {\cf19 if}(res != 0)\par
4334             {\cf19 return} res < 0;\par
4335         {\cf19 return} suiteOrderComparator(lhs, rhs);\par
4336     \}\par
4337 \par
4338     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"})\par
4339     void color_to_stream(std::ostream& s, Color::Enum code) \{\par
4340         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(s);    {\cf20 // for DOCTEST_CONFIG_COLORS_NONE or DOCTEST_CONFIG_COLORS_WINDOWS}\par
4341         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(code); {\cf20 // for DOCTEST_CONFIG_COLORS_NONE}\par
4342 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_ANSI}\par
4343         {\cf19 if}(g_no_colors ||\par
4344            (isatty(STDOUT_FILENO) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4345             {\cf19 return};\par
4346 \par
4347         {\cf17 auto} col = {\cf22 ""};\par
4348         {\cf20 // clang-format off}\par
4349             {\cf19 switch}(code) \{ \par
4350                 {\cf19 case} Color::Red:         col = {\cf22 "[0;31m"}; {\cf19 break};\par
4351                 {\cf19 case} Color::Green:       col = {\cf22 "[0;32m"}; {\cf19 break};\par
4352                 {\cf19 case} Color::Blue:        col = {\cf22 "[0;34m"}; {\cf19 break};\par
4353                 {\cf19 case} Color::Cyan:        col = {\cf22 "[0;36m"}; {\cf19 break};\par
4354                 {\cf19 case} Color::Yellow:      col = {\cf22 "[0;33m"}; {\cf19 break};\par
4355                 {\cf19 case} Color::Grey:        col = {\cf22 "[1;30m"}; {\cf19 break};\par
4356                 {\cf19 case} Color::LightGrey:   col = {\cf22 "[0;37m"}; {\cf19 break};\par
4357                 {\cf19 case} Color::BrightRed:   col = {\cf22 "[1;31m"}; {\cf19 break};\par
4358                 {\cf19 case} Color::BrightGreen: col = {\cf22 "[1;32m"}; {\cf19 break};\par
4359                 {\cf19 case} Color::BrightWhite: col = {\cf22 "[1;37m"}; {\cf19 break};\par
4360                 {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4361                 {\cf19 case} Color::None:\par
4362                 {\cf19 case} Color::White:\par
4363                 {\cf19 default}:                 col = {\cf22 "[0m"};\par
4364             \}\par
4365         {\cf20 // clang-format on}\par
4366         s << {\cf22 "\\033"} << col;\par
4367 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_ANSI}\par
4368 \par
4369 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_WINDOWS}\par
4370         {\cf19 if}(g_no_colors ||\par
4371            (_isatty(_fileno(stdout)) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4372             {\cf19 return};\par
4373 \par
4374         {\cf17 static} {\cf17 struct }ConsoleHelper \{\par
4375             HANDLE stdoutHandle;\par
4376             WORD   origFgAttrs;\par
4377             WORD   origBgAttrs;\par
4378 \par
4379             ConsoleHelper() \{\par
4380                 stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);\par
4381                 CONSOLE_SCREEN_BUFFER_INFO csbiInfo;\par
4382                 GetConsoleScreenBufferInfo(stdoutHandle, &csbiInfo);\par
4383                 origFgAttrs = csbiInfo.wAttributes & ~(BACKGROUND_GREEN | BACKGROUND_RED |\par
4384                     BACKGROUND_BLUE | BACKGROUND_INTENSITY);\par
4385                 origBgAttrs = csbiInfo.wAttributes & ~(FOREGROUND_GREEN | FOREGROUND_RED |\par
4386                     FOREGROUND_BLUE | FOREGROUND_INTENSITY);\par
4387             \}\par
4388         \} ch;\par
4389 \par
4390 {\cf21 #define DOCTEST_SET_ATTR(x) SetConsoleTextAttribute(ch.stdoutHandle, x | ch.origBgAttrs)}\par
4391 \par
4392         {\cf20 // clang-format off}\par
4393         {\cf19 switch} (code) \{\par
4394             {\cf19 case} Color::White:       DOCTEST_SET_ATTR(FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4395             {\cf19 case} Color::Red:         DOCTEST_SET_ATTR(FOREGROUND_RED);                                      {\cf19 break};\par
4396             {\cf19 case} Color::Green:       DOCTEST_SET_ATTR(FOREGROUND_GREEN);                                    {\cf19 break};\par
4397             {\cf19 case} Color::Blue:        DOCTEST_SET_ATTR(FOREGROUND_BLUE);                                     {\cf19 break};\par
4398             {\cf19 case} Color::Cyan:        DOCTEST_SET_ATTR(FOREGROUND_BLUE | FOREGROUND_GREEN);                  {\cf19 break};\par
4399             {\cf19 case} Color::Yellow:      DOCTEST_SET_ATTR(FOREGROUND_RED | FOREGROUND_GREEN);                   {\cf19 break};\par
4400             {\cf19 case} Color::Grey:        DOCTEST_SET_ATTR(0);                                                   {\cf19 break};\par
4401             {\cf19 case} Color::LightGrey:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);                                {\cf19 break};\par
4402             {\cf19 case} Color::BrightRed:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_RED);               {\cf19 break};\par
4403             {\cf19 case} Color::BrightGreen: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN);             {\cf19 break};\par
4404             {\cf19 case} Color::BrightWhite: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4405             {\cf19 case} Color::None:\par
4406             {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4407             {\cf19 default}:                 DOCTEST_SET_ATTR(ch.origFgAttrs);\par
4408         \}\par
4409             {\cf20 // clang-format on}\par
4410 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS}\par
4411     \}\par
4412     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4413 \par
4414     std::vector<const IExceptionTranslator*>& getExceptionTranslators() \{\par
4415         {\cf17 static} std::vector<const IExceptionTranslator*> data;\par
4416         {\cf19 return} data;\par
4417     \}\par
4418 \par
4419     String translateActiveException() \{\par
4420 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4421         String res;\par
4422         {\cf17 auto}&  translators = getExceptionTranslators();\par
4423         {\cf19 for}({\cf17 auto}& curr : translators)\par
4424             if(curr->translate(res))\par
4425                 return res;\par
4426         {\cf20 // clang-format off}\par
4427         DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wcatch-value"})\par
4428         {\cf17 try} \{\par
4429             {\cf19 throw};\par
4430         \} {\cf19 catch}(std::exception& ex) \{\par
4431             {\cf19 return} ex.what();\par
4432         \} {\cf19 catch}(std::string& msg) \{\par
4433             {\cf19 return} msg.c_str();\par
4434         \} {\cf19 catch}({\cf17 const} {\cf18 char}* msg) \{\par
4435             {\cf19 return} msg;\par
4436         \} {\cf19 catch}(...) \{\par
4437             {\cf19 return} {\cf22 "unknown exception"};\par
4438         \}\par
4439         DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4440 {\cf20 // clang-format on}\par
4441 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4442         {\cf19 return} {\cf22 ""};\par
4443 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4444     \}\par
4445 \} {\cf20 // namespace}\par
4446 \par
4447 {\cf17 namespace }detail \{\par
4448     {\cf20 // used by the macros for registering tests}\par
4449     {\cf18 int} regTest({\cf17 const} TestCase& tc) \{\par
4450         getRegisteredTests().insert(tc);\par
4451         {\cf19 return} 0;\par
4452     \}\par
4453 \par
4454     {\cf20 // sets the current test suite}\par
4455     {\cf18 int} setTestSuite({\cf17 const} TestSuite& ts) \{\par
4456         doctest_detail_test_suite_ns::getCurrentTestSuite() = ts;\par
4457         {\cf19 return} 0;\par
4458     \}\par
4459 \par
4460 {\cf21 #ifdef DOCTEST_IS_DEBUGGER_ACTIVE}\par
4461     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} DOCTEST_IS_DEBUGGER_ACTIVE(); \}\par
4462 {\cf21 #else }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4463 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
4464     {\cf17 class }ErrnoGuard \{\par
4465     {\cf17 public}:\par
4466         ErrnoGuard() : m_oldErrno(errno) \{\}\par
4467         ~ErrnoGuard() \{ errno = m_oldErrno; \}\par
4468     {\cf17 private}:\par
4469         {\cf18 int} m_oldErrno;\par
4470     \};\par
4471     {\cf20 // See the comments in Catch2 for the reasoning behind this implementation:}\par
4472     {\cf20 // https://github.com/catchorg/Catch2/blob/v2.13.1/include/internal/catch_debugger.cpp#L79-L102}\par
4473     {\cf18 bool} isDebuggerActive() \{\par
4474         ErrnoGuard guard;\par
4475         std::ifstream in({\cf22 "/proc/self/status"});\par
4476         {\cf19 for}(std::string line; std::getline(in, line);) \{\par
4477             {\cf17 static} {\cf17 const} {\cf18 int} PREFIX_LEN = 11;\par
4478             {\cf19 if}(line.compare(0, PREFIX_LEN, {\cf22 "TracerPid:\\t"}) == 0) \{\par
4479                 {\cf19 return} line.length() > PREFIX_LEN && line[PREFIX_LEN] != {\cf23 '0'};\par
4480             \}\par
4481         \}\par
4482         {\cf19 return} {\cf17 false};\par
4483     \}\par
4484 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
4485     {\cf20 // The following function is taken directly from the following technical note:}\par
4486     {\cf20 // https://developer.apple.com/library/archive/qa/qa1361/_index.html}\par
4487     {\cf20 // Returns true if the current process is being debugged (either}\par
4488     {\cf20 // running under the debugger or has a debugger attached post facto).}\par
4489     {\cf18 bool} isDebuggerActive() \{\par
4490         {\cf18 int}        mib[4];\par
4491         kinfo_proc info;\par
4492         {\cf18 size_t}     size;\par
4493         {\cf20 // Initialize the flags so that, if sysctl fails for some bizarre}\par
4494         {\cf20 // reason, we get a predictable result.}\par
4495         info.kp_proc.p_flag = 0;\par
4496         {\cf20 // Initialize mib, which tells sysctl the info we want, in this case}\par
4497         {\cf20 // we're looking for information about a specific process ID.}\par
4498         mib[0] = CTL_KERN;\par
4499         mib[1] = KERN_PROC;\par
4500         mib[2] = KERN_PROC_PID;\par
4501         mib[3] = getpid();\par
4502         {\cf20 // Call sysctl.}\par
4503         size = {\cf17 sizeof}(info);\par
4504         {\cf19 if}(sysctl(mib, DOCTEST_COUNTOF(mib), &info, &size, 0, 0) != 0) \{\par
4505             std::cerr << {\cf22 "\\nCall to sysctl failed - unable to determine if debugger is active **\\n"};\par
4506             {\cf19 return} {\cf17 false};\par
4507         \}\par
4508         {\cf20 // We're being debugged if the P_TRACED flag is set.}\par
4509         {\cf19 return} ((info.kp_proc.p_flag & P_TRACED) != 0);\par
4510     \}\par
4511 {\cf21 #elif DOCTEST_MSVC || defined(__MINGW32__) || defined(__MINGW64__)}\par
4512     {\cf18 bool} isDebuggerActive() \{ return ::IsDebuggerPresent() != 0; \}\par
4513 {\cf21 #else}\par
4514     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} {\cf17 false}; \}\par
4515 {\cf21 #endif }{\cf20 // Platform}\par
4516 {\cf21 #endif }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4517 \par
4518     {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et) \{\par
4519         {\cf19 if}(std::find(getExceptionTranslators().begin(), getExceptionTranslators().end(), et) ==\par
4520            getExceptionTranslators().end())\par
4521             getExceptionTranslators().push_back(et);\par
4522     \}\par
4523 \par
4524     DOCTEST_THREAD_LOCAL std::vector<IContextScope*> g_infoContexts; {\cf20 // for logging with INFO()}\par
4525 \par
4526     ContextScopeBase::ContextScopeBase() \{\par
4527         g_infoContexts.push_back({\cf17 this});\par
4528     \}\par
4529 \par
4530     ContextScopeBase::ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept} \{\par
4531         {\cf19 if} (other.need_to_destroy) \{\par
4532             other.destroy();\par
4533         \}\par
4534         other.need_to_destroy = {\cf17 false};\par
4535         g_infoContexts.push_back({\cf17 this});\par
4536     \}\par
4537 \par
4538     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4539     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4540     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4541 \par
4542     {\cf20 // destroy cannot be inlined into the destructor because that would mean calling stringify after}\par
4543     {\cf20 // ContextScope has been destroyed (base class destructors run after derived class destructors).}\par
4544     {\cf20 // Instead, ContextScope calls this method directly from its destructor.}\par
4545     {\cf18 void} ContextScopeBase::destroy() \{\par
4546 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4547         {\cf19 if}(std::uncaught_exceptions() > 0) \{\par
4548 {\cf21 #else}\par
4549         {\cf19 if}(std::uncaught_exception()) \{\par
4550 {\cf21 #endif}\par
4551             std::ostringstream s;\par
4552             this->stringify(&s);\par
4553             g_cs->stringifiedContexts.push_back(s.str().c_str());\par
4554         \}\par
4555         g_infoContexts.pop_back();\par
4556     \}\par
4557 \par
4558     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4559     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4560     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4561 \} {\cf20 // namespace detail}\par
4562 {\cf17 namespace }\{\par
4563     {\cf17 using namespace }detail;\par
4564 \par
4565 {\cf21 #if !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4566     {\cf17 struct }FatalConditionHandler\par
4567     \{\par
4568         {\cf17 static} {\cf18 void} reset() \{\}\par
4569         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4570         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4571     \};\par
4572 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4573 \par
4574     {\cf18 void} reportFatal({\cf17 const} std::string&);\par
4575 \par
4576 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4577 \par
4578     {\cf17 struct }SignalDefs\par
4579     \{\par
4580         DWORD id;\par
4581         {\cf17 const} {\cf18 char}* name;\par
4582     \};\par
4583     {\cf20 // There is no 1-1 mapping between signals and windows exceptions.}\par
4584     {\cf20 // Windows can easily distinguish between SO and SigSegV,}\par
4585     {\cf20 // but SigInt, SigTerm, etc are handled differently.}\par
4586     SignalDefs signalDefs[] = \{\par
4587             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ILLEGAL_INSTRUCTION),\par
4588              {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4589             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_STACK_OVERFLOW), {\cf22 "SIGSEGV - Stack overflow"}\},\par
4590             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ACCESS_VIOLATION),\par
4591              {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4592             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_INT_DIVIDE_BY_ZERO), {\cf22 "Divide by zero error"}\},\par
4593     \};\par
4594 \par
4595     {\cf17 struct }FatalConditionHandler\par
4596     \{\par
4597         {\cf17 static} LONG CALLBACK handleException(PEXCEPTION_POINTERS ExceptionInfo) \{\par
4598             {\cf20 // Multiple threads may enter this filter/handler at once. We want the error message to be printed on the}\par
4599             {\cf20 // console just once no matter how many threads have crashed.}\par
4600             DOCTEST_DECLARE_STATIC_MUTEX(mutex)\par
4601             {\cf17 static} {\cf18 bool} execute = {\cf17 true};\par
4602             \{\par
4603                 DOCTEST_LOCK_MUTEX(mutex)\par
4604                 {\cf19 if}(execute) \{\par
4605                     {\cf18 bool} reported = {\cf17 false};\par
4606                     {\cf19 for}({\cf18 size_t} i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4607                         {\cf19 if}(ExceptionInfo->ExceptionRecord->ExceptionCode == signalDefs[i].id) \{\par
4608                             reportFatal(signalDefs[i].name);\par
4609                             reported = {\cf17 true};\par
4610                             {\cf19 break};\par
4611                         \}\par
4612                     \}\par
4613                     {\cf19 if}(reported == {\cf17 false})\par
4614                         reportFatal({\cf22 "Unhandled SEH exception caught"});\par
4615                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4616                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4617                 \}\par
4618                 execute = {\cf17 false};\par
4619             \}\par
4620             std::exit(EXIT_FAILURE);\par
4621         \}\par
4622 \par
4623         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4624         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4625 \par
4626         FatalConditionHandler() \{\par
4627             isSet = {\cf17 true};\par
4628             {\cf20 // 32k seems enough for doctest to handle stack overflow,}\par
4629             {\cf20 // but the value was found experimentally, so there is no strong guarantee}\par
4630             guaranteeSize = 32 * 1024;\par
4631             {\cf20 // Register an unhandled exception filter}\par
4632             previousTop = SetUnhandledExceptionFilter(handleException);\par
4633             {\cf20 // Pass in guarantee size to be filled}\par
4634             SetThreadStackGuarantee(&guaranteeSize);\par
4635 \par
4636             {\cf20 // On Windows uncaught exceptions from another thread, exceptions from}\par
4637             {\cf20 // destructors, or calls to std::terminate are not a SEH exception}\par
4638 \par
4639             {\cf20 // The terminal handler gets called when:}\par
4640             {\cf20 // - std::terminate is called FROM THE TEST RUNNER THREAD}\par
4641             {\cf20 // - an exception is thrown from a destructor FROM THE TEST RUNNER THREAD}\par
4642             original_terminate_handler = std::get_terminate();\par
4643             std::set_terminate([]() DOCTEST_NOEXCEPT \{\par
4644                 reportFatal({\cf22 "Terminate handler called"});\par
4645                 {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4646                     DOCTEST_BREAK_INTO_DEBUGGER();\par
4647                 std::exit(EXIT_FAILURE); {\cf20 // explicitly exit - otherwise the SIGABRT handler may be called as well}\par
4648             \});\par
4649 \par
4650             {\cf20 // SIGABRT is raised when:}\par
4651             {\cf20 // - std::terminate is called FROM A DIFFERENT THREAD}\par
4652             {\cf20 // - an exception is thrown from a destructor FROM A DIFFERENT THREAD}\par
4653             {\cf20 // - an uncaught exception is thrown FROM A DIFFERENT THREAD}\par
4654             prev_sigabrt_handler = std::signal(SIGABRT, []({\cf18 int} signal) DOCTEST_NOEXCEPT \{\par
4655                 {\cf19 if}(signal == SIGABRT) \{\par
4656                     reportFatal({\cf22 "SIGABRT - Abort (abnormal termination) signal"});\par
4657                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4658                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4659                     std::exit(EXIT_FAILURE);\par
4660                 \}\par
4661             \});\par
4662 \par
4663             {\cf20 // The following settings are taken from google test, and more}\par
4664             {\cf20 // specifically from UnitTest::Run() inside of gtest.cc}\par
4665 \par
4666             {\cf20 // the user does not want to see pop-up dialogs about crashes}\par
4667             prev_error_mode_1 = SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |\par
4668                                              SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\par
4669             {\cf20 // This forces the abort message to go to stderr in all circumstances.}\par
4670             prev_error_mode_2 = _set_error_mode(_OUT_TO_STDERR);\par
4671             {\cf20 // In the debug version, Visual Studio pops up a separate dialog}\par
4672             {\cf20 // offering a choice to debug the aborted program - we want to disable that.}\par
4673             prev_abort_behavior = _set_abort_behavior(0x0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4674             {\cf20 // In debug mode, the Windows CRT can crash with an assertion over invalid}\par
4675             {\cf20 // input (e.g. passing an invalid file descriptor). The default handling}\par
4676             {\cf20 // for these assertions is to pop up a dialog and wait for user input.}\par
4677             {\cf20 // Instead ask the CRT to dump such assertions to stderr non-interactively.}\par
4678             prev_report_mode = _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);\par
4679             prev_report_file = _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\par
4680         \}\par
4681 \par
4682         {\cf17 static} {\cf18 void} reset() \{\par
4683             {\cf19 if}(isSet) \{\par
4684                 {\cf20 // Unregister handler and restore the old guarantee}\par
4685                 SetUnhandledExceptionFilter(previousTop);\par
4686                 SetThreadStackGuarantee(&guaranteeSize);\par
4687                 std::set_terminate(original_terminate_handler);\par
4688                 std::signal(SIGABRT, prev_sigabrt_handler);\par
4689                 SetErrorMode(prev_error_mode_1);\par
4690                 _set_error_mode(prev_error_mode_2);\par
4691                 _set_abort_behavior(prev_abort_behavior, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4692                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportMode(_CRT_ASSERT, prev_report_mode));\par
4693                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportFile(_CRT_ASSERT, prev_report_file));\par
4694                 isSet = {\cf17 false};\par
4695             \}\par
4696         \}\par
4697 \par
4698         ~FatalConditionHandler() \{ reset(); \}\par
4699 \par
4700     {\cf17 private}:\par
4701         {\cf17 static} UINT         prev_error_mode_1;\par
4702         {\cf17 static} {\cf18 int}          prev_error_mode_2;\par
4703         {\cf17 static} {\cf18 unsigned} {\cf18 int} prev_abort_behavior;\par
4704         {\cf17 static} {\cf18 int}          prev_report_mode;\par
4705         {\cf17 static} _HFILE       prev_report_file;\par
4706         {\cf17 static} void (DOCTEST_CDECL *prev_sigabrt_handler)(int);\par
4707         {\cf17 static} std::terminate_handler original_terminate_handler;\par
4708         {\cf17 static} {\cf18 bool} isSet;\par
4709         {\cf17 static} ULONG guaranteeSize;\par
4710         {\cf17 static} LPTOP_LEVEL_EXCEPTION_FILTER previousTop;\par
4711     \};\par
4712 \par
4713     UINT         FatalConditionHandler::prev_error_mode_1;\par
4714     {\cf18 int}          FatalConditionHandler::prev_error_mode_2;\par
4715     {\cf18 unsigned} {\cf18 int} FatalConditionHandler::prev_abort_behavior;\par
4716     {\cf18 int}          FatalConditionHandler::prev_report_mode;\par
4717     _HFILE       FatalConditionHandler::prev_report_file;\par
4718     void (DOCTEST_CDECL *FatalConditionHandler::prev_sigabrt_handler)(int);\par
4719     std::terminate_handler FatalConditionHandler::original_terminate_handler;\par
4720     {\cf18 bool} FatalConditionHandler::isSet = {\cf17 false};\par
4721     ULONG FatalConditionHandler::guaranteeSize = 0;\par
4722     LPTOP_LEVEL_EXCEPTION_FILTER FatalConditionHandler::previousTop = {\cf17 nullptr};\par
4723 \par
4724 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4725 \par
4726     {\cf17 struct }SignalDefs\par
4727     \{\par
4728         {\cf18 int}         id;\par
4729         {\cf17 const} {\cf18 char}* name;\par
4730     \};\par
4731     SignalDefs signalDefs[] = \{\{SIGINT, {\cf22 "SIGINT - Terminal interrupt signal"}\},\par
4732                                \{SIGILL, {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4733                                \{SIGFPE, {\cf22 "SIGFPE - Floating point error signal"}\},\par
4734                                \{SIGSEGV, {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4735                                \{SIGTERM, {\cf22 "SIGTERM - Termination request signal"}\},\par
4736                                \{SIGABRT, {\cf22 "SIGABRT - Abort (abnormal termination) signal"}\}\};\par
4737 \par
4738     {\cf17 struct }FatalConditionHandler\par
4739     \{\par
4740         {\cf17 static} {\cf18 bool}             isSet;\par
4741         {\cf17 static} {\cf17 struct }sigaction oldSigActions[DOCTEST_COUNTOF(signalDefs)];\par
4742         {\cf17 static} stack_t          oldSigStack;\par
4743         {\cf17 static} {\cf18 size_t}           altStackSize;\par
4744         {\cf17 static} {\cf18 char}*            altStackMem;\par
4745 \par
4746         {\cf17 static} {\cf18 void} handleSignal({\cf18 int} sig) \{\par
4747             {\cf17 const} {\cf18 char}* name = {\cf22 "<unknown signal>"};\par
4748             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4749                 SignalDefs& def = signalDefs[i];\par
4750                 {\cf19 if}(sig == def.id) \{\par
4751                     name = def.name;\par
4752                     {\cf19 break};\par
4753                 \}\par
4754             \}\par
4755             reset();\par
4756             reportFatal(name);\par
4757             raise(sig);\par
4758         \}\par
4759 \par
4760         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\par
4761             altStackMem = {\cf17 new} {\cf18 char}[altStackSize];\par
4762         \}\par
4763 \par
4764         {\cf17 static} {\cf18 void} freeAltStackMem() \{\par
4765             {\cf17 delete}[] altStackMem;\par
4766         \}\par
4767 \par
4768         FatalConditionHandler() \{\par
4769             isSet = {\cf17 true};\par
4770             stack_t sigStack;\par
4771             sigStack.ss_sp    = altStackMem;\par
4772             sigStack.ss_size  = altStackSize;\par
4773             sigStack.ss_flags = 0;\par
4774             sigaltstack(&sigStack, &oldSigStack);\par
4775             {\cf17 struct }sigaction sa = \{\};\par
4776             sa.sa_handler       = handleSignal;\par
4777             sa.sa_flags         = SA_ONSTACK;\par
4778             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4779                 sigaction(signalDefs[i].{\cf18 id}, &sa, &oldSigActions[i]);\par
4780             \}\par
4781         \}\par
4782 \par
4783         ~FatalConditionHandler() \{ reset(); \}\par
4784         {\cf17 static} {\cf18 void} reset() \{\par
4785             {\cf19 if}(isSet) \{\par
4786                 {\cf20 // Set signals back to previous values -- hopefully nobody overwrote them in the meantime}\par
4787                 {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4788                     sigaction(signalDefs[i].{\cf18 id}, &oldSigActions[i], {\cf17 nullptr});\par
4789                 \}\par
4790                 {\cf20 // Return the old stack}\par
4791                 sigaltstack(&oldSigStack, {\cf17 nullptr});\par
4792                 isSet = {\cf17 false};\par
4793             \}\par
4794         \}\par
4795     \};\par
4796 \par
4797     {\cf18 bool}             FatalConditionHandler::isSet = {\cf17 false};\par
4798     {\cf17 struct }sigaction FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)] = \{\};\par
4799     stack_t          FatalConditionHandler::oldSigStack = \{\};\par
4800     {\cf18 size_t}           FatalConditionHandler::altStackSize = 4 * SIGSTKSZ;\par
4801     {\cf18 char}*            FatalConditionHandler::altStackMem = {\cf17 nullptr};\par
4802 \par
4803 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4804 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4805 \par
4806 \} {\cf20 // namespace}\par
4807 \par
4808 {\cf17 namespace }\{\par
4809     {\cf17 using namespace }detail;\par
4810 \par
4811 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4812 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text) ::OutputDebugStringA(text)}\par
4813 {\cf21 #else}\par
4814     {\cf20 // TODO: integration with XCode and other IDEs}\par
4815 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text)}\par
4816 {\cf21 #endif }{\cf20 // Platform}\par
4817 \par
4818     {\cf18 void} addAssert(assertType::Enum at) \{\par
4819         {\cf19 if}((at & assertType::is_warn) == 0) \par
4820             g_cs->numAssertsCurrentTest_atomic++;\par
4821     \}\par
4822 \par
4823     {\cf18 void} addFailedAssert(assertType::Enum at) \{\par
4824         {\cf19 if}((at & assertType::is_warn) == 0) \par
4825             g_cs->numAssertsFailedCurrentTest_atomic++;\par
4826     \}\par
4827 \par
4828 {\cf21 #if defined(DOCTEST_CONFIG_POSIX_SIGNALS) || defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4829     {\cf18 void} reportFatal({\cf17 const} std::string& message) \{\par
4830         g_cs->failure_flags |= TestCaseFailureReason::Crash;\par
4831 \par
4832         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception, \{message.c_str(), {\cf17 true}\});\par
4833 \par
4834         {\cf19 while} (g_cs->subcaseStack.size()) \{\par
4835             g_cs->subcaseStack.pop_back();\par
4836             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4837         \}\par
4838 \par
4839         g_cs->finalizeTestCaseData();\par
4840 \par
4841         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
4842 \par
4843         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
4844     \}\par
4845 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4846 \} {\cf20 // namespace}\par
4847 \par
4848 AssertData::AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4849     {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string)\par
4850     : m_test_case(g_cs->currentTest), m_at(at), m_file(file), m_line(line), m_expr(expr),\par
4851     m_failed(true), m_threw(false), m_threw_as(false), m_exception_type(exception_type),\par
4852     m_exception_string(exception_string) \{\par
4853 {\cf21 #if DOCTEST_MSVC}\par
4854     {\cf19 if} (m_expr[0] == {\cf23 ' '}) {\cf20 // this happens when variadic macros are disabled under MSVC}\par
4855         ++m_expr;\par
4856 {\cf21 #endif }{\cf20 // MSVC}\par
4857 \}\par
4858 \par
4859 {\cf17 namespace }detail \{\par
4860     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4861                                  {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} String& exception_string)\par
4862         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4863 \par
4864     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4865         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string)\par
4866         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4867 \par
4868     {\cf18 void} ResultBuilder::setResult({\cf17 const} Result& res) \{\par
4869         m_decomp = res.m_decomp;\par
4870         m_failed = !res.m_passed;\par
4871     \}\par
4872 \par
4873     {\cf18 void} ResultBuilder::translateException() \{\par
4874         m_threw     = {\cf17 true};\par
4875         m_exception = translateActiveException();\par
4876     \}\par
4877 \par
4878     {\cf18 bool} ResultBuilder::log() \{\par
4879         {\cf19 if}(m_at & assertType::is_throws) \{ \par
4880             m_failed = !m_threw;\par
4881         \} {\cf19 else} {\cf19 if}((m_at & assertType::is_throws_as) && (m_at & assertType::is_throws_with)) \{ \par
4882             m_failed = !m_threw_as || !m_exception_string.check(m_exception);\par
4883         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_as) \{ \par
4884             m_failed = !m_threw_as;\par
4885         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_with) \{ \par
4886             m_failed = !m_exception_string.check(m_exception);\par
4887         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_nothrow) \{ \par
4888             m_failed = m_threw;\par
4889         \}\par
4890 \par
4891         {\cf19 if}(m_exception.size())\par
4892             m_exception = {\cf22 "\\""} + m_exception + {\cf22 "\\""};\par
4893 \par
4894         {\cf19 if}(is_running_in_test) \{\par
4895             addAssert(m_at);\par
4896             DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert, *{\cf17 this});\par
4897 \par
4898             {\cf19 if}(m_failed)\par
4899                 addFailedAssert(m_at);\par
4900         \} {\cf19 else} {\cf19 if}(m_failed) \{\par
4901             failed_out_of_a_testing_context(*{\cf17 this});\par
4902         \}\par
4903 \par
4904         {\cf19 return} m_failed && isDebuggerActive() && !getContextOptions()->no_breaks &&\par
4905             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
4906     \}\par
4907 \par
4908     {\cf18 void} ResultBuilder::react(){\cf17  const }\{\par
4909         {\cf19 if}(m_failed && checkIfShouldThrow(m_at))\par
4910             throwException();\par
4911     \}\par
4912 \par
4913     {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad) \{\par
4914         {\cf19 if}(g_cs->ah)\par
4915             g_cs->ah(ad);\par
4916         {\cf19 else}\par
4917             std::abort();\par
4918     \}\par
4919 \par
4920     {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4921                        {\cf17 const} Result& result) \{\par
4922         {\cf18 bool} failed = !result.m_passed;\par
4923 \par
4924         {\cf20 // ###################################################################################}\par
4925         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
4926         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
4927         {\cf20 // ###################################################################################}\par
4928         DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);\par
4929         DOCTEST_ASSERT_IN_TESTS(result.m_decomp);\par
4930         {\cf19 return} !failed;\par
4931     \}\par
4932 \par
4933     MessageBuilder::MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity) \{\par
4934         m_stream   = tlssPush();\par
4935         m_file     = file;\par
4936         m_line     = line;\par
4937         m_severity = severity;\par
4938     \}\par
4939 \par
4940     MessageBuilder::~MessageBuilder() \{\par
4941         {\cf19 if} (!logged)\par
4942             tlssPop();\par
4943     \}\par
4944 \par
4945     DOCTEST_DEFINE_INTERFACE(IExceptionTranslator)\par
4946 \par
4947     {\cf18 bool} MessageBuilder::log() \{\par
4948         {\cf19 if} (!logged) \{\par
4949             m_string = tlssPop();\par
4950             logged = {\cf17 true};\par
4951         \}\par
4952         \par
4953         DOCTEST_ITERATE_THROUGH_REPORTERS(log_message, *{\cf17 this});\par
4954 \par
4955         {\cf17 const} {\cf18 bool} isWarn = m_severity & assertType::is_warn;\par
4956 \par
4957         {\cf20 // warn is just a message in this context so we don't treat it as an assert}\par
4958         {\cf19 if}(!isWarn) \{\par
4959             addAssert(m_severity);\par
4960             addFailedAssert(m_severity);\par
4961         \}\par
4962 \par
4963         {\cf19 return} isDebuggerActive() && !getContextOptions()->no_breaks && !isWarn &&\par
4964             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
4965     \}\par
4966 \par
4967     {\cf18 void} MessageBuilder::react() \{\par
4968         {\cf19 if}(m_severity & assertType::is_require) \par
4969             throwException();\par
4970     \}\par
4971 \} {\cf20 // namespace detail}\par
4972 {\cf17 namespace }\{\par
4973     {\cf17 using namespace }detail;\par
4974 \par
4975     {\cf20 // clang-format off}\par
4976 \par
4977 {\cf20 // =================================================================================================}\par
4978 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
4979 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
4980 {\cf20 // =================================================================================================}\par
4981 \par
4982     {\cf17 class }XmlEncode \{\par
4983     {\cf17 public}:\par
4984         {\cf17 enum} ForWhat \{ ForTextNodes, ForAttributes \};\par
4985 \par
4986         XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat = ForTextNodes );\par
4987 \par
4988         {\cf18 void} encodeTo( std::ostream& os ) {\cf17 const};\par
4989 \par
4990         {\cf17 friend} std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode );\par
4991 \par
4992     {\cf17 private}:\par
4993         std::string m_str;\par
4994         ForWhat m_forWhat;\par
4995     \};\par
4996 \par
4997     {\cf17 class }XmlWriter \{\par
4998     {\cf17 public}:\par
4999 \par
5000         {\cf17 class }ScopedElement \{\par
5001         {\cf17 public}:\par
5002             ScopedElement( XmlWriter* writer );\par
5003 \par
5004             ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5005             ScopedElement& operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5006 \par
5007             ~ScopedElement();\par
5008 \par
5009             ScopedElement& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5010 \par
5011             {\cf17 template}<{\cf17 typename} T>\par
5012             ScopedElement& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5013                 m_writer->writeAttribute( name, attribute );\par
5014                 {\cf19 return} *{\cf17 this};\par
5015             \}\par
5016 \par
5017         {\cf17 private}:\par
5018             {\cf17 mutable} XmlWriter* m_writer = {\cf17 nullptr};\par
5019         \};\par
5020 \par
5021         XmlWriter( std::ostream& os = std::cout );\par
5022         ~XmlWriter();\par
5023 \par
5024         XmlWriter( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5025         XmlWriter& operator=( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5026 \par
5027         XmlWriter& startElement( std::string {\cf17 const}& name );\par
5028 \par
5029         ScopedElement scopedElement( std::string {\cf17 const}& name );\par
5030 \par
5031         XmlWriter& endElement();\par
5032 \par
5033         XmlWriter& writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute );\par
5034 \par
5035         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute );\par
5036 \par
5037         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute );\par
5038 \par
5039         {\cf17 template}<{\cf17 typename} T>\par
5040         XmlWriter& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5041         std::stringstream rss;\par
5042             rss << attribute;\par
5043             {\cf19 return} writeAttribute( name, rss.str() );\par
5044         \}\par
5045 \par
5046         XmlWriter& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5047 \par
5048         {\cf20 //XmlWriter& writeComment( std::string const& text );}\par
5049 \par
5050         {\cf20 //void writeStylesheetRef( std::string const& url );}\par
5051 \par
5052         {\cf20 //XmlWriter& writeBlankLine();}\par
5053 \par
5054         {\cf18 void} ensureTagClosed();\par
5055 \par
5056         {\cf18 void} writeDeclaration();\par
5057 \par
5058     {\cf17 private}:\par
5059 \par
5060         {\cf18 void} newlineIfNecessary();\par
5061 \par
5062         {\cf18 bool} m_tagIsOpen = {\cf17 false};\par
5063         {\cf18 bool} m_needsNewline = {\cf17 false};\par
5064         std::vector<std::string> m_tags;\par
5065         std::string m_indent;\par
5066         std::ostream& m_os;\par
5067     \};\par
5068 \par
5069 {\cf20 // =================================================================================================}\par
5070 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
5071 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
5072 {\cf20 // =================================================================================================}\par
5073 \par
5074 {\cf17 using }uchar = {\cf18 unsigned} char;\par
5075 \par
5076 {\cf17 namespace }\{\par
5077 \par
5078     {\cf18 size_t} trailingBytes({\cf18 unsigned} {\cf18 char} c) \{\par
5079         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5080             {\cf19 return} 2;\par
5081         \}\par
5082         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5083             {\cf19 return} 3;\par
5084         \}\par
5085         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5086             {\cf19 return} 4;\par
5087         \}\par
5088         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5089     \}\par
5090 \par
5091     uint32_t headerValue({\cf18 unsigned} {\cf18 char} c) \{\par
5092         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5093             {\cf19 return} c & 0x1F;\par
5094         \}\par
5095         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5096             {\cf19 return} c & 0x0F;\par
5097         \}\par
5098         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5099             {\cf19 return} c & 0x07;\par
5100         \}\par
5101         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5102     \}\par
5103 \par
5104     {\cf18 void} hexEscapeChar(std::ostream& os, {\cf18 unsigned} {\cf18 char} c) \{\par
5105         std::ios_base::fmtflags f(os.flags());\par
5106         os << {\cf22 "\\\\x"}\par
5107             << std::uppercase << std::hex << std::setfill({\cf23 '0'}) << std::setw(2)\par
5108             << {\cf17 static_cast<}{\cf18 int}{\cf17 >}(c);\par
5109         os.flags(f);\par
5110     \}\par
5111 \par
5112 \} {\cf20 // anonymous namespace}\par
5113 \par
5114     XmlEncode::XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat )\par
5115     :   m_str( str ),\par
5116         m_forWhat( forWhat )\par
5117     \{\}\par
5118 \par
5119     {\cf18 void} XmlEncode::encodeTo( std::ostream& os ){\cf17  const }\{\par
5120         {\cf20 // Apostrophe escaping not necessary if we always use " to write attributes}\par
5121         {\cf20 // (see: https://www.w3.org/TR/xml/#syntax)}\par
5122 \par
5123         {\cf19 for}( std::size_t idx = 0; idx < m_str.size(); ++ idx ) \{\par
5124             uchar c = m_str[idx];\par
5125             {\cf19 switch} (c) \{\par
5126             {\cf19 case} {\cf23 '<'}:   os << {\cf22 "&lt;"}; {\cf19 break};\par
5127             {\cf19 case} {\cf23 '&'}:   os << {\cf22 "&amp;"}; {\cf19 break};\par
5128 \par
5129             {\cf19 case} {\cf23 '>'}:\par
5130                 {\cf20 // See: https://www.w3.org/TR/xml/#syntax}\par
5131                 {\cf19 if} (idx > 2 && m_str[idx - 1] == {\cf23 ']'} && m_str[idx - 2] == {\cf23 ']'})\par
5132                     os << {\cf22 "&gt;"};\par
5133                 {\cf19 else}\par
5134                     os << c;\par
5135                 {\cf19 break};\par
5136 \par
5137             {\cf19 case} {\cf23 '\\"'}:\par
5138                 {\cf19 if} (m_forWhat == ForAttributes)\par
5139                     os << {\cf22 "&quot;"};\par
5140                 {\cf19 else}\par
5141                     os << c;\par
5142                 {\cf19 break};\par
5143 \par
5144             {\cf19 default}:\par
5145                 {\cf20 // Check for control characters and invalid utf-8}\par
5146 \par
5147                 {\cf20 // Escape control characters in standard ascii}\par
5148                 {\cf20 // see https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0}\par
5149                 {\cf19 if} (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) \{\par
5150                     hexEscapeChar(os, c);\par
5151                     {\cf19 break};\par
5152                 \}\par
5153 \par
5154                 {\cf20 // Plain ASCII: Write it to stream}\par
5155                 {\cf19 if} (c < 0x7F) \{\par
5156                     os << c;\par
5157                     {\cf19 break};\par
5158                 \}\par
5159 \par
5160                 {\cf20 // UTF-8 territory}\par
5161                 {\cf20 // Check if the encoding is valid and if it is not, hex escape bytes.}\par
5162                 {\cf20 // Important: We do not check the exact decoded values for validity, only the encoding format}\par
5163                 {\cf20 // First check that this bytes is a valid lead byte:}\par
5164                 {\cf20 // This means that it is not encoded as 1111 1XXX}\par
5165                 {\cf20 // Or as 10XX XXXX}\par
5166                 {\cf19 if} (c <  0xC0 ||\par
5167                     c >= 0xF8) \{\par
5168                     hexEscapeChar(os, c);\par
5169                     {\cf19 break};\par
5170                 \}\par
5171 \par
5172                 {\cf17 auto} encBytes = trailingBytes(c);\par
5173                 {\cf20 // Are there enough bytes left to avoid accessing out-of-bounds memory?}\par
5174                 {\cf19 if} (idx + encBytes - 1 >= m_str.size()) \{\par
5175                     hexEscapeChar(os, c);\par
5176                     {\cf19 break};\par
5177                 \}\par
5178                 {\cf20 // The header is valid, check data}\par
5179                 {\cf20 // The next encBytes bytes must together be a valid utf-8}\par
5180                 {\cf20 // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)}\par
5181                 {\cf18 bool} valid = {\cf17 true};\par
5182                 uint32_t value = headerValue(c);\par
5183                 {\cf19 for} (std::size_t n = 1; n < encBytes; ++n) \{\par
5184                     uchar nc = m_str[idx + n];\par
5185                     valid &= ((nc & 0xC0) == 0x80);\par
5186                     value = (value << 6) | (nc & 0x3F);\par
5187                 \}\par
5188 \par
5189                 {\cf19 if} (\par
5190                     {\cf20 // Wrong bit pattern of following bytes}\par
5191                     (!valid) ||\par
5192                     {\cf20 // Overlong encodings}\par
5193                     (value < 0x80) ||\par
5194                     (                 value < 0x800   && encBytes > 2) || {\cf20 // removed "0x80 <= value &&" because redundant}\par
5195                     (0x800 < value && value < 0x10000 && encBytes > 3) ||\par
5196                     {\cf20 // Encoded value out of range}\par
5197                     (value >= 0x110000)\par
5198                     ) \{\par
5199                     hexEscapeChar(os, c);\par
5200                     {\cf19 break};\par
5201                 \}\par
5202 \par
5203                 {\cf20 // If we got here, this is in fact a valid(ish) utf-8 sequence}\par
5204                 {\cf19 for} (std::size_t n = 0; n < encBytes; ++n) \{\par
5205                     os << m_str[idx + n];\par
5206                 \}\par
5207                 idx += encBytes - 1;\par
5208                 {\cf19 break};\par
5209             \}\par
5210         \}\par
5211     \}\par
5212 \par
5213     std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode ) \{\par
5214         xmlEncode.encodeTo( os );\par
5215         {\cf19 return} os;\par
5216     \}\par
5217 \par
5218     XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )\par
5219     :   m_writer( writer )\par
5220     \{\}\par
5221 \par
5222     XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT\par
5223     :   m_writer( other.m_writer )\{\par
5224         other.m_writer = {\cf17 nullptr};\par
5225     \}\par
5226     XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT \{\par
5227         {\cf19 if} ( m_writer ) \{\par
5228             m_writer->endElement();\par
5229         \}\par
5230         m_writer = other.m_writer;\par
5231         other.m_writer = {\cf17 nullptr};\par
5232         {\cf19 return} *{\cf17 this};\par
5233     \}\par
5234 \par
5235 \par
5236     XmlWriter::ScopedElement::~ScopedElement() \{\par
5237         {\cf19 if}( m_writer )\par
5238             m_writer->endElement();\par
5239     \}\par
5240 \par
5241     XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5242         m_writer->writeText( text, indent );\par
5243         {\cf19 return} *{\cf17 this};\par
5244     \}\par
5245 \par
5246     XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )\par
5247     \{\par
5248         {\cf20 // writeDeclaration(); // called explicitly by the reporters that use the writer class - see issue #627}\par
5249     \}\par
5250 \par
5251     XmlWriter::~XmlWriter() \{\par
5252         {\cf19 while}( !m_tags.empty() )\par
5253             endElement();\par
5254     \}\par
5255 \par
5256     XmlWriter& XmlWriter::startElement( std::string {\cf17 const}& name ) \{\par
5257         ensureTagClosed();\par
5258         newlineIfNecessary();\par
5259         m_os << m_indent << {\cf23 '<'} << name;\par
5260         m_tags.push_back( name );\par
5261         m_indent += {\cf22 "  "};\par
5262         m_tagIsOpen = {\cf17 true};\par
5263         {\cf19 return} *{\cf17 this};\par
5264     \}\par
5265 \par
5266     XmlWriter::ScopedElement XmlWriter::scopedElement( std::string {\cf17 const}& name ) \{\par
5267         ScopedElement scoped( {\cf17 this} );\par
5268         startElement( name );\par
5269         {\cf19 return} scoped;\par
5270     \}\par
5271 \par
5272     XmlWriter& XmlWriter::endElement() \{\par
5273         newlineIfNecessary();\par
5274         m_indent = m_indent.substr( 0, m_indent.size()-2 );\par
5275         {\cf19 if}( m_tagIsOpen ) \{\par
5276             m_os << {\cf22 "/>"};\par
5277             m_tagIsOpen = {\cf17 false};\par
5278         \}\par
5279         {\cf19 else} \{\par
5280             m_os << m_indent << {\cf22 "</"} << m_tags.back() << {\cf22 ">"};\par
5281         \}\par
5282         m_os << std::endl;\par
5283         m_tags.pop_back();\par
5284         {\cf19 return} *{\cf17 this};\par
5285     \}\par
5286 \par
5287     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute ) \{\par
5288         {\cf19 if}( !name.empty() && !attribute.empty() )\par
5289             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5290         {\cf19 return} *{\cf17 this};\par
5291     \}\par
5292 \par
5293     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute ) \{\par
5294         {\cf19 if}( !name.empty() && attribute && attribute[0] != {\cf23 '\\0'} )\par
5295             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5296         {\cf19 return} *{\cf17 this};\par
5297     \}\par
5298 \par
5299     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute ) \{\par
5300         m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << ( attribute ? {\cf22 "true"} : {\cf22 "false"} ) << {\cf23 '"'};\par
5301         {\cf19 return} *{\cf17 this};\par
5302     \}\par
5303 \par
5304     XmlWriter& XmlWriter::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5305         {\cf19 if}( !text.empty() )\{\par
5306             {\cf18 bool} tagWasOpen = m_tagIsOpen;\par
5307             ensureTagClosed();\par
5308             {\cf19 if}( tagWasOpen && indent )\par
5309                 m_os << m_indent;\par
5310             m_os << XmlEncode( text );\par
5311             m_needsNewline = {\cf17 true};\par
5312         \}\par
5313         {\cf19 return} *{\cf17 this};\par
5314     \}\par
5315 \par
5316     {\cf20 //XmlWriter& XmlWriter::writeComment( std::string const& text ) \{}\par
5317     {\cf20 //    ensureTagClosed();}\par
5318     {\cf20 //    m_os << m_indent << "<!--" << text << "-->";}\par
5319     {\cf20 //    m_needsNewline = true;}\par
5320     {\cf20 //    return *this;}\par
5321     {\cf20 //\}}\par
5322 \par
5323     {\cf20 //void XmlWriter::writeStylesheetRef( std::string const& url ) \{}\par
5324     {\cf20 //    m_os << "<?xml-stylesheet type=\\"text/xsl\\" href=\\"" << url << "\\"?>\\n";}\par
5325     {\cf20 //\}}\par
5326 \par
5327     {\cf20 //XmlWriter& XmlWriter::writeBlankLine() \{}\par
5328     {\cf20 //    ensureTagClosed();}\par
5329     {\cf20 //    m_os << '\\n';}\par
5330     {\cf20 //    return *this;}\par
5331     {\cf20 //\}}\par
5332 \par
5333     {\cf18 void} XmlWriter::ensureTagClosed() \{\par
5334         {\cf19 if}( m_tagIsOpen ) \{\par
5335             m_os << {\cf22 ">"} << std::endl;\par
5336             m_tagIsOpen = {\cf17 false};\par
5337         \}\par
5338     \}\par
5339 \par
5340     {\cf18 void} XmlWriter::writeDeclaration() \{\par
5341         m_os << {\cf22 "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n"};\par
5342     \}\par
5343 \par
5344     {\cf18 void} XmlWriter::newlineIfNecessary() \{\par
5345         {\cf19 if}( m_needsNewline ) \{\par
5346             m_os << std::endl;\par
5347             m_needsNewline = {\cf17 false};\par
5348         \}\par
5349     \}\par
5350 \par
5351 {\cf20 // =================================================================================================}\par
5352 {\cf20 // End of copy-pasted code from Catch}\par
5353 {\cf20 // =================================================================================================}\par
5354 \par
5355     {\cf20 // clang-format on}\par
5356 \par
5357     {\cf17 struct }XmlReporter : {\cf17 public} IReporter\par
5358     \{\par
5359         XmlWriter xml;\par
5360         DOCTEST_DECLARE_MUTEX(mutex)\par
5361 \par
5362         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5363         {\cf17 const} ContextOptions& opt;\par
5364         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5365 \par
5366         XmlReporter({\cf17 const} ContextOptions& co)\par
5367                 : xml(*co.cout)\par
5368                 , opt(co) \{\}\par
5369 \par
5370         {\cf18 void} log_contexts() \{\par
5371             {\cf18 int} num_contexts = get_num_active_contexts();\par
5372             {\cf19 if}(num_contexts) \{\par
5373                 {\cf17 auto}              contexts = get_active_contexts();\par
5374                 std::stringstream ss;\par
5375                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5376                     contexts[i]->stringify(&ss);\par
5377                     xml.scopedElement({\cf22 "Info"}).writeText(ss.str());\par
5378                     ss.str({\cf22 ""});\par
5379                 \}\par
5380             \}\par
5381         \}\par
5382 \par
5383         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5384 \par
5385         {\cf18 void} test_case_start_impl({\cf17 const} TestCaseData& in) \{\par
5386             {\cf18 bool} open_ts_tag = {\cf17 false};\par
5387             {\cf19 if}(tc != {\cf17 nullptr}) \{ {\cf20 // we have already opened a test suite}\par
5388                 {\cf19 if}(std::strcmp(tc->m_test_suite, in.m_test_suite) != 0) \{\par
5389                     xml.endElement();\par
5390                     open_ts_tag = {\cf17 true};\par
5391                 \}\par
5392             \}\par
5393             {\cf19 else} \{\par
5394                 open_ts_tag = {\cf17 true}; {\cf20 // first test case ==> first test suite}\par
5395             \}\par
5396 \par
5397             {\cf19 if}(open_ts_tag) \{\par
5398                 xml.startElement({\cf22 "TestSuite"});\par
5399                 xml.writeAttribute({\cf22 "name"}, in.m_test_suite);\par
5400             \}\par
5401 \par
5402             tc = &in;\par
5403             xml.startElement({\cf22 "TestCase"})\par
5404                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5405                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file.c_str()))\par
5406                     .writeAttribute({\cf22 "line"}, line(in.m_line))\par
5407                     .writeAttribute({\cf22 "description"}, in.m_description);\par
5408 \par
5409             {\cf19 if}(Approx(in.m_timeout) != 0)\par
5410                 xml.writeAttribute({\cf22 "timeout"}, in.m_timeout);\par
5411             {\cf19 if}(in.m_may_fail)\par
5412                 xml.writeAttribute({\cf22 "may_fail"}, {\cf17 true});\par
5413             {\cf19 if}(in.m_should_fail)\par
5414                 xml.writeAttribute({\cf22 "should_fail"}, {\cf17 true});\par
5415         \}\par
5416 \par
5417         {\cf20 // =========================================================================================}\par
5418         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5419         {\cf20 // =========================================================================================}\par
5420 \par
5421         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
5422             test_run_start();\par
5423             {\cf19 if}(opt.list_reporters) \{\par
5424                 {\cf19 for}({\cf17 auto}& curr : getListeners())\par
5425                     xml.scopedElement({\cf22 "Listener"})\par
5426                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5427                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5428                 {\cf19 for}({\cf17 auto}& curr : getReporters())\par
5429                     xml.scopedElement({\cf22 "Reporter"})\par
5430                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5431                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5432             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
5433                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i) \{\par
5434                     xml.scopedElement({\cf22 "TestCase"}).writeAttribute({\cf22 "name"}, in.data[i]->m_name)\par
5435                         .writeAttribute({\cf22 "testsuite"}, in.data[i]->m_test_suite)\par
5436                         .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.data[i]->m_file.c_str()))\par
5437                         .writeAttribute({\cf22 "line"}, line(in.data[i]->m_line))\par
5438                         .writeAttribute({\cf22 "skipped"}, in.data[i]->m_skip);\par
5439                 \}\par
5440                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5441                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5442             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
5443                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
5444                     xml.scopedElement({\cf22 "TestSuite"}).writeAttribute({\cf22 "name"}, in.data[i]->m_test_suite);\par
5445                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5446                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5447                 xml.scopedElement({\cf22 "OverallResultsTestSuites"})\par
5448                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestSuitesPassingFilters);\par
5449             \}\par
5450             xml.endElement();\par
5451         \}\par
5452 \par
5453         {\cf18 void} test_run_start(){\cf17  override }\{\par
5454             xml.writeDeclaration();\par
5455 \par
5456             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5457             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5458 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5459             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5460                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5461 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5462 \par
5463             xml.startElement({\cf22 "doctest"}).writeAttribute({\cf22 "binary"}, binary_name);\par
5464             {\cf19 if}(opt.no_version == {\cf17 false})\par
5465                 xml.writeAttribute({\cf22 "version"}, DOCTEST_VERSION_STR);\par
5466 \par
5467             {\cf20 // only the consequential ones (TODO: filters)}\par
5468             xml.scopedElement({\cf22 "Options"})\par
5469                     .writeAttribute({\cf22 "order_by"}, opt.order_by.c_str())\par
5470                     .writeAttribute({\cf22 "rand_seed"}, opt.rand_seed)\par
5471                     .writeAttribute({\cf22 "first"}, opt.first)\par
5472                     .writeAttribute({\cf22 "last"}, opt.last)\par
5473                     .writeAttribute({\cf22 "abort_after"}, opt.abort_after)\par
5474                     .writeAttribute({\cf22 "subcase_filter_levels"}, opt.subcase_filter_levels)\par
5475                     .writeAttribute({\cf22 "case_sensitive"}, opt.case_sensitive)\par
5476                     .writeAttribute({\cf22 "no_throw"}, opt.no_throw)\par
5477                     .writeAttribute({\cf22 "no_skip"}, opt.no_skip);\par
5478         \}\par
5479 \par
5480         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5481             {\cf19 if}(tc) {\cf20 // the TestSuite tag - only if there has been at least 1 test case}\par
5482                 xml.endElement();\par
5483 \par
5484             xml.scopedElement({\cf22 "OverallResultsAsserts"})\par
5485                     .writeAttribute({\cf22 "successes"}, p.numAsserts - p.numAssertsFailed)\par
5486                     .writeAttribute({\cf22 "failures"}, p.numAssertsFailed);\par
5487 \par
5488             xml.startElement({\cf22 "OverallResultsTestCases"})\par
5489                     .writeAttribute({\cf22 "successes"},\par
5490                                     p.numTestCasesPassingFilters - p.numTestCasesFailed)\par
5491                     .writeAttribute({\cf22 "failures"}, p.numTestCasesFailed);\par
5492             {\cf19 if}(opt.no_skipped_summary == {\cf17 false})\par
5493                 xml.writeAttribute({\cf22 "skipped"}, p.numTestCases - p.numTestCasesPassingFilters);\par
5494             xml.endElement();\par
5495 \par
5496             xml.endElement();\par
5497         \}\par
5498 \par
5499         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5500             test_case_start_impl(in);\par
5501             xml.ensureTagClosed();\par
5502         \}\par
5503         \par
5504         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5505 \par
5506         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
5507             xml.startElement({\cf22 "OverallResultsAsserts"})\par
5508                     .writeAttribute({\cf22 "successes"},\par
5509                                     st.numAssertsCurrentTest - st.numAssertsFailedCurrentTest)\par
5510                     .writeAttribute({\cf22 "failures"}, st.numAssertsFailedCurrentTest)\par
5511                     .writeAttribute({\cf22 "test_case_success"}, st.testCaseSuccess);\par
5512             {\cf19 if}(opt.duration)\par
5513                 xml.writeAttribute({\cf22 "duration"}, st.seconds);\par
5514             {\cf19 if}(tc->m_expected_failures)\par
5515                 xml.writeAttribute({\cf22 "expected_failures"}, tc->m_expected_failures);\par
5516             xml.endElement();\par
5517 \par
5518             xml.endElement();\par
5519         \}\par
5520 \par
5521         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5522             DOCTEST_LOCK_MUTEX(mutex)\par
5523 \par
5524             xml.scopedElement({\cf22 "Exception"})\par
5525                     .writeAttribute({\cf22 "crash"}, e.is_crash)\par
5526                     .writeText(e.error_string.c_str());\par
5527         \}\par
5528 \par
5529         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5530             xml.startElement({\cf22 "SubCase"})\par
5531                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5532                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file))\par
5533                     .writeAttribute({\cf22 "line"}, line(in.m_line));\par
5534             xml.ensureTagClosed();\par
5535         \}\par
5536 \par
5537         {\cf18 void} subcase_end(){\cf17  override }\{ xml.endElement(); \}\par
5538 \par
5539         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5540             {\cf19 if}(!rb.m_failed && !opt.success)\par
5541                 {\cf19 return};\par
5542 \par
5543             DOCTEST_LOCK_MUTEX(mutex)\par
5544 \par
5545             xml.startElement({\cf22 "Expression"})\par
5546                     .writeAttribute({\cf22 "success"}, !rb.m_failed)\par
5547                     .writeAttribute({\cf22 "type"}, assertString(rb.m_at))\par
5548                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(rb.m_file))\par
5549                     .writeAttribute({\cf22 "line"}, line(rb.m_line));\par
5550 \par
5551             xml.scopedElement({\cf22 "Original"}).writeText(rb.m_expr);\par
5552 \par
5553             {\cf19 if}(rb.m_threw)\par
5554                 xml.scopedElement({\cf22 "Exception"}).writeText(rb.m_exception.c_str());\par
5555 \par
5556             {\cf19 if}(rb.m_at & assertType::is_throws_as)\par
5557                 xml.scopedElement({\cf22 "ExpectedException"}).writeText(rb.m_exception_type);\par
5558             {\cf19 if}(rb.m_at & assertType::is_throws_with)\par
5559                 xml.scopedElement({\cf22 "ExpectedExceptionString"}).writeText(rb.m_exception_string.c_str());\par
5560             {\cf19 if}((rb.m_at & assertType::is_normal) && !rb.m_threw)\par
5561                 xml.scopedElement({\cf22 "Expanded"}).writeText(rb.m_decomp.c_str());\par
5562 \par
5563             log_contexts();\par
5564 \par
5565             xml.endElement();\par
5566         \}\par
5567 \par
5568         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
5569             DOCTEST_LOCK_MUTEX(mutex)\par
5570 \par
5571             xml.startElement({\cf22 "Message"})\par
5572                     .writeAttribute({\cf22 "type"}, failureString(mb.m_severity))\par
5573                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(mb.m_file))\par
5574                     .writeAttribute({\cf22 "line"}, line(mb.m_line));\par
5575 \par
5576             xml.scopedElement({\cf22 "Text"}).writeText(mb.m_string.c_str());\par
5577 \par
5578             log_contexts();\par
5579 \par
5580             xml.endElement();\par
5581         \}\par
5582 \par
5583         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5584             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
5585                 test_case_start_impl(in);\par
5586                 xml.writeAttribute({\cf22 "skipped"}, {\cf22 "true"});\par
5587                 xml.endElement();\par
5588             \}\par
5589         \}\par
5590     \};\par
5591 \par
5592     DOCTEST_REGISTER_REPORTER({\cf22 "xml"}, 0, XmlReporter);\par
5593 \par
5594     {\cf18 void} fulltext_log_assert_to_stream(std::ostream& s, {\cf17 const} AssertData& rb) \{\par
5595         {\cf19 if}((rb.m_at & (assertType::is_throws_as | assertType::is_throws_with)) ==\par
5596             0) \par
5597             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 " ) "}\par
5598                 << Color::None;\par
5599 \par
5600         {\cf19 if}(rb.m_at & assertType::is_throws) \{ \par
5601             s << (rb.m_threw ? {\cf22 "threw as expected!"} : {\cf22 "did NOT throw at all!"}) << {\cf22 "\\n"};\par
5602         \} {\cf19 else} {\cf19 if}((rb.m_at & assertType::is_throws_as) &&\par
5603                     (rb.m_at & assertType::is_throws_with)) \{ \par
5604             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5605                 << rb.m_exception_string.c_str()\par
5606                 << {\cf22 "\\", "} << rb.m_exception_type << {\cf22 " ) "} << Color::None;\par
5607             {\cf19 if}(rb.m_threw) \{\par
5608                 {\cf19 if}(!rb.m_failed) \{\par
5609                     s << {\cf22 "threw as expected!\\n"};\par
5610                 \} {\cf19 else} \{\par
5611                     s << {\cf22 "threw a DIFFERENT exception! (contents: "} << rb.m_exception << {\cf22 ")\\n"};\par
5612                 \}\par
5613             \} {\cf19 else} \{\par
5614                 s << {\cf22 "did NOT throw at all!\\n"};\par
5615             \}\par
5616         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5617                     assertType::is_throws_as) \{ \par
5618             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", "}\par
5619                 << rb.m_exception_type << {\cf22 " ) "} << Color::None\par
5620                 << (rb.m_threw ? (rb.m_threw_as ? {\cf22 "threw as expected!"} :\par
5621                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5622                                 {\cf22 "did NOT throw at all!"})\par
5623                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5624         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5625                     assertType::is_throws_with) \{ \par
5626             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5627                 << rb.m_exception_string.c_str()\par
5628                 << {\cf22 "\\" ) "} << Color::None\par
5629                 << (rb.m_threw ? (!rb.m_failed ? {\cf22 "threw as expected!"} :\par
5630                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5631                                 {\cf22 "did NOT throw at all!"})\par
5632                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5633         \} {\cf19 else} {\cf19 if}(rb.m_at & assertType::is_nothrow) \{ \par
5634             s << (rb.m_threw ? {\cf22 "THREW exception: "} : {\cf22 "didn't throw!"}) << Color::Cyan\par
5635                 << rb.m_exception << {\cf22 "\\n"};\par
5636         \} {\cf19 else} \{\par
5637             s << (rb.m_threw ? {\cf22 "THREW exception: "} :\par
5638                                 (!rb.m_failed ? {\cf22 "is correct!\\n"} : {\cf22 "is NOT correct!\\n"}));\par
5639             {\cf19 if}(rb.m_threw)\par
5640                 s << rb.m_exception << {\cf22 "\\n"};\par
5641             {\cf19 else}\par
5642                 s << {\cf22 "  values: "} << assertString(rb.m_at) << {\cf22 "( "} << rb.m_decomp << {\cf22 " )\\n"};\par
5643         \}\par
5644     \}\par
5645 \par
5646     {\cf20 // TODO:}\par
5647     {\cf20 // - log_message()}\par
5648     {\cf20 // - respond to queries}\par
5649     {\cf20 // - honor remaining options}\par
5650     {\cf20 // - more attributes in tags}\par
5651     {\cf17 struct }JUnitReporter : {\cf17 public} IReporter\par
5652     \{\par
5653         XmlWriter xml;\par
5654         DOCTEST_DECLARE_MUTEX(mutex)\par
5655         Timer timer;\par
5656         std::vector<String> deepestSubcaseStackNames;\par
5657 \par
5658         {\cf17 struct }JUnitTestCaseData\par
5659         \{\par
5660             {\cf17 static} std::string getCurrentTimestamp() \{\par
5661                 {\cf20 // Beware, this is not reentrant because of backward compatibility issues}\par
5662                 {\cf20 // Also, UTC only, again because of backward compatibility (%z is C++11)}\par
5663                 time_t rawtime;\par
5664                 std::time(&rawtime);\par
5665                 {\cf17 auto} {\cf17 const} timeStampSize = {\cf17 sizeof}({\cf22 "2017-01-16T17:06:45Z"});\par
5666 \par
5667                 std::tm timeInfo;\par
5668 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5669                 gmtime_s(&timeInfo, &rawtime);\par
5670 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5671                 gmtime_r(&rawtime, &timeInfo);\par
5672 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5673 \par
5674                 {\cf18 char} timeStamp[timeStampSize];\par
5675                 {\cf17 const} {\cf18 char}* {\cf17 const} fmt = {\cf22 "%Y-%m-%dT%H:%M:%SZ"};\par
5676 \par
5677                 std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);\par
5678                 {\cf19 return} std::string(timeStamp);\par
5679             \}\par
5680 \par
5681             {\cf17 struct }JUnitTestMessage\par
5682             \{\par
5683                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _type, {\cf17 const} std::string& _details)\par
5684                     : message(_message), type(_type), details(_details) \{\}\par
5685 \par
5686                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _details)\par
5687                     : message(_message), type(), details(_details) \{\}\par
5688 \par
5689                 std::string message, type, details;\par
5690             \};\par
5691 \par
5692             {\cf17 struct }JUnitTestCase\par
5693             \{\par
5694                 JUnitTestCase({\cf17 const} std::string& _classname, {\cf17 const} std::string& _name)\par
5695                     : classname(_classname), name(_name), time(0), failures() \{\}\par
5696 \par
5697                 std::string classname, name;\par
5698                 {\cf18 double} time;\par
5699                 std::vector<JUnitTestMessage> failures, errors;\par
5700             \};\par
5701 \par
5702             {\cf18 void} add({\cf17 const} std::string& classname, {\cf17 const} std::string& name) \{\par
5703                 testcases.emplace_back(classname, name);\par
5704             \}\par
5705 \par
5706             {\cf18 void} appendSubcaseNamesToLastTestcase(std::vector<String> nameStack) \{\par
5707                 {\cf19 for}({\cf17 auto}& curr: nameStack)\par
5708                     if(curr.size())\par
5709                         testcases.back().name += std::string({\cf22 "/"}) + curr.c_str();\par
5710             \}\par
5711 \par
5712             {\cf18 void} addTime({\cf18 double} time) \{\par
5713                 {\cf19 if}(time < 1e-4)\par
5714                     time = 0;\par
5715                 testcases.back().time = time;\par
5716                 totalSeconds += time;\par
5717             \}\par
5718 \par
5719             {\cf18 void} addFailure({\cf17 const} std::string& message, {\cf17 const} std::string& type, {\cf17 const} std::string& details) \{\par
5720                 testcases.back().failures.emplace_back(message, type, details);\par
5721                 ++totalFailures;\par
5722             \}\par
5723 \par
5724             {\cf18 void} addError({\cf17 const} std::string& message, {\cf17 const} std::string& details) \{\par
5725                 testcases.back().errors.emplace_back(message, details);\par
5726                 ++totalErrors;\par
5727             \}\par
5728 \par
5729             std::vector<JUnitTestCase> testcases;\par
5730             {\cf18 double} totalSeconds = 0;\par
5731             {\cf18 int} totalErrors = 0, totalFailures = 0;\par
5732         \};\par
5733 \par
5734         JUnitTestCaseData testCaseData;\par
5735 \par
5736         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5737         {\cf17 const} ContextOptions& opt;\par
5738         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5739 \par
5740         JUnitReporter({\cf17 const} ContextOptions& co)\par
5741                 : xml(*co.cout)\par
5742                 , opt(co) \{\}\par
5743 \par
5744         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5745 \par
5746         {\cf20 // =========================================================================================}\par
5747         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5748         {\cf20 // =========================================================================================}\par
5749 \par
5750         {\cf18 void} report_query({\cf17 const} QueryData&){\cf17  override }\{\par
5751             xml.writeDeclaration();\par
5752         \}\par
5753 \par
5754         {\cf18 void} test_run_start(){\cf17  override }\{\par
5755             xml.writeDeclaration();\par
5756         \}\par
5757 \par
5758         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5759             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5760             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5761 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5762             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5763                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5764 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5765             xml.startElement({\cf22 "testsuites"});\par
5766             xml.startElement({\cf22 "testsuite"}).writeAttribute({\cf22 "name"}, binary_name)\par
5767                     .writeAttribute({\cf22 "errors"}, testCaseData.totalErrors)\par
5768                     .writeAttribute({\cf22 "failures"}, testCaseData.totalFailures)\par
5769                     .writeAttribute({\cf22 "tests"}, p.numAsserts);\par
5770             {\cf19 if}(opt.no_time_in_output == {\cf17 false}) \{\par
5771                 xml.writeAttribute({\cf22 "time"}, testCaseData.totalSeconds);\par
5772                 xml.writeAttribute({\cf22 "timestamp"}, JUnitTestCaseData::getCurrentTimestamp());\par
5773             \}\par
5774             {\cf19 if}(opt.no_version == {\cf17 false})\par
5775                 xml.writeAttribute({\cf22 "doctest_version"}, DOCTEST_VERSION_STR);\par
5776 \par
5777             {\cf19 for}({\cf17 const} {\cf17 auto}& testCase : testCaseData.testcases) \{\par
5778                 xml.startElement({\cf22 "testcase"})\par
5779                     .writeAttribute({\cf22 "classname"}, testCase.classname)\par
5780                     .writeAttribute({\cf22 "name"}, testCase.name);\par
5781                 {\cf19 if}(opt.no_time_in_output == {\cf17 false})\par
5782                     xml.writeAttribute({\cf22 "time"}, testCase.time);\par
5783                 {\cf20 // This is not ideal, but it should be enough to mimic gtest's junit output.}\par
5784                 xml.writeAttribute({\cf22 "status"}, {\cf22 "run"});\par
5785 \par
5786                 {\cf19 for}({\cf17 const} {\cf17 auto}& failure : testCase.failures) \{\par
5787                     xml.scopedElement({\cf22 "failure"})\par
5788                         .writeAttribute({\cf22 "message"}, failure.message)\par
5789                         .writeAttribute({\cf22 "type"}, failure.type)\par
5790                         .writeText(failure.details, {\cf17 false});\par
5791                 \}\par
5792 \par
5793                 {\cf19 for}({\cf17 const} {\cf17 auto}& error : testCase.errors) \{\par
5794                     xml.scopedElement({\cf22 "error"})\par
5795                         .writeAttribute({\cf22 "message"}, error.message)\par
5796                         .writeText(error.details);\par
5797                 \}\par
5798 \par
5799                 xml.endElement();\par
5800             \}\par
5801             xml.endElement();\par
5802             xml.endElement();\par
5803         \}\par
5804 \par
5805         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5806             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5807             timer.start();\par
5808         \}\par
5809 \par
5810         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5811             testCaseData.addTime(timer.getElapsedSeconds());\par
5812             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5813             deepestSubcaseStackNames.clear();\par
5814 \par
5815             timer.start();\par
5816             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5817         \}\par
5818 \par
5819         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&){\cf17  override }\{\par
5820             testCaseData.addTime(timer.getElapsedSeconds());\par
5821             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5822             deepestSubcaseStackNames.clear();\par
5823         \}\par
5824 \par
5825         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5826             DOCTEST_LOCK_MUTEX(mutex)\par
5827             testCaseData.addError({\cf22 "exception"}, e.error_string.c_str());\par
5828         \}\par
5829 \par
5830         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5831             deepestSubcaseStackNames.push_back(in.m_name);\par
5832         \}\par
5833 \par
5834         {\cf18 void} subcase_end(){\cf17  override }\{\}\par
5835 \par
5836         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5837             {\cf19 if}(!rb.m_failed) {\cf20 // report only failures & ignore the `success` option}\par
5838                 {\cf19 return};\par
5839 \par
5840             DOCTEST_LOCK_MUTEX(mutex)\par
5841 \par
5842             std::ostringstream os;\par
5843             os << skipPathFromFilename(rb.m_file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5844               << line(rb.m_line) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << std::endl;\par
5845 \par
5846             fulltext_log_assert_to_stream(os, rb);\par
5847             log_contexts(os);\par
5848             testCaseData.addFailure(rb.m_decomp.c_str(), assertString(rb.m_at), os.str());\par
5849         \}\par
5850 \par
5851         {\cf18 void} log_message({\cf17 const} MessageData&){\cf17  override }\{\}\par
5852 \par
5853         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5854 \par
5855         {\cf18 void} log_contexts(std::ostringstream& s) \{\par
5856             {\cf18 int} num_contexts = get_num_active_contexts();\par
5857             {\cf19 if}(num_contexts) \{\par
5858                 {\cf17 auto} contexts = get_active_contexts();\par
5859 \par
5860                 s << {\cf22 "  logged: "};\par
5861                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5862                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5863                     contexts[i]->stringify(&s);\par
5864                     s << std::endl;\par
5865                 \}\par
5866             \}\par
5867         \}\par
5868     \};\par
5869 \par
5870     DOCTEST_REGISTER_REPORTER({\cf22 "junit"}, 0, JUnitReporter);\par
5871 \par
5872     {\cf17 struct }Whitespace\par
5873     \{\par
5874         {\cf18 int} nrSpaces;\par
5875         {\cf17 explicit} Whitespace({\cf18 int} nr)\par
5876                 : nrSpaces(nr) \{\}\par
5877     \};\par
5878 \par
5879     std::ostream& operator<<(std::ostream& out, {\cf17 const} Whitespace& ws) \{\par
5880         {\cf19 if}(ws.nrSpaces != 0)\par
5881             out << std::setw(ws.nrSpaces) << {\cf23 ' '};\par
5882         {\cf19 return} out;\par
5883     \}\par
5884 \par
5885     {\cf17 struct }ConsoleReporter : {\cf17 public} IReporter\par
5886     \{\par
5887         std::ostream&                 s;\par
5888         {\cf18 bool}                          hasLoggedCurrentTestStart;\par
5889         std::vector<SubcaseSignature> subcasesStack;\par
5890         {\cf18 size_t}                        currentSubcaseLevel;\par
5891         DOCTEST_DECLARE_MUTEX(mutex)\par
5892 \par
5893         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5894         {\cf17 const} ContextOptions& opt;\par
5895         {\cf17 const} TestCaseData*   tc;\par
5896 \par
5897         ConsoleReporter({\cf17 const} ContextOptions& co)\par
5898                 : s(*co.cout)\par
5899                 , opt(co) \{\}\par
5900 \par
5901         ConsoleReporter({\cf17 const} ContextOptions& co, std::ostream& ostr)\par
5902                 : s(ostr)\par
5903                 , opt(co) \{\}\par
5904 \par
5905         {\cf20 // =========================================================================================}\par
5906         {\cf20 // WHAT FOLLOWS ARE HELPERS USED BY THE OVERRIDES OF THE VIRTUAL METHODS OF THE INTERFACE}\par
5907         {\cf20 // =========================================================================================}\par
5908 \par
5909         {\cf18 void} separator_to_stream() \{\par
5910             s << Color::Yellow\par
5911               << {\cf22 "==============================================================================="}\par
5912                  {\cf22 "\\n"};\par
5913         \}\par
5914 \par
5915         {\cf17 const} {\cf18 char}* getSuccessOrFailString({\cf18 bool} success, assertType::Enum at,\par
5916                                            {\cf17 const} {\cf18 char}* success_str) \{\par
5917             {\cf19 if}(success)\par
5918                 {\cf19 return} success_str;\par
5919             {\cf19 return} failureString(at);\par
5920         \}\par
5921 \par
5922         Color::Enum getSuccessOrFailColor({\cf18 bool} success, assertType::Enum at) \{\par
5923             {\cf19 return} success ? Color::BrightGreen :\par
5924                              (at & assertType::is_warn) ? Color::Yellow : Color::Red;\par
5925         \}\par
5926 \par
5927         {\cf18 void} successOrFailColoredStringToStream({\cf18 bool} success, assertType::Enum at,\par
5928                                                 {\cf17 const} {\cf18 char}* success_str = {\cf22 "SUCCESS"}) \{\par
5929             s << getSuccessOrFailColor(success, at)\par
5930               << getSuccessOrFailString(success, at, success_str) << {\cf22 ": "};\par
5931         \}\par
5932 \par
5933         {\cf18 void} log_contexts() \{\par
5934             {\cf18 int} num_contexts = get_num_active_contexts();\par
5935             {\cf19 if}(num_contexts) \{\par
5936                 {\cf17 auto} contexts = get_active_contexts();\par
5937 \par
5938                 s << Color::None << {\cf22 "  logged: "};\par
5939                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5940                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5941                     contexts[i]->stringify(&s);\par
5942                     s << {\cf22 "\\n"};\par
5943                 \}\par
5944             \}\par
5945 \par
5946             s << {\cf22 "\\n"};\par
5947         \}\par
5948 \par
5949         {\cf20 // this was requested to be made virtual so users could override it}\par
5950         {\cf17 virtual} {\cf18 void} file_line_to_stream({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
5951                                         {\cf17 const} {\cf18 char}* tail = {\cf22 ""}) \{\par
5952             s << Color::LightGrey << skipPathFromFilename(file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5953             << (opt.no_line_numbers ? 0 : line) {\cf20 // 0 or the real num depending on the option}\par
5954             << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << tail;\par
5955         \}\par
5956 \par
5957         {\cf18 void} logTestStart() \{\par
5958             {\cf19 if}(hasLoggedCurrentTestStart)\par
5959                 {\cf19 return};\par
5960 \par
5961             separator_to_stream();\par
5962             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 "\\n"});\par
5963             {\cf19 if}(tc->m_description)\par
5964                 s << Color::Yellow << {\cf22 "DESCRIPTION: "} << Color::None << tc->m_description << {\cf22 "\\n"};\par
5965             {\cf19 if}(tc->m_test_suite && tc->m_test_suite[0] != {\cf23 '\\0'})\par
5966                 s << Color::Yellow << {\cf22 "TEST SUITE: "} << Color::None << tc->m_test_suite << {\cf22 "\\n"};\par
5967             {\cf19 if}(strncmp(tc->m_name, {\cf22 "  Scenario:"}, 11) != 0)\par
5968                 s << Color::Yellow << {\cf22 "TEST CASE:  "};\par
5969             s << Color::None << tc->m_name << {\cf22 "\\n"};\par
5970 \par
5971             {\cf19 for}({\cf18 size_t} i = 0; i < currentSubcaseLevel; ++i) \{\par
5972                 {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5973                     s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5974             \}\par
5975 \par
5976             {\cf19 if}(currentSubcaseLevel != subcasesStack.size()) \{\par
5977                 s << Color::Yellow << {\cf22 "\\nDEEPEST SUBCASE STACK REACHED (DIFFERENT FROM THE CURRENT ONE):\\n"} << Color::None;\par
5978                 {\cf19 for}({\cf18 size_t} i = 0; i < subcasesStack.size(); ++i) \{\par
5979                     {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5980                         s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5981                 \}\par
5982             \}\par
5983 \par
5984             s << {\cf22 "\\n"};\par
5985 \par
5986             hasLoggedCurrentTestStart = {\cf17 true};\par
5987         \}\par
5988 \par
5989         {\cf18 void} printVersion() \{\par
5990             {\cf19 if}(opt.no_version == {\cf17 false})\par
5991                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "doctest version is \\""}\par
5992                   << DOCTEST_VERSION_STR << {\cf22 "\\"\\n"};\par
5993         \}\par
5994 \par
5995         {\cf18 void} printIntro() \{\par
5996             {\cf19 if}(opt.no_intro == {\cf17 false}) \{\par
5997                 printVersion();\par
5998                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5999                   << {\cf22 "run with \\"--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help\\" for options\\n"};\par
6000             \}\par
6001         \}\par
6002 \par
6003         {\cf18 void} printHelp() \{\par
6004             {\cf18 int} sizePrefixDisplay = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));\par
6005             printVersion();\par
6006             {\cf20 // clang-format off}\par
6007             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6008             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6009             s << {\cf22 "boolean values: \\"1/on/yes/true\\" or \\"0/off/no/false\\"\\n"};\par
6010             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6011             s << {\cf22 "filter  values: \\"str1,str2,str3\\" (comma separated strings)\\n"};\par
6012             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6013             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6014             s << {\cf22 "filters use wildcards for matching strings\\n"};\par
6015             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6016             s << {\cf22 "something passes a filter if any of the strings in a filter matches\\n"};\par
6017 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6018             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6019             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6020             s << {\cf22 "ALL FLAGS, OPTIONS AND FILTERS ALSO AVAILABLE WITH A \\""} DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "\\" PREFIX!!!\\n"};\par
6021 {\cf21 #endif}\par
6022             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6023             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6024             s << {\cf22 "Query flags - the program quits after them. Available:\\n\\n"};\par
6025             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "?,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help, -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "h                      "}\par
6026               << Whitespace(sizePrefixDisplay*0) <<  {\cf22 "prints this message\\n"};\par
6027             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "v,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "version                       "}\par
6028               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the version\\n"};\par
6029             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "c,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "count                         "}\par
6030               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the number of matching tests\\n"};\par
6031             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ltc, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-cases               "}\par
6032               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching tests by name\\n"};\par
6033             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lts, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-suites              "}\par
6034               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching test suites\\n"};\par
6035             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-reporters                "}\par
6036               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all registered reporters\\n\\n"};\par
6037             {\cf20 // ================================================================================== << 79}\par
6038             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6039             s << {\cf22 "The available <int>/<string> options/filters are:\\n\\n"};\par
6040             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case=<filters>           "}\par
6041               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their name\\n"};\par
6042             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case-exclude=<filters>   "}\par
6043               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their name\\n"};\par
6044             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sf,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file=<filters>         "}\par
6045               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their file\\n"};\par
6046             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sfe, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file-exclude=<filters> "}\par
6047               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their file\\n"};\par
6048             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ts,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite=<filters>          "}\par
6049               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their test suite\\n"};\par
6050             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tse, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite-exclude=<filters>  "}\par
6051               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their test suite\\n"};\par
6052             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase=<filters>             "}\par
6053               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     subcases by their name\\n"};\par
6054             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-exclude=<filters>     "}\par
6055               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT subcases by their name\\n"};\par
6056             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "r,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "reporters=<filters>           "}\par
6057               << Whitespace(sizePrefixDisplay*1) << {\cf22 "reporters to use (console is default)\\n"};\par
6058             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "o,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "out=<string>                  "}\par
6059               << Whitespace(sizePrefixDisplay*1) << {\cf22 "output filename\\n"};\par
6060             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ob,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "order-by=<string>             "}\par
6061               << Whitespace(sizePrefixDisplay*1) << {\cf22 "how the tests should be ordered\\n"};\par
6062             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       <string> - [file/suite/name/rand/none]\\n"};\par
6063             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rand-seed=<int>               "}\par
6064               << Whitespace(sizePrefixDisplay*1) << {\cf22 "seed for random ordering\\n"};\par
6065             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "f,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "first=<int>                   "}\par
6066               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the first test passing the filters to\\n"};\par
6067             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6068             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "l,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "last=<int>                    "}\par
6069               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the last test passing the filters to\\n"};\par
6070             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6071             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "aa,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "abort-after=<int>             "}\par
6072               << Whitespace(sizePrefixDisplay*1) << {\cf22 "stop after <int> failed assertions\\n"};\par
6073             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "scfl,--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-filter-levels=<int>   "}\par
6074               << Whitespace(sizePrefixDisplay*1) << {\cf22 "apply filters for the first <int> levels\\n"};\par
6075             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6076             s << {\cf22 "Bool options - can be used like flags and true is assumed. Available:\\n\\n"};\par
6077             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "s,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "success=<bool>                "}\par
6078               << Whitespace(sizePrefixDisplay*1) << {\cf22 "include successful assertions in output\\n"};\par
6079             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "cs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "case-sensitive=<bool>         "}\par
6080               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters being treated as case sensitive\\n"};\par
6081             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "e,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "exit=<bool>                   "}\par
6082               << Whitespace(sizePrefixDisplay*1) << {\cf22 "exits after the tests finish\\n"};\par
6083             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "d,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "duration=<bool>               "}\par
6084               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the time duration of each test\\n"};\par
6085             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "m,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "minimal=<bool>                "}\par
6086               << Whitespace(sizePrefixDisplay*1) << {\cf22 "minimal console output (only failures)\\n"};\par
6087             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "q,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "quiet=<bool>                  "}\par
6088               << Whitespace(sizePrefixDisplay*1) << {\cf22 "no console output\\n"};\par
6089             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nt,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-throw=<bool>               "}\par
6090               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips exceptions-related assert checks\\n"};\par
6091             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ne,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-exitcode=<bool>            "}\par
6092               << Whitespace(sizePrefixDisplay*1) << {\cf22 "returns (or exits) always with success\\n"};\par
6093             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-run=<bool>                 "}\par
6094               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips all runtime doctest operations\\n"};\par
6095             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ni,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-intro=<bool>               "}\par
6096               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework intro in the output\\n"};\par
6097             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nv,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-version=<bool>             "}\par
6098               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework version in the output\\n"};\par
6099             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-colors=<bool>              "}\par
6100               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables colors in output\\n"};\par
6101             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "fc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "force-colors=<bool>           "}\par
6102               << Whitespace(sizePrefixDisplay*1) << {\cf22 "use colors even when not in a tty\\n"};\par
6103             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nb,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-breaks=<bool>              "}\par
6104               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables breakpoints in debuggers\\n"};\par
6105             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ns,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-skip=<bool>                "}\par
6106               << Whitespace(sizePrefixDisplay*1) << {\cf22 "don't skip test cases marked as skip\\n"};\par
6107             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gfl, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gnu-file-line=<bool>          "}\par
6108               << Whitespace(sizePrefixDisplay*1) << {\cf22 ":n: vs (n): for line numbers in output\\n"};\par
6109             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "npf, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-path-filenames=<bool>      "}\par
6110               << Whitespace(sizePrefixDisplay*1) << {\cf22 "only filenames and no paths in output\\n"};\par
6111             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nln, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-line-numbers=<bool>        "}\par
6112               << Whitespace(sizePrefixDisplay*1) << {\cf22 "0 instead of real line numbers in output\\n"};\par
6113             {\cf20 // ================================================================================== << 79}\par
6114             {\cf20 // clang-format on}\par
6115 \par
6116             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6117             s << {\cf22 "for more information visit the project documentation\\n\\n"};\par
6118         \}\par
6119 \par
6120         {\cf18 void} printRegisteredReporters() \{\par
6121             printVersion();\par
6122             {\cf17 auto} printReporters = [{\cf17 this}] ({\cf17 const} reporterMap& reporters, {\cf17 const} {\cf18 char}* type) \{\par
6123                 {\cf19 if}(reporters.size()) \{\par
6124                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all registered "} << type << {\cf22 "\\n"};\par
6125                     {\cf19 for}({\cf17 auto}& curr : reporters)\par
6126                         s << {\cf22 "priority: "} << std::setw(5) << curr.first.first\par
6127                           << {\cf22 " name: "} << curr.first.second << {\cf22 "\\n"};\par
6128                 \}\par
6129             \};\par
6130             printReporters(getListeners(), {\cf22 "listeners"});\par
6131             printReporters(getReporters(), {\cf22 "reporters"});\par
6132         \}\par
6133 \par
6134         {\cf20 // =========================================================================================}\par
6135         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
6136         {\cf20 // =========================================================================================}\par
6137 \par
6138         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
6139             {\cf19 if}(opt.version) \{\par
6140                 printVersion();\par
6141             \} {\cf19 else} {\cf19 if}(opt.help) \{\par
6142                 printHelp();\par
6143             \} {\cf19 else} {\cf19 if}(opt.list_reporters) \{\par
6144                 printRegisteredReporters();\par
6145             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
6146                 {\cf19 if}(opt.list_test_cases) \{\par
6147                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6148                       << {\cf22 "listing all test case names\\n"};\par
6149                     separator_to_stream();\par
6150                 \}\par
6151 \par
6152                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6153                     s << Color::None << in.data[i]->m_name << {\cf22 "\\n"};\par
6154 \par
6155                 separator_to_stream();\par
6156 \par
6157                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6158                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6159                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6160 \par
6161             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
6162                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all test suites\\n"};\par
6163                 separator_to_stream();\par
6164 \par
6165                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6166                     s << Color::None << in.data[i]->m_test_suite << {\cf22 "\\n"};\par
6167 \par
6168                 separator_to_stream();\par
6169 \par
6170                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6171                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6172                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6173                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6174                   << {\cf22 "test suites with unskipped test cases passing the current filters: "}\par
6175                   << g_cs->numTestSuitesPassingFilters << {\cf22 "\\n"};\par
6176             \}\par
6177         \}\par
6178 \par
6179         {\cf18 void} test_run_start(){\cf17  override }\{\par
6180             {\cf19 if}(!opt.minimal)\par
6181                 printIntro();\par
6182         \}\par
6183 \par
6184         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
6185             {\cf19 if}(opt.minimal && p.numTestCasesFailed == 0)\par
6186                 {\cf19 return};\par
6187 \par
6188             separator_to_stream();\par
6189             s << std::dec;\par
6190 \par
6191             {\cf17 auto} totwidth = int(std::ceil(log10((std::max(p.numTestCasesPassingFilters, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts))) + 1)));\par
6192             {\cf17 auto} passwidth = int(std::ceil(log10((std::max(p.numTestCasesPassingFilters - p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts - p.numAssertsFailed))) + 1)));\par
6193             {\cf17 auto} failwidth = int(std::ceil(log10((std::max(p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAssertsFailed))) + 1)));\par
6194             {\cf17 const} {\cf18 bool} anythingFailed = p.numTestCasesFailed > 0 || p.numAssertsFailed > 0;\par
6195             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "test cases: "} << std::setw(totwidth)\par
6196               << p.numTestCasesPassingFilters << {\cf22 " | "}\par
6197               << ((p.numTestCasesPassingFilters == 0 || anythingFailed) ? Color::None :\par
6198                                                                           Color::Green)\par
6199               << std::setw(passwidth) << p.numTestCasesPassingFilters - p.numTestCasesFailed << {\cf22 " passed"}\par
6200               << Color::None << {\cf22 " | "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::None)\par
6201               << std::setw(failwidth) << p.numTestCasesFailed << {\cf22 " failed"} << Color::None << {\cf22 " |"};\par
6202             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
6203                 {\cf17 const} {\cf18 int} numSkipped = p.numTestCases - p.numTestCasesPassingFilters;\par
6204                 s << {\cf22 " "} << (numSkipped == 0 ? Color::None : Color::Yellow) << numSkipped\par
6205                   << {\cf22 " skipped"} << Color::None;\par
6206             \}\par
6207             s << {\cf22 "\\n"};\par
6208             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "assertions: "} << std::setw(totwidth)\par
6209               << p.numAsserts << {\cf22 " | "}\par
6210               << ((p.numAsserts == 0 || anythingFailed) ? Color::None : Color::Green)\par
6211               << std::setw(passwidth) << (p.numAsserts - p.numAssertsFailed) << {\cf22 " passed"} << Color::None\par
6212               << {\cf22 " | "} << (p.numAssertsFailed > 0 ? Color::Red : Color::None) << std::setw(failwidth)\par
6213               << p.numAssertsFailed << {\cf22 " failed"} << Color::None << {\cf22 " |\\n"};\par
6214             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6215               << {\cf22 "Status: "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::Green)\par
6216               << ((p.numTestCasesFailed > 0) ? {\cf22 "FAILURE!"} : {\cf22 "SUCCESS!"}) << Color::None << std::endl;\par
6217         \}\par
6218 \par
6219         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
6220             hasLoggedCurrentTestStart = {\cf17 false};\par
6221             tc                        = &in;\par
6222             subcasesStack.clear();\par
6223             currentSubcaseLevel = 0;\par
6224         \}\par
6225         \par
6226         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\par
6227             subcasesStack.clear();\par
6228         \}\par
6229 \par
6230         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
6231             {\cf19 if}(tc->m_no_output)\par
6232                 {\cf19 return};\par
6233 \par
6234             {\cf20 // log the preamble of the test case only if there is something}\par
6235             {\cf20 // else to print - something other than that an assert has failed}\par
6236             {\cf19 if}(opt.duration ||\par
6237                (st.failure_flags && st.failure_flags != {\cf17 static_cast<}{\cf18 int}{\cf17 >}(TestCaseFailureReason::AssertFailure)))\par
6238                 logTestStart();\par
6239 \par
6240             {\cf19 if}(opt.duration)\par
6241                 s << Color::None << std::setprecision(6) << std::fixed << st.seconds\par
6242                   << {\cf22 " s: "} << tc->m_name << {\cf22 "\\n"};\par
6243 \par
6244             {\cf19 if}(st.failure_flags & TestCaseFailureReason::Timeout)\par
6245                 s << Color::Red << {\cf22 "Test case exceeded time limit of "} << std::setprecision(6)\par
6246                   << std::fixed << tc->m_timeout << {\cf22 "!\\n"};\par
6247 \par
6248             {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedButDidnt) \{\par
6249                 s << Color::Red << {\cf22 "Should have failed but didn't! Marking it as failed!\\n"};\par
6250             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedAndDid) \{\par
6251                 s << Color::Yellow << {\cf22 "Failed as expected so marking it as not failed\\n"};\par
6252             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::CouldHaveFailedAndDid) \{\par
6253                 s << Color::Yellow << {\cf22 "Allowed to fail so marking it as not failed\\n"};\par
6254             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::DidntFailExactlyNumTimes) \{\par
6255                 s << Color::Red << {\cf22 "Didn't fail exactly "} << tc->m_expected_failures\par
6256                   << {\cf22 " times so marking it as failed!\\n"};\par
6257             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::FailedExactlyNumTimes) \{\par
6258                 s << Color::Yellow << {\cf22 "Failed exactly "} << tc->m_expected_failures\par
6259                   << {\cf22 " times as expected so marking it as not failed!\\n"};\par
6260             \}\par
6261             {\cf19 if}(st.failure_flags & TestCaseFailureReason::TooManyFailedAsserts) \{\par
6262                 s << Color::Red << {\cf22 "Aborting - too many failed asserts!\\n"};\par
6263             \}\par
6264             s << Color::None; {\cf20 // lgtm [cpp/useless-expression]}\par
6265         \}\par
6266 \par
6267         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
6268             DOCTEST_LOCK_MUTEX(mutex)\par
6269             {\cf19 if}(tc->m_no_output)\par
6270                 {\cf19 return};\par
6271 \par
6272             logTestStart();\par
6273 \par
6274             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 " "});\par
6275             successOrFailColoredStringToStream({\cf17 false}, e.is_crash ? assertType::is_require :\par
6276                                                                    assertType::is_check);\par
6277             s << Color::Red << (e.is_crash ? {\cf22 "test case CRASHED: "} : {\cf22 "test case THREW exception: "})\par
6278               << Color::Cyan << e.error_string << {\cf22 "\\n"};\par
6279 \par
6280             {\cf18 int} num_stringified_contexts = get_num_stringified_contexts();\par
6281             {\cf19 if}(num_stringified_contexts) \{\par
6282                 {\cf17 auto} stringified_contexts = get_stringified_contexts();\par
6283                 s << Color::None << {\cf22 "  logged: "};\par
6284                 {\cf19 for}({\cf18 int} i = num_stringified_contexts; i > 0; --i) \{\par
6285                     s << (i == num_stringified_contexts ? {\cf22 ""} : {\cf22 "          "})\par
6286                       << stringified_contexts[i - 1] << {\cf22 "\\n"};\par
6287                 \}\par
6288             \}\par
6289             s << {\cf22 "\\n"} << Color::None;\par
6290         \}\par
6291 \par
6292         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& subc){\cf17  override }\{\par
6293             subcasesStack.push_back(subc);\par
6294             ++currentSubcaseLevel;\par
6295             hasLoggedCurrentTestStart = {\cf17 false};\par
6296         \}\par
6297 \par
6298         {\cf18 void} subcase_end(){\cf17  override }\{\par
6299             --currentSubcaseLevel;\par
6300             hasLoggedCurrentTestStart = {\cf17 false};\par
6301         \}\par
6302 \par
6303         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
6304             {\cf19 if}((!rb.m_failed && !opt.success) || tc->m_no_output)\par
6305                 {\cf19 return};\par
6306 \par
6307             DOCTEST_LOCK_MUTEX(mutex)\par
6308 \par
6309             logTestStart();\par
6310 \par
6311             file_line_to_stream(rb.m_file, rb.m_line, {\cf22 " "});\par
6312             successOrFailColoredStringToStream(!rb.m_failed, rb.m_at);\par
6313 \par
6314             fulltext_log_assert_to_stream(s, rb);\par
6315 \par
6316             log_contexts();\par
6317         \}\par
6318 \par
6319         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
6320             {\cf19 if}(tc->m_no_output)\par
6321                 {\cf19 return};\par
6322 \par
6323             DOCTEST_LOCK_MUTEX(mutex)\par
6324 \par
6325             logTestStart();\par
6326 \par
6327             file_line_to_stream(mb.m_file, mb.m_line, {\cf22 " "});\par
6328             s << getSuccessOrFailColor({\cf17 false}, mb.m_severity)\par
6329               << getSuccessOrFailString(mb.m_severity & assertType::is_warn, mb.m_severity,\par
6330                                         {\cf22 "MESSAGE"}) << {\cf22 ": "};\par
6331             s << Color::None << mb.m_string << {\cf22 "\\n"};\par
6332             log_contexts();\par
6333         \}\par
6334 \par
6335         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
6336     \};\par
6337 \par
6338     DOCTEST_REGISTER_REPORTER({\cf22 "console"}, 0, ConsoleReporter);\par
6339 \par
6340 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6341     {\cf17 struct }DebugOutputWindowReporter : {\cf17 public} ConsoleReporter\par
6342     \{\par
6343         DOCTEST_THREAD_LOCAL {\cf17 static} std::ostringstream oss;\par
6344 \par
6345         DebugOutputWindowReporter({\cf17 const} ContextOptions& co)\par
6346                 : ConsoleReporter(co, oss) \{\}\par
6347 \par
6348 {\cf21 #define DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func, type, arg)                                    \\}\par
6349 {\cf21     void func(type arg) override \{                                                                 \\}\par
6350 {\cf21         bool with_col = g_no_colors;                                                               \\}\par
6351 {\cf21         g_no_colors   = false;                                                                     \\}\par
6352 {\cf21         ConsoleReporter::func(arg);                                                                \\}\par
6353 {\cf21         if(oss.tellp() != std::streampos\{\}) \{                                                      \\}\par
6354 {\cf21             DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());                                        \\}\par
6355 {\cf21             oss.str("");                                                                           \\}\par
6356 {\cf21         \}                                                                                          \\}\par
6357 {\cf21         g_no_colors = with_col;                                                                    \\}\par
6358 {\cf21     \}}\par
6359 \par
6360         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6361         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end, {\cf17 const} TestRunStats&, in)\par
6362         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start, {\cf17 const} TestCaseData&, in)\par
6363         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter, {\cf17 const} TestCaseData&, in)\par
6364         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end, {\cf17 const} CurrentTestCaseStats&, in)\par
6365         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception, {\cf17 const} TestCaseException&, in)\par
6366         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start, {\cf17 const} SubcaseSignature&, in)\par
6367         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6368         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert, {\cf17 const} AssertData&, in)\par
6369         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message, {\cf17 const} MessageData&, in)\par
6370         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped, {\cf17 const} TestCaseData&, in)\par
6371     \};\par
6372 \par
6373     DOCTEST_THREAD_LOCAL std::ostringstream DebugOutputWindowReporter::oss;\par
6374 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6375 \par
6376     {\cf20 // the implementation of parseOption()}\par
6377     {\cf18 bool} parseOptionImpl({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value) \{\par
6378         {\cf20 // going from the end to the beginning and stopping on the first occurrence from the end}\par
6379         {\cf19 for}({\cf18 int} i = argc; i > 0; --i) \{\par
6380             {\cf17 auto} index = i - 1;\par
6381             {\cf17 auto} temp = std::strstr(argv[index], pattern);\par
6382             {\cf19 if}(temp && (value || strlen(temp) == strlen(pattern))) \{ \par
6383                 {\cf20 // eliminate matches in which the chars before the option are not '-'}\par
6384                 {\cf18 bool} noBadCharsFound = {\cf17 true};\par
6385                 {\cf17 auto} curr            = argv[index];\par
6386                 {\cf19 while}(curr != temp) \{\par
6387                     {\cf19 if}(*curr++ != {\cf23 '-'}) \{\par
6388                         noBadCharsFound = {\cf17 false};\par
6389                         {\cf19 break};\par
6390                     \}\par
6391                 \}\par
6392                 {\cf19 if}(noBadCharsFound && argv[index][0] == {\cf23 '-'}) \{\par
6393                     {\cf19 if}(value) \{\par
6394                         {\cf20 // parsing the value of an option}\par
6395                         temp += strlen(pattern);\par
6396                         {\cf17 const} {\cf18 unsigned} len = strlen(temp);\par
6397                         {\cf19 if}(len) \{\par
6398                             *value = temp;\par
6399                             {\cf19 return} {\cf17 true};\par
6400                         \}\par
6401                     \} {\cf19 else} \{\par
6402                         {\cf20 // just a flag - no value}\par
6403                         {\cf19 return} {\cf17 true};\par
6404                     \}\par
6405                 \}\par
6406             \}\par
6407         \}\par
6408         {\cf19 return} {\cf17 false};\par
6409     \}\par
6410 \par
6411     {\cf20 // parses an option and returns the string after the '=' character}\par
6412     {\cf18 bool} parseOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value = {\cf17 nullptr},\par
6413                      {\cf17 const} String& defaultVal = String()) \{\par
6414         {\cf19 if}(value)\par
6415             *value = defaultVal;\par
6416 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6417         {\cf20 // offset (normally 3 for "dt-") to skip prefix}\par
6418         {\cf19 if}(parseOptionImpl(argc, argv, pattern + strlen(DOCTEST_CONFIG_OPTIONS_PREFIX), value))\par
6419             {\cf19 return} {\cf17 true};\par
6420 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6421         {\cf19 return} parseOptionImpl(argc, argv, pattern, value);\par
6422     \}\par
6423 \par
6424     {\cf20 // locates a flag on the command line}\par
6425     {\cf18 bool} parseFlag({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern) \{\par
6426         {\cf19 return} parseOption(argc, argv, pattern);\par
6427     \}\par
6428 \par
6429     {\cf20 // parses a comma separated list of words after a pattern in one of the arguments in argv}\par
6430     {\cf18 bool} parseCommaSepArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern,\par
6431                            std::vector<String>& res) \{\par
6432         String filtersString;\par
6433         {\cf19 if}(parseOption(argc, argv, pattern, &filtersString)) \{\par
6434             {\cf20 // tokenize with "," as a separator, unless escaped with backslash}\par
6435             std::ostringstream s;\par
6436             {\cf17 auto} flush = [&s, &res]() \{\par
6437                 {\cf17 auto} {\cf18 string} = s.str();\par
6438                 {\cf19 if}({\cf18 string}.size() > 0) \{\par
6439                     res.push_back({\cf18 string}.c_str());\par
6440                 \}\par
6441                 s.str({\cf22 ""});\par
6442             \};\par
6443 \par
6444             {\cf18 bool} seenBackslash = {\cf17 false};\par
6445             {\cf17 const} {\cf18 char}* current = filtersString.c_str();\par
6446             {\cf17 const} {\cf18 char}* end = current + strlen(current);\par
6447             {\cf19 while}(current != end) \{\par
6448                 {\cf18 char} character = *current++;\par
6449                 {\cf19 if}(seenBackslash) \{\par
6450                     seenBackslash = {\cf17 false};\par
6451                     {\cf19 if}(character == {\cf23 ','} || character == {\cf23 '\\\\'}) \{\par
6452                         s.put(character);\par
6453                         {\cf19 continue};\par
6454                     \}\par
6455                     s.put({\cf23 '\\\\'});\par
6456                 \}\par
6457                 {\cf19 if}(character == {\cf23 '\\\\'}) \{\par
6458                     seenBackslash = {\cf17 true};\par
6459                 \} {\cf19 else} {\cf19 if}(character == {\cf23 ','}) \{\par
6460                     flush();\par
6461                 \} {\cf19 else} \{\par
6462                     s.put(character);\par
6463                 \}\par
6464             \}\par
6465 \par
6466             {\cf19 if}(seenBackslash) \{\par
6467                 s.put({\cf23 '\\\\'});\par
6468             \}\par
6469             flush();\par
6470             {\cf19 return} {\cf17 true};\par
6471         \}\par
6472         {\cf19 return} {\cf17 false};\par
6473     \}\par
6474 \par
6475     {\cf17 enum} optionType\par
6476     \{\par
6477         option_bool,\par
6478         option_int\par
6479     \};\par
6480 \par
6481     {\cf20 // parses an int/bool option from the command line}\par
6482     {\cf18 bool} parseIntOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, optionType type,\par
6483                         {\cf18 int}& res) \{\par
6484         String parsedValue;\par
6485         {\cf19 if}(!parseOption(argc, argv, pattern, &parsedValue))\par
6486             {\cf19 return} {\cf17 false};\par
6487 \par
6488         {\cf19 if}(type) \{\par
6489             {\cf20 // integer}\par
6490             {\cf20 // TODO: change this to use std::stoi or something else! currently it uses undefined behavior - assumes '0' on failed parse...}\par
6491             {\cf18 int} theInt = std::atoi(parsedValue.c_str());\par
6492             {\cf19 if} (theInt != 0) \{\par
6493                 res = theInt; \par
6494                 {\cf19 return} {\cf17 true};\par
6495             \}\par
6496         \} {\cf19 else} \{\par
6497             {\cf20 // boolean}\par
6498             {\cf17 const} {\cf18 char} positive[][5] = \{ {\cf22 "1"}, {\cf22 "true"}, {\cf22 "on"}, {\cf22 "yes"} \};  {\cf20 // 5 - strlen("true") + 1}\par
6499             {\cf17 const} {\cf18 char} negative[][6] = \{ {\cf22 "0"}, {\cf22 "false"}, {\cf22 "off"}, {\cf22 "no"} \}; {\cf20 // 6 - strlen("false") + 1}\par
6500 \par
6501             {\cf20 // if the value matches any of the positive/negative possibilities}\par
6502             {\cf19 for} ({\cf18 unsigned} i = 0; i < 4; i++) \{\par
6503                 {\cf19 if} (parsedValue.compare(positive[i], {\cf17 true}) == 0) \{\par
6504                     res = 1; \par
6505                     {\cf19 return} {\cf17 true};\par
6506                 \}\par
6507                 {\cf19 if} (parsedValue.compare(negative[i], {\cf17 true}) == 0) \{\par
6508                     res = 0; \par
6509                     {\cf19 return} {\cf17 true};\par
6510                 \}\par
6511             \}\par
6512         \}\par
6513         {\cf19 return} {\cf17 false};\par
6514     \}\par
6515 \} {\cf20 // namespace}\par
6516 \par
6517 Context::Context({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv)\par
6518         : p(new detail::ContextState) \{\par
6519     parseArgs(argc, argv, {\cf17 true});\par
6520     {\cf19 if}(argc)\par
6521         p->binary_name = argv[0];\par
6522 \}\par
6523 \par
6524 Context::~Context() \{\par
6525     {\cf19 if}(g_cs == p)\par
6526         g_cs = {\cf17 nullptr};\par
6527     {\cf17 delete} p;\par
6528 \}\par
6529 \par
6530 {\cf18 void} Context::applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv) \{\par
6531     parseArgs(argc, argv);\par
6532     {\cf19 if}(argc)\par
6533         p->binary_name = argv[0];\par
6534 \}\par
6535 \par
6536 {\cf20 // parses args}\par
6537 {\cf18 void} Context::parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults) \{\par
6538     {\cf17 using namespace }detail;\par
6539 \par
6540     {\cf20 // clang-format off}\par
6541     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file="},        p->filters[0]);\par
6542     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sf="},                 p->filters[0]);\par
6543     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file-exclude="},p->filters[1]);\par
6544     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sfe="},                p->filters[1]);\par
6545     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite="},         p->filters[2]);\par
6546     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ts="},                 p->filters[2]);\par
6547     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite-exclude="}, p->filters[3]);\par
6548     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tse="},                p->filters[3]);\par
6549     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case="},          p->filters[4]);\par
6550     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tc="},                 p->filters[4]);\par
6551     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case-exclude="},  p->filters[5]);\par
6552     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tce="},                p->filters[5]);\par
6553     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase="},            p->filters[6]);\par
6554     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sc="},                 p->filters[6]);\par
6555     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase-exclude="},    p->filters[7]);\par
6556     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sce="},                p->filters[7]);\par
6557     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "reporters="},          p->filters[8]);\par
6558     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "r="},                  p->filters[8]);\par
6559     {\cf20 // clang-format on}\par
6560 \par
6561     {\cf18 int}    intRes = 0;\par
6562     String strRes;\par
6563 \par
6564 {\cf21 #define DOCTEST_PARSE_AS_BOOL_OR_FLAG(name, sname, var, default)                                   \\}\par
6565 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_bool, intRes) ||  \\}\par
6566 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_bool, intRes))   \\}\par
6567 {\cf21         p->var = static_cast<bool>(intRes);                                                        \\}\par
6568 {\cf21     else if(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name) ||                           \\}\par
6569 {\cf21             parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname))                            \\}\par
6570 {\cf21         p->var = true;                                                                             \\}\par
6571 {\cf21     else if(withDefaults)                                                                          \\}\par
6572 {\cf21     p->var = default}\par
6573 \par
6574 {\cf21 #define DOCTEST_PARSE_INT_OPTION(name, sname, var, default)                                        \\}\par
6575 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_int, intRes) ||   \\}\par
6576 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_int, intRes))    \\}\par
6577 {\cf21         p->var = intRes;                                                                           \\}\par
6578 {\cf21     else if(withDefaults)                                                                          \\}\par
6579 {\cf21     p->var = default}\par
6580 \par
6581 {\cf21 #define DOCTEST_PARSE_STR_OPTION(name, sname, var, default)                                        \\}\par
6582 {\cf21     if(parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", &strRes, default) ||        \\}\par
6583 {\cf21        parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", &strRes, default) ||       \\}\par
6584 {\cf21        withDefaults)                                                                               \\}\par
6585 {\cf21     p->var = strRes}\par
6586 \par
6587     {\cf20 // clang-format off}\par
6588     DOCTEST_PARSE_STR_OPTION({\cf22 "out"}, {\cf22 "o"}, out, {\cf22 ""});\par
6589     DOCTEST_PARSE_STR_OPTION({\cf22 "order-by"}, {\cf22 "ob"}, order_by, {\cf22 "file"});\par
6590     DOCTEST_PARSE_INT_OPTION({\cf22 "rand-seed"}, {\cf22 "rs"}, rand_seed, 0);\par
6591 \par
6592     DOCTEST_PARSE_INT_OPTION({\cf22 "first"}, {\cf22 "f"}, first, 0);\par
6593     DOCTEST_PARSE_INT_OPTION({\cf22 "last"}, {\cf22 "l"}, last, UINT_MAX);\par
6594 \par
6595     DOCTEST_PARSE_INT_OPTION({\cf22 "abort-after"}, {\cf22 "aa"}, abort_after, 0);\par
6596     DOCTEST_PARSE_INT_OPTION({\cf22 "subcase-filter-levels"}, {\cf22 "scfl"}, subcase_filter_levels, INT_MAX);\par
6597 \par
6598     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "success"}, {\cf22 "s"}, success, {\cf17 false});\par
6599     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "case-sensitive"}, {\cf22 "cs"}, case_sensitive, {\cf17 false});\par
6600     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "exit"}, {\cf22 "e"}, exit, {\cf17 false});\par
6601     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "duration"}, {\cf22 "d"}, duration, {\cf17 false});\par
6602     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "minimal"}, {\cf22 "m"}, minimal, {\cf17 false});\par
6603     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "quiet"}, {\cf22 "q"}, quiet, {\cf17 false});\par
6604     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-throw"}, {\cf22 "nt"}, no_throw, {\cf17 false});\par
6605     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-exitcode"}, {\cf22 "ne"}, no_exitcode, {\cf17 false});\par
6606     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-run"}, {\cf22 "nr"}, no_run, {\cf17 false});\par
6607     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-intro"}, {\cf22 "ni"}, no_intro, {\cf17 false});\par
6608     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-version"}, {\cf22 "nv"}, no_version, {\cf17 false});\par
6609     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-colors"}, {\cf22 "nc"}, no_colors, {\cf17 false});\par
6610     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "force-colors"}, {\cf22 "fc"}, force_colors, {\cf17 false});\par
6611     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-breaks"}, {\cf22 "nb"}, no_breaks, {\cf17 false});\par
6612     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skip"}, {\cf22 "ns"}, no_skip, {\cf17 false});\par
6613     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "gnu-file-line"}, {\cf22 "gfl"}, gnu_file_line, !{\cf18 bool}(DOCTEST_MSVC));\par
6614     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-path-filenames"}, {\cf22 "npf"}, no_path_in_filenames, {\cf17 false});\par
6615     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-line-numbers"}, {\cf22 "nln"}, no_line_numbers, {\cf17 false});\par
6616     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-debug-output"}, {\cf22 "ndo"}, no_debug_output, {\cf17 false});\par
6617     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skipped-summary"}, {\cf22 "nss"}, no_skipped_summary, {\cf17 false});\par
6618     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-time-in-output"}, {\cf22 "ntio"}, no_time_in_output, {\cf17 false});\par
6619     {\cf20 // clang-format on}\par
6620 \par
6621     {\cf19 if}(withDefaults) \{\par
6622         p->help             = {\cf17 false};\par
6623         p->version          = {\cf17 false};\par
6624         p->count            = {\cf17 false};\par
6625         p->list_test_cases  = {\cf17 false};\par
6626         p->list_test_suites = {\cf17 false};\par
6627         p->list_reporters   = {\cf17 false};\par
6628     \}\par
6629     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "help"}) ||\par
6630        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "h"}) ||\par
6631        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "?"})) \{\par
6632         p->help = {\cf17 true};\par
6633         p->exit = {\cf17 true};\par
6634     \}\par
6635     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "version"}) ||\par
6636        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "v"})) \{\par
6637         p->version = {\cf17 true};\par
6638         p->exit    = {\cf17 true};\par
6639     \}\par
6640     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "count"}) ||\par
6641        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "c"})) \{\par
6642         p->count = {\cf17 true};\par
6643         p->exit  = {\cf17 true};\par
6644     \}\par
6645     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-cases"}) ||\par
6646        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ltc"})) \{\par
6647         p->list_test_cases = {\cf17 true};\par
6648         p->exit            = {\cf17 true};\par
6649     \}\par
6650     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-suites"}) ||\par
6651        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lts"})) \{\par
6652         p->list_test_suites = {\cf17 true};\par
6653         p->exit             = {\cf17 true};\par
6654     \}\par
6655     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-reporters"}) ||\par
6656        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lr"})) \{\par
6657         p->list_reporters = {\cf17 true};\par
6658         p->exit           = {\cf17 true};\par
6659     \}\par
6660 \}\par
6661 \par
6662 {\cf20 // allows the user to add procedurally to the filters from the command line}\par
6663 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value) \{ setOption(filter, value); \}\par
6664 \par
6665 {\cf20 // allows the user to clear all filters from the command line}\par
6666 {\cf18 void} Context::clearFilters() \{\par
6667     {\cf19 for}({\cf17 auto}& curr : p->filters)\par
6668         curr.clear();\par
6669 \}\par
6670 \par
6671 {\cf20 // allows the user to override procedurally the bool options from the command line}\par
6672 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value) \{\par
6673     setOption(option, value ? {\cf22 "true"} : {\cf22 "false"});\par
6674 \}\par
6675 \par
6676 {\cf20 // allows the user to override procedurally the int options from the command line}\par
6677 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value) \{\par
6678     setOption(option, toString(value).c_str());\par
6679 \}\par
6680 \par
6681 {\cf20 // allows the user to override procedurally the string options from the command line}\par
6682 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value) \{\par
6683     {\cf17 auto} argv   = String({\cf22 "-"}) + option + {\cf22 "="} + value;\par
6684     {\cf17 auto} lvalue = argv.c_str();\par
6685     parseArgs(1, &lvalue);\par
6686 \}\par
6687 \par
6688 {\cf20 // users should query this in their main() and exit the program if true}\par
6689 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} p->exit; \}\par
6690 \par
6691 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{ g_cs = p; \}\par
6692 \par
6693 {\cf18 void} Context::setAssertHandler(detail::assert_handler ah) \{ p->ah = ah; \}\par
6694 \par
6695 {\cf18 void} Context::setCout(std::ostream* out) \{ p->cout = out; \}\par
6696 \par
6697 {\cf17 static} {\cf17 class }DiscardOStream : {\cf17 public} std::ostream\par
6698 \{\par
6699 {\cf17 private}:\par
6700     class : {\cf17 public} std::streambuf\par
6701     \{\par
6702     {\cf17 private}:\par
6703         {\cf20 // allowing some buffering decreases the amount of calls to overflow}\par
6704         {\cf18 char} buf[1024];\par
6705 \par
6706     {\cf17 protected}:\par
6707         std::streamsize xsputn({\cf17 const} char_type*, std::streamsize count){\cf17  override }\{ {\cf19 return} count; \}\par
6708 \par
6709         int_type overflow(int_type ch){\cf17  override }\{\par
6710             setp(std::begin(buf), std::end(buf));\par
6711             {\cf19 return} traits_type::not_eof(ch);\par
6712         \}\par
6713     \} discardBuf;\par
6714 \par
6715 {\cf17 public}:\par
6716     DiscardOStream()\par
6717             : std::ostream(&discardBuf) \{\}\par
6718 \} discardOut;\par
6719 \par
6720 {\cf20 // the main function that does all the filtering and test running}\par
6721 {\cf18 int} Context::run() \{\par
6722     {\cf17 using namespace }detail;\par
6723 \par
6724     {\cf20 // save the old context state in case such was setup - for using asserts out of a testing context}\par
6725     {\cf17 auto} old_cs = g_cs;\par
6726     {\cf20 // this is the current contest}\par
6727     g_cs               = p;\par
6728     is_running_in_test = {\cf17 true};\par
6729 \par
6730     g_no_colors = p->no_colors;\par
6731     p->resetRunData();\par
6732 \par
6733     std::fstream fstr;\par
6734     {\cf19 if}(p->cout == {\cf17 nullptr}) \{\par
6735         {\cf19 if}(p->quiet) \{\par
6736             p->cout = &discardOut;\par
6737         \} {\cf19 else} {\cf19 if}(p->out.size()) \{\par
6738             {\cf20 // to a file if specified}\par
6739             fstr.open(p->out.c_str(), std::fstream::out);\par
6740             p->cout = &fstr;\par
6741         \} {\cf19 else} \{\par
6742             {\cf20 // stdout by default}\par
6743             p->cout = &std::cout;\par
6744         \}\par
6745     \}\par
6746 \par
6747     FatalConditionHandler::allocateAltStackMem();\par
6748 \par
6749     {\cf17 auto} cleanup_and_return = [&]() \{\par
6750         FatalConditionHandler::freeAltStackMem();\par
6751 \par
6752         {\cf19 if}(fstr.is_open())\par
6753             fstr.close();\par
6754 \par
6755         {\cf20 // restore context}\par
6756         g_cs               = old_cs;\par
6757         is_running_in_test = {\cf17 false};\par
6758 \par
6759         {\cf20 // we have to free the reporters which were allocated when the run started}\par
6760         {\cf19 for}({\cf17 auto}& curr : p->reporters_currently_used)\par
6761             delete curr;\par
6762         p->reporters_currently_used.clear();\par
6763 \par
6764         {\cf19 if}(p->numTestCasesFailed && !p->no_exitcode)\par
6765             {\cf19 return} EXIT_FAILURE;\par
6766         {\cf19 return} EXIT_SUCCESS;\par
6767     \};\par
6768 \par
6769     {\cf20 // setup default reporter if none is given through the command line}\par
6770     {\cf19 if}(p->filters[8].empty())\par
6771         p->filters[8].push_back({\cf22 "console"});\par
6772 \par
6773     {\cf20 // check to see if any of the registered reporters has been selected}\par
6774     {\cf19 for}({\cf17 auto}& curr : getReporters()) \{\par
6775         {\cf19 if}(matchesAny(curr.first.second.c_str(), p->filters[8], {\cf17 false}, p->case_sensitive))\par
6776             p->reporters_currently_used.push_back(curr.second(*g_cs));\par
6777     \}\par
6778 \par
6779     {\cf20 // TODO: check if there is nothing in reporters_currently_used}\par
6780 \par
6781     {\cf20 // prepend all listeners}\par
6782     {\cf19 for}({\cf17 auto}& curr : getListeners())\par
6783         p->reporters_currently_used.insert(p->reporters_currently_used.begin(), curr.second(*g_cs));\par
6784 \par
6785 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6786     {\cf19 if}(isDebuggerActive() && p->no_debug_output == {\cf17 false})\par
6787         p->reporters_currently_used.push_back({\cf17 new} DebugOutputWindowReporter(*g_cs));\par
6788 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6789 \par
6790     {\cf20 // handle version, help and no_run}\par
6791     {\cf19 if}(p->no_run || p->version || p->help || p->list_reporters) \{\par
6792         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, QueryData());\par
6793 \par
6794         {\cf19 return} cleanup_and_return();\par
6795     \}\par
6796 \par
6797     std::vector<const TestCase*> testArray;\par
6798     {\cf19 for}({\cf17 auto}& curr : getRegisteredTests())\par
6799         testArray.push_back(&curr);\par
6800     p->numTestCases = testArray.size();\par
6801 \par
6802     {\cf20 // sort the collected records}\par
6803     {\cf19 if}(!testArray.empty()) \{\par
6804         {\cf19 if}(p->order_by.compare({\cf22 "file"}, {\cf17 true}) == 0) \{\par
6805             std::sort(testArray.begin(), testArray.end(), fileOrderComparator);\par
6806         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "suite"}, {\cf17 true}) == 0) \{\par
6807             std::sort(testArray.begin(), testArray.end(), suiteOrderComparator);\par
6808         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "name"}, {\cf17 true}) == 0) \{\par
6809             std::sort(testArray.begin(), testArray.end(), nameOrderComparator);\par
6810         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "rand"}, {\cf17 true}) == 0) \{\par
6811             std::srand(p->rand_seed);\par
6812 \par
6813             {\cf20 // random_shuffle implementation}\par
6814             {\cf17 const} {\cf17 auto} first = &testArray[0];\par
6815             {\cf19 for}({\cf18 size_t} i = testArray.size() - 1; i > 0; --i) \{\par
6816                 {\cf18 int} idxToSwap = std::rand() % (i + 1);\par
6817 \par
6818                 {\cf17 const} {\cf17 auto} temp = first[i];\par
6819 \par
6820                 first[i]         = first[idxToSwap];\par
6821                 first[idxToSwap] = temp;\par
6822             \}\par
6823         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "none"}, {\cf17 true}) == 0) \{\par
6824             {\cf20 // means no sorting - beneficial for death tests which call into the executable}\par
6825             {\cf20 // with a specific test case in mind - we don't want to slow down the startup times}\par
6826         \}\par
6827     \}\par
6828 \par
6829     std::set<String> testSuitesPassingFilt;\par
6830 \par
6831     {\cf18 bool}                             query_mode = p->count || p->list_test_cases || p->list_test_suites;\par
6832     std::vector<const TestCaseData*> queryResults;\par
6833 \par
6834     {\cf19 if}(!query_mode)\par
6835         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start, DOCTEST_EMPTY);\par
6836 \par
6837     {\cf20 // invoke the registered functions if they match the filter criteria (or just count them)}\par
6838     {\cf19 for}({\cf17 auto}& curr : testArray) \{\par
6839         {\cf17 const} {\cf17 auto}& tc = *curr;\par
6840 \par
6841         {\cf18 bool} skip_me = {\cf17 false};\par
6842         {\cf19 if}(tc.m_skip && !p->no_skip)\par
6843             skip_me = {\cf17 true};\par
6844 \par
6845         {\cf19 if}(!matchesAny(tc.m_file.c_str(), p->filters[0], {\cf17 true}, p->case_sensitive))\par
6846             skip_me = {\cf17 true};\par
6847         {\cf19 if}(matchesAny(tc.m_file.c_str(), p->filters[1], {\cf17 false}, p->case_sensitive))\par
6848             skip_me = {\cf17 true};\par
6849         {\cf19 if}(!matchesAny(tc.m_test_suite, p->filters[2], {\cf17 true}, p->case_sensitive))\par
6850             skip_me = {\cf17 true};\par
6851         {\cf19 if}(matchesAny(tc.m_test_suite, p->filters[3], {\cf17 false}, p->case_sensitive))\par
6852             skip_me = {\cf17 true};\par
6853         {\cf19 if}(!matchesAny(tc.m_name, p->filters[4], {\cf17 true}, p->case_sensitive))\par
6854             skip_me = {\cf17 true};\par
6855         {\cf19 if}(matchesAny(tc.m_name, p->filters[5], {\cf17 false}, p->case_sensitive))\par
6856             skip_me = {\cf17 true};\par
6857 \par
6858         {\cf19 if}(!skip_me)\par
6859             p->numTestCasesPassingFilters++;\par
6860 \par
6861         {\cf20 // skip the test if it is not in the execution range}\par
6862         {\cf19 if}((p->last < p->numTestCasesPassingFilters && p->first <= p->last) ||\par
6863            (p->first > p->numTestCasesPassingFilters))\par
6864             skip_me = {\cf17 true};\par
6865 \par
6866         {\cf19 if}(skip_me) \{\par
6867             {\cf19 if}(!query_mode)\par
6868                 DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped, tc);\par
6869             {\cf19 continue};\par
6870         \}\par
6871 \par
6872         {\cf20 // do not execute the test if we are to only count the number of filter passing tests}\par
6873         {\cf19 if}(p->count)\par
6874             {\cf19 continue};\par
6875 \par
6876         {\cf20 // print the name of the test and don't execute it}\par
6877         {\cf19 if}(p->list_test_cases) \{\par
6878             queryResults.push_back(&tc);\par
6879             {\cf19 continue};\par
6880         \}\par
6881 \par
6882         {\cf20 // print the name of the test suite if not done already and don't execute it}\par
6883         {\cf19 if}(p->list_test_suites) \{\par
6884             {\cf19 if}((testSuitesPassingFilt.count(tc.m_test_suite) == 0) && tc.m_test_suite[0] != {\cf23 '\\0'}) \{\par
6885                 queryResults.push_back(&tc);\par
6886                 testSuitesPassingFilt.insert(tc.m_test_suite);\par
6887                 p->numTestSuitesPassingFilters++;\par
6888             \}\par
6889             {\cf19 continue};\par
6890         \}\par
6891 \par
6892         {\cf20 // execute the test if it passes all the filtering}\par
6893         \{\par
6894             p->currentTest = &tc;\par
6895 \par
6896             p->failure_flags = TestCaseFailureReason::None;\par
6897             p->seconds       = 0;\par
6898 \par
6899             {\cf20 // reset atomic counters}\par
6900             p->numAssertsFailedCurrentTest_atomic = 0;\par
6901             p->numAssertsCurrentTest_atomic       = 0;\par
6902 \par
6903             p->fullyTraversedSubcases.clear();\par
6904 \par
6905             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start, tc);\par
6906 \par
6907             p->timer.start();\par
6908             \par
6909             {\cf18 bool} run_test = {\cf17 true};\par
6910 \par
6911             {\cf19 do} \{\par
6912                 {\cf20 // reset some of the fields for subcases (except for the set of fully passed ones)}\par
6913                 p->reachedLeaf = {\cf17 false};\par
6914                 {\cf20 // May not be empty if previous subcase exited via exception.}\par
6915                 p->subcaseStack.clear();\par
6916                 p->currentSubcaseDepth = 0;\par
6917 \par
6918                 p->shouldLogCurrentException = {\cf17 true};\par
6919 \par
6920                 {\cf20 // reset stuff for logging with INFO()}\par
6921                 p->stringifiedContexts.clear();\par
6922 \par
6923 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6924                 {\cf19 try} \{\par
6925 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6926 {\cf20 // MSVC 2015 diagnoses fatalConditionHandler as unused (because reset() is a static method)}\par
6927 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4101) {\cf20 // unreferenced local variable}\par
6928                     FatalConditionHandler fatalConditionHandler; {\cf20 // Handle signals}\par
6929                     {\cf20 // execute the test}\par
6930                     tc.m_test();\par
6931                     fatalConditionHandler.reset();\par
6932 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
6933 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6934                 \} {\cf19 catch}({\cf17 const} TestFailureException&) \{\par
6935                     p->failure_flags |= TestCaseFailureReason::AssertFailure;\par
6936                 \} {\cf19 catch}(...) \{\par
6937                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,\par
6938                                                       \{translateActiveException(), {\cf17 false}\});\par
6939                     p->failure_flags |= TestCaseFailureReason::Exception;\par
6940                 \}\par
6941 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6942 \par
6943                 {\cf20 // exit this loop if enough assertions have failed - even if there are more subcases}\par
6944                 {\cf19 if}(p->abort_after > 0 &&\par
6945                    p->numAssertsFailed + p->numAssertsFailedCurrentTest_atomic >= p->abort_after) \{\par
6946                     run_test = {\cf17 false};\par
6947                     p->failure_flags |= TestCaseFailureReason::TooManyFailedAsserts;\par
6948                 \}\par
6949                 \par
6950                 {\cf19 if}(!p->nextSubcaseStack.empty() && run_test)\par
6951                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter, tc);\par
6952                 {\cf19 if}(p->nextSubcaseStack.empty())\par
6953                     run_test = {\cf17 false};\par
6954             \} {\cf19 while}(run_test);\par
6955 \par
6956             p->finalizeTestCaseData();\par
6957 \par
6958             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
6959 \par
6960             p->currentTest = {\cf17 nullptr};\par
6961 \par
6962             {\cf20 // stop executing tests if enough assertions have failed}\par
6963             {\cf19 if}(p->abort_after > 0 && p->numAssertsFailed >= p->abort_after)\par
6964                 {\cf19 break};\par
6965         \}\par
6966     \}\par
6967 \par
6968     {\cf19 if}(!query_mode) \{\par
6969         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
6970     \} {\cf19 else} \{\par
6971         QueryData qdata;\par
6972         qdata.run_stats = g_cs;\par
6973         qdata.data      = queryResults.data();\par
6974         qdata.num_data  = unsigned(queryResults.size());\par
6975         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, qdata);\par
6976     \}\par
6977 \par
6978     {\cf19 return} cleanup_and_return();\par
6979 \}\par
6980 \par
6981 DOCTEST_DEFINE_INTERFACE(IReporter)\par
6982 \par
6983 {\cf18 int} IReporter::get_num_active_contexts() \{ {\cf19 return} detail::g_infoContexts.size(); \}\par
6984 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{\par
6985     {\cf19 return} get_num_active_contexts() ? &detail::g_infoContexts[0] : {\cf17 nullptr};\par
6986 \}\par
6987 \par
6988 {\cf18 int} IReporter::get_num_stringified_contexts() \{ {\cf19 return} detail::g_cs->stringifiedContexts.size(); \}\par
6989 {\cf17 const} String* IReporter::get_stringified_contexts() \{\par
6990     {\cf19 return} get_num_stringified_contexts() ? &detail::g_cs->stringifiedContexts[0] : {\cf17 nullptr};\par
6991 \}\par
6992 \par
6993 {\cf17 namespace }detail \{\par
6994     {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, reporterCreatorFunc c, {\cf18 bool} isReporter) \{\par
6995         {\cf19 if}(isReporter)\par
6996             getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6997         {\cf19 else}\par
6998             getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6999     \}\par
7000 \} {\cf20 // namespace detail}\par
7001 \par
7002 \} {\cf20 // namespace doctest}\par
7003 \par
7004 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
7005 \par
7006 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7007 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) {\cf20 // 'function' : must be 'attribute' - see issue #182}\par
7008 int main({\cf18 int} argc, {\cf18 char}** argv) \{ {\cf19 return} doctest::Context(argc, argv).run(); \}\par
7009 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7010 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7011 \par
7012 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
7013 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7014 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
7015 \par
7016 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
7017 \par
7018 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_IMPLEMENTATION}\par
7019 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/test_controlemidia.cpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/test_controlemidia.cpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/ControleMidia/test_controlemidia.cpp}
{\bkmkstart AAAAAAAAPX}
{\bkmkend AAAAAAAAPX}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "doctest.h"}\par
{\f2 #include "ControleMidia.hpp"}\par
{\f2 #include "ControleMidiaExceptions.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b capture_stdout} ({\b ControleMidia} &estoque, char ordem)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Midia}/DVD correto")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Midia}/DVD codigo repetido")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Midia}/{\b Fita} correto")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro {\b Midia}/{\b Fita} codigo repetido")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste cadastro tipo desconhecido de midia")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste remover m\'EDdia")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste remover midia")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste imprimir m\'EDdias")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste de leitura bem-sucedida do arquivo de cadastro")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b TEST_CASE} ("Teste de erro de abertura de arquivo")\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}}
\par
{\bkmkstart AAAAAAAAPY}
{\bkmkend AAAAAAAAPY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v capture_stdout\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:capture_stdout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string capture_stdout ({\b ControleMidia} &  {\i estoque}, char  {\i ordem})}}
\par
{\bkmkstart AAAAAAAAPZ}
{\bkmkend AAAAAAAAPZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 6                                                              \{\par
7     std::ostringstream oss;\par
8     std::streambuf* coutbuf = std::cout.rdbuf();\par
9     std::cout.rdbuf(oss.rdbuf());\par
10 \par
11     estoque.imprimirMidias(ordem);  \par
12 \par
13     std::cout.rdbuf(coutbuf);  \par
14     {\cf19 return} oss.str();\par
15 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Midia}/DVD codigo repetido" )}}
\par
{\bkmkstart AAAAAAAAQA}
{\bkmkend AAAAAAAAQA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 22                                                      \{\par
23     ControleMidia estoque;\par
24     estoque.cadastrarMidia(1, 1,{\cf22 "Matrix"},10, {\cf22 "Lancamento"});\par
25     CHECK_THROWS_AS(estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},4, {\cf22 "Promocao"}),midia_excp::codigo_repetido) ;\par
26 \par
27 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Midia}/DVD correto" )}}
\par
{\bkmkstart AAAAAAAAQB}
{\bkmkend AAAAAAAAQB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 17                                              \{\par
18     ControleMidia estoque;\par
19     CHECK(estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},10, {\cf22 "Promocao"})=={\cf17 true}) ;\par
20 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Midia}/{\b Fita} codigo repetido" )}}
\par
{\bkmkstart AAAAAAAAQC}
{\bkmkend AAAAAAAAQC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 34                                                       \{\par
35     ControleMidia estoque;\par
36     estoque.cadastrarMidia(2, 20,{\cf22 "Django"},10, {\cf22 ""});\par
37     CHECK_THROWS_AS(estoque.cadastrarMidia(2, 10,{\cf22 "Django"},9, {\cf22 ""}),midia_excp::codigo_repetido) ;\par
38 \par
39 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro {\b Midia}/{\b Fita} correto" )}}
\par
{\bkmkstart AAAAAAAAQD}
{\bkmkend AAAAAAAAQD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 29                                               \{\par
30     ControleMidia estoque;\par
31     CHECK(estoque.cadastrarMidia(2, 10,{\cf22 "Gladiator"},32, {\cf22 ""})=={\cf17 true}) ;\par
32 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste cadastro tipo desconhecido de midia" )}}
\par
{\bkmkstart AAAAAAAAQE}
{\bkmkend AAAAAAAAQE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 41                                                       \{\par
42     ControleMidia estoque;\par
43     CHECK_THROWS_AS(estoque.cadastrarMidia(4, 3,{\cf22 "Jaws"},6, {\cf22 "Promocao"}),midia_excp::tipo_desconhecido) ;\par
44 \par
45 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste de erro de abertura de arquivo" )}}
\par
{\bkmkstart AAAAAAAAQF}
{\bkmkend AAAAAAAAQF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 134                                                   \{\par
135     ControleMidia estoque;\par
136 \par
137     std::string arquivoInexistente = {\cf22 "arquivo_inexistente.txt"};\par
138 \par
139     CHECK_THROWS_AS(estoque.lerArquivoCadastro(arquivoInexistente), midia_excp::erro_de_abertura);\par
140 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste de leitura bem-sucedida do arquivo de cadastro" )}}
\par
{\bkmkstart AAAAAAAAQG}
{\bkmkend AAAAAAAAQG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 108                                                                   \{\par
109     ControleMidia estoque;\par
110 \par
111 \par
112     CHECK_NOTHROW(estoque.lerArquivoCadastro({\cf22 "dbMidia.txt"}));\par
113 \par
114     std:: vector<Midia*> vetor = estoque.getEstoque();\par
115     REQUIRE(vetor.size()== 3);\par
116 \par
117     REQUIRE(vetor[0]->getCodigo() == 101);\par
118     REQUIRE(vetor[0]->getTitulo() == {\cf22 "Filme1"});\par
119     REQUIRE(vetor[0]->getUnidadesDisponiveis() == 20);\par
120     REQUIRE({\cf17 dynamic_cast<}Dvd*{\cf17 >}(vetor[0])->getCategoria() == {\cf22 "Lancamento"});\par
121 \par
122     REQUIRE(vetor[0]->getCodigo() == 102);\par
123     REQUIRE(vetor[0]->getTitulo() == {\cf22 "Fita1"});\par
124     REQUIRE(vetor[0]->getUnidadesDisponiveis() == 15);\par
125 \par
126     REQUIRE(vetor[0]->getCodigo() == 103);\par
127     REQUIRE(vetor[0]->getTitulo() == {\cf22 "Filme2"});\par
128     REQUIRE(vetor[0]->getUnidadesDisponiveis() == 30);\par
129     REQUIRE({\cf17 dynamic_cast<}Dvd*{\cf17 >}(vetor[0])->getCategoria() == {\cf22 "Estoque"});\par
130 \par
131     \par
132 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste imprimir m\'EDdias" )}}
\par
{\bkmkstart AAAAAAAAQH}
{\bkmkend AAAAAAAAQH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 80                                    \{\par
81     \par
82     ControleMidia estoque;\par
83     estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},10, {\cf22 "Promocao"});\par
84     estoque.cadastrarMidia(2, 2,{\cf22 "Gladiator"},32, {\cf22 ""});\par
85     estoque.cadastrarMidia(2, 3,{\cf22 "Django"},10, {\cf22 ""});\par
86     estoque.cadastrarMidia(1, 4,{\cf22 "Jaws"},6, {\cf22 "Promocao"});\par
87     \par
88     SUBCASE({\cf22 "Teste ordem por c\'F3digo"})\{\par
89         std::string expected_output = {\cf22 "1 Titanic 10 DVD\\n2 Gladiador 32 FITA\\n3 Django 10 FITA\\n4 Jaws 6 DVD\\n"};\par
90         std::string actual_output = capture_stdout(estoque, {\cf23 'C'});\par
91         CHECK(actual_output == expected_output);\par
92     \}\par
93     \par
94      SUBCASE({\cf22 "Teste ordem por t\'EDtulo"})\{\par
95         std::string expected_output = {\cf22 "3 Django 10 FITA\\n2 Gladiador 32 FITA\\n4 Jaws 6 DVD\\n1 Titanic 10 DVD\\n"};\par
96         std::string actual_output = capture_stdout(estoque, {\cf23 'T'});\par
97         CHECK(actual_output == expected_output);\par
98     \}\par
99     \par
100     SUBCASE({\cf22 "Teste ordem inv\'E1lida"})\{\par
101         CHECK_THROWS_AS(estoque.imprimirMidias({\cf23 'R'}), midia_excp::ordem_invalida);\par
102     \}\par
103     \par
104 \}\par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste remover m\'EDdia" )}}
\par
{\bkmkstart AAAAAAAAQI}
{\bkmkend AAAAAAAAQI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 47                                  \{\par
48     ControleMidia estoque;\par
49     estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},10, {\cf22 "Promocao"});\par
50     estoque.cadastrarMidia(2, 2,{\cf22 "Gladiator"},32, {\cf22 ""});\par
51     estoque.cadastrarMidia(2, 3,{\cf22 "Django"},10, {\cf22 ""});\par
52     estoque.cadastrarMidia(1, 4,{\cf22 "Jaws"},6, {\cf22 "Promocao"});\par
53 \par
54     SUBCASE({\cf22 "Pesquisa de c\'F3digo v\'E1lido"})\{\par
55         CHECK(estoque.pesquisarMidia(2)!= estoque.getEstoqueEnd());\par
56     \}\par
57 \par
58     SUBCASE({\cf22 "Pesquisa de c\'F3digo inv\'E1lido"})\{\par
59         CHECK(estoque.pesquisarMidia(10)== estoque.getEstoqueEnd());\par
60     \}\par
61 \}   \par
}
}
{\xe \v TEST_CASE\:test_controlemidia.cpp}
{\xe \v test_controlemidia.cpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
TEST_CASE ("Teste remover midia" )}}
\par
{\bkmkstart AAAAAAAAQJ}
{\bkmkend AAAAAAAAQJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 63                                 \{\par
64     \par
65     ControleMidia estoque;\par
66     estoque.cadastrarMidia(1, 1,{\cf22 "Titanic"},10, {\cf22 "Promocao"});\par
67     estoque.cadastrarMidia(2, 2,{\cf22 "Gladiator"},32, {\cf22 ""});\par
68     estoque.cadastrarMidia(2, 3,{\cf22 "Django"},10, {\cf22 ""});\par
69     estoque.cadastrarMidia(1, 4,{\cf22 "Jaws"},6, {\cf22 "Promocao"});\par
70 \par
71     SUBCASE({\cf22 "Remover m\'EDdia v\'E1lida"})\{\par
72         CHECK(estoque.removerMidia(2)=={\cf17 true});\par
73     \}\par
74 \par
75     SUBCASE({\cf22 "Remo\'E7ao de c\'F3digo inv\'E1lido"})\{\par
76         CHECK_THROWS_AS(estoque.removerMidia(10),midia_excp::codigo_inexistente);\par
77     \}\par
78 \}   \par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/doctest.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/doctest.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/doctest.hpp}
{\bkmkstart AAAAAAAAQK}
{\bkmkend AAAAAAAAQK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <signal.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Componentes\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::String}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Contains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::AssertData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::AssertData::StringContains}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::MessageData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::SubcaseSignature}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IContextScope}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::ContextOptions}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT too many fields. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< COND, T >}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::enable_if< true, T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::true_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::false_type}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T & >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_rvalue_reference< T && >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::remove_const< const T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_enum< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::underlying_type< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_pointer< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::types::is_array< T[SIZE]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::deferred_false< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, typename >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::has_insertion_operator< T, decltype(operator<<(declval< std::ostream & >(), declval< const T & >()), void())>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< C >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::StringMakerBase< true >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::StringMaker< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const char[N]>}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< const void * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::filldata< T * >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::Approx}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IsNaN< F >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestFailureException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Subcase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Result}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::Expression_lhs< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ExpressionDecomposer}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestSuite}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::TestCase}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::RelationalComparator< int, L, R >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ResultBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::IExceptionTranslator}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ExceptionTranslator< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
OCLINT destructor of virtual class. }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::ContextScopeBase}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::detail::ContextScope< L >}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::detail::MessageBuilder}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b doctest::Context}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::CurrentTestCaseStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestCaseException}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::TestRunStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::QueryData}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b doctest::IReporter}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b std}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::Color}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::assertType}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::types}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::binaryAssertComparison}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::detail::assertAction}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest_detail_test_suite_ns}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b doctest::TestCaseFailureReason}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e Macros\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MAJOR}\~ 2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_MINOR}\~ 4\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_PATCH}\~ 9\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR_IMPL}(x)\~ #x\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TOSTR}(x)\~ {\b DOCTEST_TOSTR_IMPL}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION_STR}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_VERSION}\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CPLUSPLUS}\~ __cplusplus\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPILER}(MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC}\~ 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}(w)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_POSIX_SIGNALS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_EXCEPTIONS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_EXPORT}\~ __attribute__((visibility("default")))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SYMBOL_IMPORT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DECL}\~ {\b DOCTEST_INTERFACE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INTERFACE_DEF}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EMPTY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOINLINE}\~ __attribute__((noinline))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNUSED}\~ __attribute__((unused))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ALIGNMENT}(x)\~ __attribute__((aligned(x)))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NORETURN}\~ [[noreturn]]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_NOEXCEPT}\~ noexcept\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONSTEXPR_FUNC}\~ constexpr\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DECLARE_INTERFACE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_INTERFACE}(name)\~     name::~name() = default;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT_IMPL}(s1,  s2)\~ s1##s2\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAT}(s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ANONYMOUS}(x)\~ {\b DOCTEST_CAT}(x, __LINE__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REF_WRAP}(x)\~ x&\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_PLATFORM_LINUX}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GLOBAL_NO_WARNINGS}(var, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BREAK_INTO_DEBUGGER}()\~ raise(SIGTRAP)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CONFIG_STRING_SIZE_TYPE}\~ unsigned\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_STRINGIFY}(...)\~ toString(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SFINAE_OP}(ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}(op,  op_str,  op_macro)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FORBIT_EXPRESSION}(rt,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_COMPARISON_RETURN_TYPE}\~ bool\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_RELATIONAL_OP}(name,  op)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_EQ}(l,  r)\~ l == r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_NE}(l,  r)\~ l != r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GT}(l,  r)\~ l > r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LT}(l,  r)\~ l < r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_GE}(l,  r)\~ l >= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CMP_LE}(l,  r)\~ l <= r\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_RELATIONAL_OP}(n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_OUT_OF_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IN_TESTS}(decomp)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_DEFINE_DECORATOR}(name,  type,  def)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_EMPTY}\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_BEGIN}\~ do\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_END}\~ while(false)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FUNC_SCOPE_RET}(v)\~ (void)0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_LOG_REACT_RETURN}(b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WRAP_IN_TRY}(x)\~ x;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAST_TO_VOID}(...)\~ __VA_ARGS__;\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_FUNCTION}(global_prefix,  f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_IMPLEMENT_FIXTURE}(der,  base,  func,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}(f,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}(f,  proxy,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE}(decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_CLASS}(...)\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_FIXTURE}(c,  decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING_AS}(str, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}(dec,  T,  iter,  func)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(dec,  T,  id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}(id,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec,  T,  anon, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE}(dec,  T, ...)\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_IMPL}(decorators,  ns_name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE}(decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_BEGIN}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}(translatorName,  signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_REPORTER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REGISTER_LISTENER}(name,  priority,  reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO}(...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_INFO_IMPL}(mb_name,  s_name, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CAPTURE}(x)\~ {\b DOCTEST_INFO}(#x " := ", x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_AT_IMPL}(type,  file,  line,  mb, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_MESSAGE}(...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL_CHECK}(...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAIL}(...)\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TO_LVALUE}(...)\~ __VA_ARGS__\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_2}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_ASSERT_IMPLEMENT_1}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_BINARY_ASSERT}(assert_type,  comp, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_UNARY_ASSERT}(assert_type, ...)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}(...)\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}(...)\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_FALSE_MESSAGE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_EQ}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LT}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_GE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_LE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_EQ}\~ {\b DOCTEST_WARN_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_EQ}\~ {\b DOCTEST_CHECK_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_EQ}\~ {\b DOCTEST_REQUIRE_EQ}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_NE}\~ {\b DOCTEST_WARN_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_NE}\~ {\b DOCTEST_CHECK_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_NE}\~ {\b DOCTEST_REQUIRE_NE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GT}\~ {\b DOCTEST_WARN_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GT}\~ {\b DOCTEST_CHECK_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GT}\~ {\b DOCTEST_REQUIRE_GT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LT}\~ {\b DOCTEST_WARN_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LT}\~ {\b DOCTEST_CHECK_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LT}\~ {\b DOCTEST_REQUIRE_LT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_GE}\~ {\b DOCTEST_WARN_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_GE}\~ {\b DOCTEST_CHECK_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_GE}\~ {\b DOCTEST_REQUIRE_GE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_LE}\~ {\b DOCTEST_WARN_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_LE}\~ {\b DOCTEST_CHECK_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_LE}\~ {\b DOCTEST_REQUIRE_LE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY}\~ {\b DOCTEST_WARN_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY}\~ {\b DOCTEST_CHECK_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY}\~ {\b DOCTEST_REQUIRE_UNARY}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_WARN_UNARY_FALSE}\~ {\b DOCTEST_WARN_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_CHECK_UNARY_FALSE}\~ {\b DOCTEST_CHECK_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO}(name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_GIVEN}(name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("    When: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_WHEN}(name)\~ {\b DOCTEST_SUBCASE}("And when: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_THEN}(name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_AND_THEN}(name)\~ {\b DOCTEST_SUBCASE}("     And: " name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE}(name)\~ {\b DOCTEST_TEST_CASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_CLASS}(name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_FIXTURE}(x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING_AS}(str, ...)\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TYPE_TO_STRING}(...)\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INVOKE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_APPLY}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SUBCASE}(name)\~ {\b DOCTEST_SUBCASE}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE}(decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_BEGIN}(name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_SUITE_END}\~ {\b DOCTEST_TEST_SUITE_END}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_EXCEPTION_TRANSLATOR}(signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_REPORTER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REGISTER_LISTENER}(name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b INFO}(...)\~ {\b DOCTEST_INFO}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CAPTURE}(x)\~ {\b DOCTEST_CAPTURE}(x)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_MESSAGE_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_CHECK_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ADD_FAIL_AT}(file,  line, ...)\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MESSAGE}(...)\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL_CHECK}(...)\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAIL}(...)\~ {\b DOCTEST_FAIL}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TO_LVALUE}(...)\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN}(...)\~ {\b DOCTEST_WARN}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE}(...)\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS}(...)\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW}(...)\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK}(...)\~ {\b DOCTEST_CHECK}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE}(...)\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS}(...)\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW}(...)\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE}(...)\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE}(...)\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS}(...)\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW}(...)\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_FALSE_MESSAGE}(cond, ...)\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_AS_MESSAGE}(expr,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_MESSAGE}(expr,  with, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_THROWS_WITH_AS_MESSAGE}(expr,  with,  ex, ...)\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NOTHROW_MESSAGE}(expr, ...)\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO}(name)\~ {\b DOCTEST_SCENARIO}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_CLASS}(name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE}(name,  T, ...)\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b SCENARIO_TEMPLATE_DEFINE}(name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b GIVEN}(name)\~ {\b DOCTEST_GIVEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WHEN}(name)\~ {\b DOCTEST_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_WHEN}(name)\~ {\b DOCTEST_AND_WHEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b THEN}(name)\~ {\b DOCTEST_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b AND_THEN}(name)\~ {\b DOCTEST_AND_THEN}(name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_EQ}(...)\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_EQ}(...)\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_EQ}(...)\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_NE}(...)\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_NE}(...)\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_NE}(...)\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GT}(...)\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GT}(...)\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GT}(...)\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LT}(...)\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LT}(...)\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LT}(...)\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_GE}(...)\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_GE}(...)\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_GE}(...)\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_LE}(...)\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_LE}(...)\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_LE}(...)\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY}(...)\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY}(...)\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY}(...)\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_EQ}(...)\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_EQ}(...)\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_EQ}(...)\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_NE}(...)\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_NE}(...)\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_NE}(...)\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GT}(...)\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GT}(...)\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GT}(...)\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LT}(...)\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LT}(...)\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LT}(...)\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_GE}(...)\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_GE}(...)\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_GE}(...)\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_LE}(...)\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_LE}(...)\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_LE}(...)\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY}(...)\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_WARN_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_CHECK_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FAST_REQUIRE_UNARY_FALSE}(...)\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TEST_CASE_TEMPLATE_INSTANTIATE}(id, ...)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b DOCTEST_SINGLE_HEADER}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Enumera\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::Color::Enum} \{ {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
, {\b doctest::Color::None} = 0
, {\b doctest::Color::White}
, {\b doctest::Color::Red}
, {\b doctest::Color::Green}
, {\b doctest::Color::Blue}
, {\b doctest::Color::Cyan}
, {\b doctest::Color::Yellow}
, {\b doctest::Color::Grey}
, {\b doctest::Color::Bright} = 0x10
, {\b doctest::Color::BrightRed} = Bright | Red
, {\b doctest::Color::BrightGreen} = Bright | Green
, {\b doctest::Color::LightGrey} = Bright | Grey
, {\b doctest::Color::BrightWhite} = Bright | White
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::assertType::Enum} \{ {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
, {\b doctest::assertType::is_warn} = 1
, {\b doctest::assertType::is_check} = 2 * is_warn
, {\b doctest::assertType::is_require} = 2 * is_check
, {\b doctest::assertType::is_normal} = 2 * is_require
, {\b doctest::assertType::is_throws} = 2 * is_normal
, {\b doctest::assertType::is_throws_as} = 2 * is_throws
, {\b doctest::assertType::is_throws_with} = 2 * is_throws_as
, {\b doctest::assertType::is_nothrow} = 2 * is_throws_with
, {\b doctest::assertType::is_false} = 2 * is_nothrow
, {\b doctest::assertType::is_unary} = 2 * is_false
, {\b doctest::assertType::is_eq} = 2 * is_unary
, {\b doctest::assertType::is_ne} = 2 * is_eq
, {\b doctest::assertType::is_lt} = 2 * is_ne
, {\b doctest::assertType::is_gt} = 2 * is_lt
, {\b doctest::assertType::is_ge} = 2 * is_gt
, {\b doctest::assertType::is_le} = 2 * is_ge
, {\b doctest::assertType::DT_WARN} = is_normal | is_warn
, {\b doctest::assertType::DT_CHECK} = is_normal | is_check
, {\b doctest::assertType::DT_REQUIRE} = is_normal | is_require
, {\b doctest::assertType::DT_WARN_FALSE} = is_normal | is_false | is_warn
, {\b doctest::assertType::DT_CHECK_FALSE} = is_normal | is_false | is_check
, {\b doctest::assertType::DT_REQUIRE_FALSE} = is_normal | is_false | is_require
, {\b doctest::assertType::DT_WARN_THROWS} = is_throws | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS} = is_throws | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS} = is_throws | is_require
, {\b doctest::assertType::DT_WARN_THROWS_AS} = is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_AS} = is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_AS} = is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH} = is_throws_with | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH} = is_throws_with | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH} = is_throws_with | is_require
, {\b doctest::assertType::DT_WARN_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_warn
, {\b doctest::assertType::DT_CHECK_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_check
, {\b doctest::assertType::DT_REQUIRE_THROWS_WITH_AS} = is_throws_with | is_throws_as | is_require
, {\b doctest::assertType::DT_WARN_NOTHROW} = is_nothrow | is_warn
, {\b doctest::assertType::DT_CHECK_NOTHROW} = is_nothrow | is_check
, {\b doctest::assertType::DT_REQUIRE_NOTHROW} = is_nothrow | is_require
, {\b doctest::assertType::DT_WARN_EQ} = is_normal | is_eq | is_warn
, {\b doctest::assertType::DT_CHECK_EQ} = is_normal | is_eq | is_check
, {\b doctest::assertType::DT_REQUIRE_EQ} = is_normal | is_eq | is_require
, {\b doctest::assertType::DT_WARN_NE} = is_normal | is_ne | is_warn
, {\b doctest::assertType::DT_CHECK_NE} = is_normal | is_ne | is_check
, {\b doctest::assertType::DT_REQUIRE_NE} = is_normal | is_ne | is_require
, {\b doctest::assertType::DT_WARN_GT} = is_normal | is_gt | is_warn
, {\b doctest::assertType::DT_CHECK_GT} = is_normal | is_gt | is_check
, {\b doctest::assertType::DT_REQUIRE_GT} = is_normal | is_gt | is_require
, {\b doctest::assertType::DT_WARN_LT} = is_normal | is_lt | is_warn
, {\b doctest::assertType::DT_CHECK_LT} = is_normal | is_lt | is_check
, {\b doctest::assertType::DT_REQUIRE_LT} = is_normal | is_lt | is_require
, {\b doctest::assertType::DT_WARN_GE} = is_normal | is_ge | is_warn
, {\b doctest::assertType::DT_CHECK_GE} = is_normal | is_ge | is_check
, {\b doctest::assertType::DT_REQUIRE_GE} = is_normal | is_ge | is_require
, {\b doctest::assertType::DT_WARN_LE} = is_normal | is_le | is_warn
, {\b doctest::assertType::DT_CHECK_LE} = is_normal | is_le | is_check
, {\b doctest::assertType::DT_REQUIRE_LE} = is_normal | is_le | is_require
, {\b doctest::assertType::DT_WARN_UNARY} = is_normal | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY} = is_normal | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY} = is_normal | is_unary | is_require
, {\b doctest::assertType::DT_WARN_UNARY_FALSE} = is_normal | is_false | is_unary | is_warn
, {\b doctest::assertType::DT_CHECK_UNARY_FALSE} = is_normal | is_false | is_unary | is_check
, {\b doctest::assertType::DT_REQUIRE_UNARY_FALSE} = is_normal | is_false | is_unary | is_require
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::binaryAssertComparison::Enum} \{ {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
, {\b doctest::detail::binaryAssertComparison::eq} = 0
, {\b doctest::detail::binaryAssertComparison::ne}
, {\b doctest::detail::binaryAssertComparison::gt}
, {\b doctest::detail::binaryAssertComparison::lt}
, {\b doctest::detail::binaryAssertComparison::ge}
, {\b doctest::detail::binaryAssertComparison::le}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::detail::assertAction::Enum} \{ {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
, {\b doctest::detail::assertAction::nothing} = 0
, {\b doctest::detail::assertAction::dbgbreak} = 1
, {\b doctest::detail::assertAction::shouldthrow} = 2
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b doctest::TestCaseFailureReason::Enum} \{ {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
, {\b doctest::TestCaseFailureReason::None} = 0
, {\b doctest::TestCaseFailureReason::AssertFailure} = 1
, {\b doctest::TestCaseFailureReason::Exception} = 2
, {\b doctest::TestCaseFailureReason::Crash} = 4
, {\b doctest::TestCaseFailureReason::TooManyFailedAsserts} = 8
, {\b doctest::TestCaseFailureReason::Timeout} = 16
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedButDidnt} = 32
, {\b doctest::TestCaseFailureReason::ShouldHaveFailedAndDid} = 64
, {\b doctest::TestCaseFailureReason::DidntFailExactlyNumTimes} = 128
, {\b doctest::TestCaseFailureReason::FailedExactlyNumTimes} = 256
, {\b doctest::TestCaseFailureReason::CouldHaveFailedAndDid} = 512
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class traits > {\b basic_ostream}< char, traits > & {\b std::operator<<} ({\b basic_ostream}< char, traits > &, const char *)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::operator+} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator<=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator>=} (const {\b String} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Contains} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator==} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b String} &lhs, const {\b Contains} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::operator!=} (const {\b Contains} &lhs, const {\b String} &rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} & {\b doctest::Color::operator<<} ({\b std::ostream} &s, {\b Color::Enum} code)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::assertString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::failureString} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const char * {\b doctest::skipPathFromFilename} (const char *file)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T && {\b doctest::detail::declval} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class T > {\b DOCTEST_CONSTEXPR_FUNC} T && {\b doctest::detail::forward} (typename {\b types::remove_reference}< T >::type &&t) {\b DOCTEST_NOEXCEPT}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b std::ostream} * {\b doctest::detail::tlssPush} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::detail::tlssPop} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , size_t N> void {\b doctest::detail::filloss} ({\b std::ostream} *stream, const T(&in)[N])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::detail::toStream} (const T &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > {\b String} {\b doctest::toString} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T , typename {\b detail::types::enable_if}<!{\b detail::types::is_enum}< T >::value, bool >::type  = true> {\b String} {\b doctest::toString} (const {\b DOCTEST_REF_WRAP}(T) value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b String} in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b std::nullptr_t})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (bool in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (float in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (double long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (char unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (short unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (signed in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (long long unsigned in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} (const {\b Approx} &in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} const {\b ContextOptions} * {\b doctest::getContextOptions} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< float > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b String} {\b doctest::toString} ({\b IsNaN}< double long > in)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::checkIfShouldThrow} ({\b assertType::Enum} at)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::throwException} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L , typename R > {\b String} {\b doctest::detail::stringifyBinaryExpr} (const {\b DOCTEST_REF_WRAP}(L) lhs, const char *op, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::regTest} (const {\b TestCase} &tc)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} int {\b doctest::detail::setTestSuite} (const {\b TestSuite} &ts)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::isDebuggerActive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::detail::instantiationHelper} (const T &)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::failed_out_of_a_testing_context} (const {\b AssertData} &ad)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} bool {\b doctest::detail::decomp_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b Result} &result)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<int comparison, typename L , typename R > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::binary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b DOCTEST_NOINLINE} bool {\b doctest::detail::unary_assert} ({\b assertType::Enum} at, const char *file, int line, const char *expr, const {\b DOCTEST_REF_WRAP}(L) val)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerExceptionTranslatorImpl} (const {\b IExceptionTranslator} *et)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename L > {\b ContextScope}< L > {\b doctest::detail::MakeContextScope} (const L &lambda)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (test_suite, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (description, const char *, "")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (skip, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_breaks, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (no_output, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (timeout, double, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (may_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (should_fail, bool, true)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b doctest::DOCTEST_DEFINE_DECORATOR} (expected_failures, int, 0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b doctest::registerExceptionTranslator} ({\b String}(*translateFunction)(T))\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} {\b doctest::detail::TestSuite} & {\b doctest_detail_test_suite_ns::getCurrentTestSuite} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b DOCTEST_INTERFACE} void {\b doctest::detail::registerReporterImpl} (const char *name, int prio, {\b reporterCreatorFunc} c, bool isReporter)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > {\b IReporter} * {\b doctest::detail::reporterCreator} (const {\b ContextOptions} &o)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename Reporter > int {\b doctest::registerReporter} (const char *name, int priority, bool isReporter)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Defini\'E7\'F5es e macros\par
\pard\plain 
{\xe \v ADD_FAIL_AT\:doctest.hpp}
{\xe \v doctest.hpp\:ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQL}
{\bkmkend AAAAAAAAQL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_FAIL_CHECK_AT\:doctest.hpp}
{\xe \v doctest.hpp\:ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQM}
{\bkmkend AAAAAAAAQM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ADD_MESSAGE_AT\:doctest.hpp}
{\xe \v doctest.hpp\:ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(file, line, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQN}
{\bkmkend AAAAAAAAQN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_THEN\:doctest.hpp}
{\xe \v doctest.hpp\:AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_THEN( name)\~ {\b DOCTEST_AND_THEN}(name)}}
\par
{\bkmkstart AAAAAAAAQO}
{\bkmkend AAAAAAAAQO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v AND_WHEN\:doctest.hpp}
{\xe \v doctest.hpp\:AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define AND_WHEN( name)\~ {\b DOCTEST_AND_WHEN}(name)}}
\par
{\bkmkstart AAAAAAAAQP}
{\bkmkend AAAAAAAAQP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CAPTURE\:doctest.hpp}
{\xe \v doctest.hpp\:CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CAPTURE( x)\~ {\b DOCTEST_CAPTURE}(x)}}
\par
{\bkmkstart AAAAAAAAQQ}
{\bkmkend AAAAAAAAQQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK(  {\i ...})\~ {\b DOCTEST_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQR}
{\bkmkend AAAAAAAAQR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_EQ(  {\i ...})\~ {\b DOCTEST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQS}
{\bkmkend AAAAAAAAQS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQT}
{\bkmkend AAAAAAAAQT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQU}
{\bkmkend AAAAAAAAQU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GE(  {\i ...})\~ {\b DOCTEST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQV}
{\bkmkend AAAAAAAAQV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_GT\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_GT(  {\i ...})\~ {\b DOCTEST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQW}
{\bkmkend AAAAAAAAQW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LE(  {\i ...})\~ {\b DOCTEST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQX}
{\bkmkend AAAAAAAAQX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_LT\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_LT(  {\i ...})\~ {\b DOCTEST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQY}
{\bkmkend AAAAAAAAQY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_CHECK_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAQZ}
{\bkmkend AAAAAAAAQZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NE(  {\i ...})\~ {\b DOCTEST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARA}
{\bkmkend AAAAAAAARA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARB}
{\bkmkend AAAAAAAARB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARC}
{\bkmkend AAAAAAAARC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_CHECK_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARD}
{\bkmkend AAAAAAAARD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARE}
{\bkmkend AAAAAAAARE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARF}
{\bkmkend AAAAAAAARF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARG}
{\bkmkend AAAAAAAARG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARH}
{\bkmkend AAAAAAAARH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARI}
{\bkmkend AAAAAAAARI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARJ}
{\bkmkend AAAAAAAARJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_CHECK_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARK}
{\bkmkend AAAAAAAARK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARL}
{\bkmkend AAAAAAAARL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v CHECK_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARM}
{\bkmkend AAAAAAAARM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_AT_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ADD_AT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_AT_IMPL( type,  file,  line,  mb,   {\i ...})}}
\par
{\bkmkstart AAAAAAAARN}
{\bkmkend AAAAAAAARN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
        mb * __VA_ARGS__;                                                                          \\\par
        if(mb.log())                                                                               \\\par
            DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\\par
        mb.react();                                                                                \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2319                              \{                                                                     \\\par
2320         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\\par
2321         mb * __VA_ARGS__;                                                                          \\\par
2322         if(mb.log())                                                                               \\\par
2323             DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\\par
2324         mb.react();                                                                                \\\par
2325     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ADD_FAIL_AT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ADD_FAIL_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_require, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARO}
{\bkmkend AAAAAAAARO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_FAIL_CHECK_AT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ADD_FAIL_CHECK_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_FAIL_CHECK_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_check, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARP}
{\bkmkend AAAAAAAARP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ADD_MESSAGE_AT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ADD_MESSAGE_AT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ADD_MESSAGE_AT( file,  line,   {\i ...})\~ {\b DOCTEST_ADD_AT_IMPL}(is_warn, file, line, {\b DOCTEST_ANONYMOUS}(DOCTEST_MESSAGE_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAARQ}
{\bkmkend AAAAAAAARQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ALIGNMENT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ALIGNMENT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ALIGNMENT( x)\~ __attribute__((aligned(x)))}}
\par
{\bkmkstart AAAAAAAARR}
{\bkmkend AAAAAAAARR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_THEN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_AND_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_THEN( name)\~ {\b DOCTEST_SUBCASE}("     And: " name)}}
\par
{\bkmkstart AAAAAAAARS}
{\bkmkend AAAAAAAARS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_AND_WHEN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_AND_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_AND_WHEN( name)\~ {\b DOCTEST_SUBCASE}("And when: " name)}}
\par
{\bkmkstart AAAAAAAART}
{\bkmkend AAAAAAAART}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ANONYMOUS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ANONYMOUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ANONYMOUS( x)\~ {\b DOCTEST_CAT}(x, __LINE__)}}
\par
{\bkmkstart AAAAAAAARU}
{\bkmkend AAAAAAAARU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_1\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ASSERT_IMPLEMENT_1}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_1( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAARV}
{\bkmkend AAAAAAAARV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_ASSERT_IMPLEMENT_2\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ASSERT_IMPLEMENT_2}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IMPLEMENT_2( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAARW}
{\bkmkend AAAAAAAARW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Woverloaded-shift-op-parentheses"})                  \\\par
    {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}                                  \\\par
    doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\\par
                                               __LINE__, #__VA_ARGS__);                            \\\par
    DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\\par
            doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\\par
            << __VA_ARGS__)) {\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}         \\\par
    DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_ASSERT_IN_TESTS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ASSERT_IN_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_IN_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAARX}
{\bkmkend AAAAAAAARX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     ResultBuilder rb(at, file, line, expr);                                                        \\\par
    rb.m_failed = failed;                                                                          \\\par
    if(rb.m_failed || getContextOptions()->success)                                                \\\par
        rb.m_decomp = decomp;                                                                      \\\par
    if(rb.log())                                                                                   \\\par
        DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\\par
    if(rb.m_failed && checkIfShouldThrow(at))                                                      \\\par
    throwException()\par
}
}
{\xe \v DOCTEST_ASSERT_LOG_REACT_RETURN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ASSERT_LOG_REACT_RETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_LOG_REACT_RETURN( b)}}
\par
{\bkmkstart AAAAAAAARY}
{\bkmkend AAAAAAAARY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\\par
    b.react();                                                                                     \\\par
    DOCTEST_FUNC_SCOPE_RET(!b.m_failed)\par
}
}
{\xe \v DOCTEST_ASSERT_OUT_OF_TESTS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_ASSERT_OUT_OF_TESTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_ASSERT_OUT_OF_TESTS( decomp)}}
\par
{\bkmkstart AAAAAAAARZ}
{\bkmkend AAAAAAAARZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 do} \{                                                                                           \\\par
        if(!is_running_in_test) \{                                                                  \\\par
            if(failed) \{                                                                           \\\par
                ResultBuilder rb(at, file, line, expr);                                            \\\par
                rb.m_failed = failed;                                                              \\\par
                rb.m_decomp = decomp;                                                              \\\par
                failed_out_of_a_testing_context(rb);                                               \\\par
                if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
                    DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
                if(checkIfShouldThrow(at))                                                         \\\par
                    throwException();                                                              \\\par
            \}                                                                                      \\\par
            {\cf19 return} !failed;                                                                        \\\par
        \}                                                                                          \\\par
    \} {\cf19 while}({\cf17 false})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1695        \{                                                                                           \\\par
1696         if(!is_running_in_test) \{                                                                  \\\par
1697             if(failed) \{                                                                           \\\par
1698                 ResultBuilder rb(at, file, line, expr);                                            \\\par
1699                 rb.m_failed = failed;                                                              \\\par
1700                 rb.m_decomp = decomp;                                                              \\\par
1701                 failed_out_of_a_testing_context(rb);                                               \\\par
1702                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\\par
1703                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\\par
1704                 if(checkIfShouldThrow(at))                                                         \\\par
1705                     throwException();                                                              \\\par
1706             \}                                                                                      \\\par
1707             {\cf19 return} !failed;                                                                        \\\par
1708         \}                                                                                          \\\par
1709     \} {\cf19 while}({\cf17 false})\par
}
}
{\xe \v DOCTEST_BINARY_ASSERT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_BINARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_ASSERT( assert_type,  comp,   {\i ...})}}
\par
{\bkmkstart AAAAAAAASA}
{\bkmkend AAAAAAAASA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(                                                                       \\\par
                DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\\par
                        __VA_ARGS__))                                                              \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2358                              \{                                                                     \\\par
2359         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
2360                                                    __LINE__, #__VA_ARGS__);                        \\\par
2361         DOCTEST_WRAP_IN_TRY(                                                                       \\\par
2362                 DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\\par
2363                         __VA_ARGS__))                                                              \\\par
2364         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
2365     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_BINARY_RELATIONAL_OP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_BINARY_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BINARY_RELATIONAL_OP( n,  op)\~     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const {\b DOCTEST_REF_WRAP}(L) lhs, const {\b DOCTEST_REF_WRAP}(R) rhs) const \{ return op(lhs, rhs); \} \};}}
\par
{\bkmkstart AAAAAAAASB}
{\bkmkend AAAAAAAASB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1629                                                                      \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} DOCTEST_REF_WRAP(R) rhs){\cf17  const }\{ {\cf19 return} op(lhs, rhs); \} \};\par
}
}
{\xe \v DOCTEST_BREAK_INTO_DEBUGGER\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_BREAK_INTO_DEBUGGER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_BREAK_INTO_DEBUGGER()\~ raise(SIGTRAP)}}
\par
{\bkmkstart AAAAAAAASC}
{\bkmkend AAAAAAAASC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAPTURE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CAPTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAPTURE( x)\~ {\b DOCTEST_INFO}(#x " := ", x)}}
\par
{\bkmkstart AAAAAAAASD}
{\bkmkend AAAAAAAASD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAST_TO_VOID\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CAST_TO_VOID}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAST_TO_VOID(  {\i ...})\~ __VA_ARGS__;}}
\par
{\bkmkstart AAAAAAAASE}
{\bkmkend AAAAAAAASE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CAT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT( s1,  s2)\~ {\b DOCTEST_CAT_IMPL}(s1, s2)}}
\par
{\bkmkstart AAAAAAAASF}
{\bkmkend AAAAAAAASF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CAT_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CAT_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CAT_IMPL( s1,  s2)\~ s1##s2}}
\par
{\bkmkstart AAAAAAAASG}
{\bkmkend AAAAAAAASG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASH}
{\bkmkend AAAAAAAASH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASI}
{\bkmkend AAAAAAAASI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_CHECK_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASJ}
{\bkmkend AAAAAAAASJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAASK}
{\bkmkend AAAAAAAASK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASL}
{\bkmkend AAAAAAAASL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASM}
{\bkmkend AAAAAAAASM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASN}
{\bkmkend AAAAAAAASN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASO}
{\bkmkend AAAAAAAASO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_CHECK, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAASP}
{\bkmkend AAAAAAAASP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_CHECK_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAASQ}
{\bkmkend AAAAAAAASQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASR}
{\bkmkend AAAAAAAASR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASS}
{\bkmkend AAAAAAAASS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAST}
{\bkmkend AAAAAAAAST}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASU}
{\bkmkend AAAAAAAASU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASV}
{\bkmkend AAAAAAAASV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASW}
{\bkmkend AAAAAAAASW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASX}
{\bkmkend AAAAAAAASX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASY}
{\bkmkend AAAAAAAASY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAASZ}
{\bkmkend AAAAAAAASZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAATA}
{\bkmkend AAAAAAAATA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAATB}
{\bkmkend AAAAAAAATB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CHECK_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAATC}
{\bkmkend AAAAAAAATC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CLANG}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG\~ 0}}
\par
{\bkmkstart AAAAAAAATD}
{\bkmkend AAAAAAAATD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CLANG_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAATE}
{\bkmkend AAAAAAAATE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_POP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CLANG_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAATF}
{\bkmkend AAAAAAAATF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAATG}
{\bkmkend AAAAAAAATG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAATH}
{\bkmkend AAAAAAAATH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_EQ( l,  r)\~ l == r}}
\par
{\bkmkstart AAAAAAAATI}
{\bkmkend AAAAAAAATI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GE( l,  r)\~ l >= r}}
\par
{\bkmkstart AAAAAAAATJ}
{\bkmkend AAAAAAAATJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_GT( l,  r)\~ l > r}}
\par
{\bkmkstart AAAAAAAATK}
{\bkmkend AAAAAAAATK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LE( l,  r)\~ l <= r}}
\par
{\bkmkstart AAAAAAAATL}
{\bkmkend AAAAAAAATL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_LT( l,  r)\~ l < r}}
\par
{\bkmkstart AAAAAAAATM}
{\bkmkend AAAAAAAATM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CMP_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CMP_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CMP_NE( l,  r)\~ l != r}}
\par
{\bkmkstart AAAAAAAATN}
{\bkmkend AAAAAAAATN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPARISON_RETURN_TYPE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_COMPARISON_RETURN_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPARISON_RETURN_TYPE\~ bool}}
\par
{\bkmkstart AAAAAAAATO}
{\bkmkend AAAAAAAATO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_COMPILER\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_COMPILER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_COMPILER( MAJOR,  MINOR,  PATCH)\~ ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}}
\par
{\bkmkstart AAAAAAAATP}
{\bkmkend AAAAAAAATP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_EXCEPTIONS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONFIG_NO_EXCEPTIONS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_EXCEPTIONS}}
\par
{\bkmkstart AAAAAAAATQ}
{\bkmkend AAAAAAAATQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}}
\par
{\bkmkstart AAAAAAAATR}
{\bkmkend AAAAAAAATR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_POSIX_SIGNALS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONFIG_POSIX_SIGNALS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_POSIX_SIGNALS}}
\par
{\bkmkstart AAAAAAAATS}
{\bkmkend AAAAAAAATS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONFIG_STRING_SIZE_TYPE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONFIG_STRING_SIZE_TYPE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONFIG_STRING_SIZE_TYPE\~ unsigned}}
\par
{\bkmkstart AAAAAAAATT}
{\bkmkend AAAAAAAATT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONSTEXPR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR\~ constexpr}}
\par
{\bkmkstart AAAAAAAATU}
{\bkmkend AAAAAAAATU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CONSTEXPR_FUNC\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CONSTEXPR_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CONSTEXPR_FUNC\~ constexpr}}
\par
{\bkmkstart AAAAAAAATV}
{\bkmkend AAAAAAAATV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CPLUSPLUS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CPLUSPLUS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CPLUSPLUS\~ __cplusplus}}
\par
{\bkmkstart AAAAAAAATW}
{\bkmkend AAAAAAAATW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CREATE_AND_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION( f,  decorators)}}
\par
{\bkmkstart AAAAAAAATX}
{\bkmkend AAAAAAAATX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} {\cf18 void} f();                                                                               \\\par
    DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\\par
    {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS( f,  proxy,  decorators)}}
\par
{\bkmkstart AAAAAAAATY}
{\bkmkend AAAAAAAATY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 static} doctest::detail::funcType proxy() \{ {\cf19 return} f; \}                                         \\\par
    DOCTEST_REGISTER_FUNCTION({\cf17 inline}, proxy(), decorators)                                         \\\par
    {\cf17 static} {\cf18 void} f()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2146                                          \{ {\cf19 return} f; \}                                         \\\par
2147     DOCTEST_REGISTER_FUNCTION({\cf17 inline}, proxy(), decorators)                                         \\\par
2148     {\cf17 static} {\cf18 void} f()\par
}
}
{\xe \v DOCTEST_DECLARE_INTERFACE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_DECLARE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DECLARE_INTERFACE( name)}}
\par
{\bkmkstart AAAAAAAATZ}
{\bkmkend AAAAAAAATZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 virtual} ~name();                                                                               \\\par
    name() = {\cf19 default};                                                                              \\\par
    name({\cf17 const} name&) = {\cf17 delete};                                                                    \\\par
    name(name&&) = {\cf17 delete};                                                                         \\\par
    name& operator=({\cf17 const} name&) = {\cf17 delete};                                                         \\\par
    name& operator=(name&&) = {\cf17 delete};\par
}
}
{\xe \v DOCTEST_DEFINE_DECORATOR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_DEFINE_DECORATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_DECORATOR( name,  type,  def)}}
\par
{\bkmkstart AAAAAAAAUA}
{\bkmkend AAAAAAAAUA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 struct }name                                                                                    \\\par
    \{                                                                                              \\\par
        type data;                                                                                 \\\par
        name(type in = def)                                                                        \\\par
                : data(in) \{\}                                                                      \\\par
        {\cf18 void} fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
        {\cf18 void} fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1874     \{                                                                                              \\\par
1875         type data;                                                                                 \\\par
1876         name(type in = def)                                                                        \\\par
1877                 : data(in) \{\}                                                                      \\\par
1878         {\cf18 void} fill(detail::TestCase& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}           \\\par
1879         {\cf18 void} fill(detail::TestSuite& state){\cf17  const }\{ state.DOCTEST_CAT(m_, name) = data; \}          \\\par
1880     \}\par
}
}
{\xe \v DOCTEST_DEFINE_INTERFACE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_DEFINE_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DEFINE_INTERFACE( name)\~     name::~name() = default;}}
\par
{\bkmkstart AAAAAAAAUB}
{\bkmkend AAAAAAAAUB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_DO_BINARY_EXPRESSION_COMPARISON\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_DO_BINARY_EXPRESSION_COMPARISON}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON( op,  op_str,  op_macro)}}
\par
{\bkmkstart AAAAAAAAUC}
{\bkmkend AAAAAAAAUC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    DOCTEST_NOINLINE SFINAE_OP(Result,op) {\cf17 operator} op(R&& rhs) \{                                   \\\par
    {\cf18 bool} res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\\par
        if(m_at & assertType::is_false)                                                            \\\par
            res = !res;                                                                            \\\par
        if(!res || doctest::getContextOptions()->success)                                          \\\par
            {\cf19 return} Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
        {\cf19 return} Result(res);                                                                        \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1333                                                                \{                                   \\\par
1334     {\cf18 bool} res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\\par
1335         if(m_at & assertType::is_false)                                                            \\\par
1336             res = !res;                                                                            \\\par
1337         if(!res || doctest::getContextOptions()->success)                                          \\\par
1338             {\cf19 return} Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\\par
1339         {\cf19 return} Result(res);                                                                        \\\par
1340     \}\par
}
}
{\xe \v DOCTEST_EMPTY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EMPTY}}
\par
{\bkmkstart AAAAAAAAUD}
{\bkmkend AAAAAAAAUD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_EXCEPTION_EMPTY_FUNC\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_EXCEPTION_EMPTY_FUNC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_EXCEPTION_EMPTY_FUNC}}
\par
{\bkmkstart AAAAAAAAUE}
{\bkmkend AAAAAAAAUE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     [] \{ {\cf17 static_assert}({\cf17 false}, {\cf22 "Exceptions are disabled! "} \\\par
    {\cf22 "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."}); {\cf19 return} {\cf17 false}; \}()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2781                                         \{ {\cf17 static_assert}({\cf17 false}, {\cf22 "Exceptions are disabled! "} \\\par
2782     {\cf22 "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."}); {\cf19 return} {\cf17 false}; \}()\par
}
}
{\xe \v DOCTEST_FAIL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAUF}
{\bkmkend AAAAAAAAUF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAIL_CHECK\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_ADD_FAIL_CHECK_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAUG}
{\bkmkend AAAAAAAAUG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_EQ\~ {\b DOCTEST_CHECK_EQ}}}
\par
{\bkmkstart AAAAAAAAUH}
{\bkmkend AAAAAAAAUH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GE\~ {\b DOCTEST_CHECK_GE}}}
\par
{\bkmkstart AAAAAAAAUI}
{\bkmkend AAAAAAAAUI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_GT\~ {\b DOCTEST_CHECK_GT}}}
\par
{\bkmkstart AAAAAAAAUJ}
{\bkmkend AAAAAAAAUJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LE\~ {\b DOCTEST_CHECK_LE}}}
\par
{\bkmkstart AAAAAAAAUK}
{\bkmkend AAAAAAAAUK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_LT\~ {\b DOCTEST_CHECK_LT}}}
\par
{\bkmkstart AAAAAAAAUL}
{\bkmkend AAAAAAAAUL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_NE\~ {\b DOCTEST_CHECK_NE}}}
\par
{\bkmkstart AAAAAAAAUM}
{\bkmkend AAAAAAAAUM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY\~ {\b DOCTEST_CHECK_UNARY}}}
\par
{\bkmkstart AAAAAAAAUN}
{\bkmkend AAAAAAAAUN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_CHECK_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_CHECK_UNARY_FALSE\~ {\b DOCTEST_CHECK_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAUO}
{\bkmkend AAAAAAAAUO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_EQ\~ {\b DOCTEST_REQUIRE_EQ}}}
\par
{\bkmkstart AAAAAAAAUP}
{\bkmkend AAAAAAAAUP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GE\~ {\b DOCTEST_REQUIRE_GE}}}
\par
{\bkmkstart AAAAAAAAUQ}
{\bkmkend AAAAAAAAUQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_GT\~ {\b DOCTEST_REQUIRE_GT}}}
\par
{\bkmkstart AAAAAAAAUR}
{\bkmkend AAAAAAAAUR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LE\~ {\b DOCTEST_REQUIRE_LE}}}
\par
{\bkmkstart AAAAAAAAUS}
{\bkmkend AAAAAAAAUS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_LT\~ {\b DOCTEST_REQUIRE_LT}}}
\par
{\bkmkstart AAAAAAAAUT}
{\bkmkend AAAAAAAAUT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_NE\~ {\b DOCTEST_REQUIRE_NE}}}
\par
{\bkmkstart AAAAAAAAUU}
{\bkmkend AAAAAAAAUU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY\~ {\b DOCTEST_REQUIRE_UNARY}}}
\par
{\bkmkstart AAAAAAAAUV}
{\bkmkend AAAAAAAAUV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_REQUIRE_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAUW}
{\bkmkend AAAAAAAAUW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_EQ\~ {\b DOCTEST_WARN_EQ}}}
\par
{\bkmkstart AAAAAAAAUX}
{\bkmkend AAAAAAAAUX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GE\~ {\b DOCTEST_WARN_GE}}}
\par
{\bkmkstart AAAAAAAAUY}
{\bkmkend AAAAAAAAUY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_GT\~ {\b DOCTEST_WARN_GT}}}
\par
{\bkmkstart AAAAAAAAUZ}
{\bkmkend AAAAAAAAUZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LE\~ {\b DOCTEST_WARN_LE}}}
\par
{\bkmkstart AAAAAAAAVA}
{\bkmkend AAAAAAAAVA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_LT\~ {\b DOCTEST_WARN_LT}}}
\par
{\bkmkstart AAAAAAAAVB}
{\bkmkend AAAAAAAAVB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_NE\~ {\b DOCTEST_WARN_NE}}}
\par
{\bkmkstart AAAAAAAAVC}
{\bkmkend AAAAAAAAVC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY\~ {\b DOCTEST_WARN_UNARY}}}
\par
{\bkmkstart AAAAAAAAVD}
{\bkmkend AAAAAAAAVD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FAST_WARN_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FAST_WARN_UNARY_FALSE\~ {\b DOCTEST_WARN_UNARY_FALSE}}}
\par
{\bkmkstart AAAAAAAAVE}
{\bkmkend AAAAAAAAVE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FORBIT_EXPRESSION\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FORBIT_EXPRESSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FORBIT_EXPRESSION( rt,  op)}}
\par
{\bkmkstart AAAAAAAAVF}
{\bkmkend AAAAAAAAVF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} R>                                                                          \\\par
    rt& {\cf17 operator} op({\cf17 const} R&) \{                                                                    \\\par
        static_assert(deferred_false<R>::value,                                                    \\\par
                      {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
        {\cf19 return} *{\cf17 this};                                                                              \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1347                               \{                                                                    \\\par
1348         static_assert(deferred_false<R>::value,                                                    \\\par
1349                       {\cf22 "Expression Too Complex Please Rewrite As Binary Comparison!"});              \\\par
1350         {\cf19 return} *{\cf17 this};                                                                              \\\par
1351     \}\par
}
}
{\xe \v DOCTEST_FUNC_EMPTY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FUNC_EMPTY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_EMPTY\~ (void)0}}
\par
{\bkmkstart AAAAAAAAVG}
{\bkmkend AAAAAAAAVG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_BEGIN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FUNC_SCOPE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_BEGIN\~ do}}
\par
{\bkmkstart AAAAAAAAVH}
{\bkmkend AAAAAAAAVH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_END\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FUNC_SCOPE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_END\~ while(false)}}
\par
{\bkmkstart AAAAAAAAVI}
{\bkmkend AAAAAAAAVI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_FUNC_SCOPE_RET\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_FUNC_SCOPE_RET}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_FUNC_SCOPE_RET( v)\~ (void)0}}
\par
{\bkmkstart AAAAAAAAVJ}
{\bkmkend AAAAAAAAVJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GCC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC\~ 0}}
\par
{\bkmkstart AAAAAAAAVK}
{\bkmkend AAAAAAAAVK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GCC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAVL}
{\bkmkend AAAAAAAAVL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_POP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GCC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAVM}
{\bkmkend AAAAAAAAVM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GCC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAVN}
{\bkmkend AAAAAAAAVN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAVO}
{\bkmkend AAAAAAAAVO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GIVEN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GIVEN( name)\~ {\b DOCTEST_SUBCASE}("   Given: " name)}}
\par
{\bkmkstart AAAAAAAAVP}
{\bkmkend AAAAAAAAVP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_GLOBAL_NO_WARNINGS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_GLOBAL_NO_WARNINGS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_GLOBAL_NO_WARNINGS( var,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAVQ}
{\bkmkend AAAAAAAAVQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wglobal-constructors"})                                \\\par
    {\cf17 static} {\cf17 const} {\cf18 int} var = doctest::detail::consume(&var, __VA_ARGS__);                              \\\par
    DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_IMPLEMENT_FIXTURE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_IMPLEMENT_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_IMPLEMENT_FIXTURE( der,  base,  func,  decorators)}}
\par
{\bkmkstart AAAAAAAAVR}
{\bkmkend AAAAAAAAVR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 struct }der : {\cf17 public} base                                                                   \\\par
        \{                                                                                          \\\par
            {\cf18 void} f();                                                                              \\\par
        \};                                                                                         \\\par
        {\cf17 static} {\cf17 inline} DOCTEST_NOINLINE {\cf18 void} func() \{                                               \\\par
            der v;                                                                                 \\\par
            v.f();                                                                                 \\\par
        \}                                                                                          \\\par
        DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\\par
    \}                                                                                              \\\par
    {\cf17 inline} DOCTEST_NOINLINE {\cf18 void} der::f()\par
}
}
{\xe \v DOCTEST_INFO\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO(  {\i ...})}}
\par
{\bkmkstart AAAAAAAAVS}
{\bkmkend AAAAAAAAVS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\\par
                      DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\\par
                      __VA_ARGS__)\par
}
}
{\xe \v DOCTEST_INFO_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_INFO_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INFO_IMPL( mb_name,  s_name,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAVT}
{\bkmkend AAAAAAAAVT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 auto} DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\\par
        [&](std::ostream* s_name) \{                                                                \\\par
        doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
        mb_name.m_stream = s_name;                                                                 \\\par
        mb_name * __VA_ARGS__;                                                                     \\\par
    \})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2310                                 \{                                                                \\\par
2311         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\\par
2312         mb_name.m_stream = s_name;                                                                 \\\par
2313         mb_name * __VA_ARGS__;                                                                     \\\par
2314     \})\par
}
}
{\xe \v DOCTEST_INTERFACE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_INTERFACE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE}}
\par
{\bkmkstart AAAAAAAAVU}
{\bkmkend AAAAAAAAVU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DECL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_INTERFACE_DECL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DECL\~ {\b DOCTEST_INTERFACE}}}
\par
{\bkmkstart AAAAAAAAVV}
{\bkmkend AAAAAAAAVV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_INTERFACE_DEF\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_INTERFACE_DEF}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_INTERFACE_DEF}}
\par
{\bkmkstart AAAAAAAAVW}
{\bkmkend AAAAAAAAVW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN}}
\par
{\bkmkstart AAAAAAAAVX}
{\bkmkend AAAAAAAAVX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4548) {\cf20 /* before comma no effect; expected side - effect */}       \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4265) {\cf20 /* virtual functions, but destructor is not virtual */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4986) {\cf20 /* exception specification does not match previous */}      \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4350) {\cf20 /* 'member1' called instead of 'member2' */}                \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4668) {\cf20 /* not defined as a preprocessor macro */}                  \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 /* signed/unsigned mismatch */}                             \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 /* format string not a string literal */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4820) {\cf20 /* padding */}                                              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4625) {\cf20 /* copy constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4626) {\cf20 /* assignment operator was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5027) {\cf20 /* move assignment operator implicitly deleted */}          \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5026) {\cf20 /* move constructor was implicitly deleted */}              \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 /* default constructor was implicitly deleted */}           \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 /* pointer to pot. throwing function passed to extern C */} \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5045) {\cf20 /* Spectre mitigation for memory load */}                   \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(5105) {\cf20 /* macro producing 'defined' has undefined behavior */}     \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING(4738) {\cf20 /* storing float result in memory, loss of performance */}\par
}
}
{\xe \v DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\~ {\b DOCTEST_MSVC_SUPPRESS_WARNING_POP}}}
\par
{\bkmkstart AAAAAAAAVY}
{\bkmkend AAAAAAAAVY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MESSAGE(  {\i ...})\~ {\b DOCTEST_ADD_MESSAGE_AT}(__FILE__, __LINE__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAVZ}
{\bkmkend AAAAAAAAVZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MSVC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC\~ 0}}
\par
{\bkmkstart AAAAAAAAWA}
{\bkmkend AAAAAAAAWA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MSVC_SUPPRESS_WARNING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING( w)}}
\par
{\bkmkstart AAAAAAAAWB}
{\bkmkend AAAAAAAAWB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_POP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MSVC_SUPPRESS_WARNING_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_POP}}
\par
{\bkmkstart AAAAAAAAWC}
{\bkmkend AAAAAAAAWC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}}
\par
{\bkmkstart AAAAAAAAWD}
{\bkmkend AAAAAAAAWD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH( w)}}
\par
{\bkmkstart AAAAAAAAWE}
{\bkmkend AAAAAAAAWE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOEXCEPT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_NOEXCEPT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOEXCEPT\~ noexcept}}
\par
{\bkmkstart AAAAAAAAWF}
{\bkmkend AAAAAAAAWF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NOINLINE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_NOINLINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NOINLINE\~ __attribute__((noinline))}}
\par
{\bkmkstart AAAAAAAAWG}
{\bkmkend AAAAAAAAWG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_NORETURN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_NORETURN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_NORETURN\~ [[noreturn]]}}
\par
{\bkmkstart AAAAAAAAWH}
{\bkmkend AAAAAAAAWH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_PLATFORM_LINUX\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_PLATFORM_LINUX}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_PLATFORM_LINUX}}
\par
{\bkmkstart AAAAAAAAWI}
{\bkmkend AAAAAAAAWI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REF_WRAP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REF_WRAP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REF_WRAP( x)\~ x&}}
\par
{\bkmkstart AAAAAAAAWJ}
{\bkmkend AAAAAAAAWJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR( signature)}}
\par
{\bkmkstart AAAAAAAAWK}
{\bkmkend AAAAAAAAWK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\\par
                                               signature)\par
}
}
{\xe \v DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL( translatorName,  signature)}}
\par
{\bkmkstart AAAAAAAAWL}
{\bkmkend AAAAAAAAWL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 inline} doctest::String translatorName(signature);                                              \\\par
    DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerExceptionTranslator(translatorName))                                  \\\par
    doctest::String translatorName(signature)\par
}
}
{\xe \v DOCTEST_REGISTER_FUNCTION\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REGISTER_FUNCTION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_FUNCTION( global_prefix,  f,  decorators)}}
\par
{\bkmkstart AAAAAAAAWM}
{\bkmkend AAAAAAAAWM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT */}    \\\par
            doctest::detail::regTest(                                                              \\\par
                    doctest::detail::TestCase(                                                     \\\par
                            f, __FILE__, __LINE__,                                                 \\\par
                            doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\\par
                    decorators))\par
}
}
{\xe \v DOCTEST_REGISTER_LISTENER\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_LISTENER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAWN}
{\bkmkend AAAAAAAAWN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 false}))                            \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_REGISTER_REPORTER\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REGISTER_REPORTER( name,  priority,  reporter)}}
\par
{\bkmkstart AAAAAAAAWO}
{\bkmkend AAAAAAAAWO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), {\cf20 /* NOLINT(cert-err58-cpp) */} \\\par
            doctest::registerReporter<reporter>(name, priority, {\cf17 true}))                             \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_RELATIONAL_OP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_RELATIONAL_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_RELATIONAL_OP( name,  op)}}
\par
{\bkmkstart AAAAAAAAWP}
{\bkmkend AAAAAAAAWP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>                                                              \\\par
    DOCTEST_COMPARISON_RETURN_TYPE name({\cf17 const} DOCTEST_REF_WRAP(L) lhs,                             \\\par
                                        {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{                           \\\par
        {\cf19 return} lhs op rhs;                                                                         \\\par
    \}\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1428                                                                        \{                           \\\par
1429         {\cf19 return} lhs op rhs;                                                                         \\\par
1430     \}\par
}
}
{\xe \v DOCTEST_REQUIRE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAWQ}
{\bkmkend AAAAAAAAWQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAWR}
{\bkmkend AAAAAAAAWR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAWS}
{\bkmkend AAAAAAAAWS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_EQ\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAWT}
{\bkmkend AAAAAAAAWT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_REQUIRE_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAWU}
{\bkmkend AAAAAAAAWU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAWV}
{\bkmkend AAAAAAAAWV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAWW}
{\bkmkend AAAAAAAAWW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_FALSE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAWX}
{\bkmkend AAAAAAAAWX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAWY}
{\bkmkend AAAAAAAAWY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAWZ}
{\bkmkend AAAAAAAAWZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXA}
{\bkmkend AAAAAAAAXA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_GT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXB}
{\bkmkend AAAAAAAAXB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXC}
{\bkmkend AAAAAAAAXC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXD}
{\bkmkend AAAAAAAAXD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXE}
{\bkmkend AAAAAAAAXE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_LT\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXF}
{\bkmkend AAAAAAAAXF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_REQUIRE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAXG}
{\bkmkend AAAAAAAAXG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_MESSAGE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXH}
{\bkmkend AAAAAAAAXH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_REQUIRE_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXI}
{\bkmkend AAAAAAAAXI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXJ}
{\bkmkend AAAAAAAAXJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXK}
{\bkmkend AAAAAAAAXK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXL}
{\bkmkend AAAAAAAAXL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXM}
{\bkmkend AAAAAAAAXM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXN}
{\bkmkend AAAAAAAAXN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXO}
{\bkmkend AAAAAAAAXO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXP}
{\bkmkend AAAAAAAAXP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXQ}
{\bkmkend AAAAAAAAXQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXR}
{\bkmkend AAAAAAAAXR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXS}
{\bkmkend AAAAAAAAXS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXT}
{\bkmkend AAAAAAAAXT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXU}
{\bkmkend AAAAAAAAXU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXV}
{\bkmkend AAAAAAAAXV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAXW}
{\bkmkend AAAAAAAAXW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_REQUIRE_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_REQUIRE_UNARY_FALSE\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAXX}
{\bkmkend AAAAAAAAXX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO( name)\~ {\b DOCTEST_TEST_CASE}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAXY}
{\bkmkend AAAAAAAAXY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_CLASS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}("  Scenario: " name)}}
\par
{\bkmkstart AAAAAAAAXZ}
{\bkmkend AAAAAAAAXZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}("  Scenario: " name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAYA}
{\bkmkend AAAAAAAAYA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SCENARIO_TEMPLATE_DEFINE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}("  Scenario: " name, T, id)}}
\par
{\bkmkstart AAAAAAAAYB}
{\bkmkend AAAAAAAAYB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SINGLE_HEADER\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SINGLE_HEADER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SINGLE_HEADER}}
\par
{\bkmkstart AAAAAAAAYC}
{\bkmkend AAAAAAAAYC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_STRINGIFY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_STRINGIFY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_STRINGIFY(  {\i ...})\~ toString(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAYD}
{\bkmkend AAAAAAAAYD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SUBCASE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUBCASE( name)}}
\par
{\bkmkstart AAAAAAAAYE}
{\bkmkend AAAAAAAAYE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf19 if}({\cf17 const} doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\\par
               doctest::detail::Subcase(name, __FILE__, __LINE__))\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP}}
\par
{\bkmkstart AAAAAAAAYF}
{\bkmkend AAAAAAAAYF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\\par
    DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\\par
    DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
}
}
{\xe \v DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH}}
\par
{\bkmkstart AAAAAAAAYG}
{\bkmkend AAAAAAAAYG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_EXPORT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SYMBOL_EXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_EXPORT\~ __attribute__((visibility("default")))}}
\par
{\bkmkstart AAAAAAAAYH}
{\bkmkend AAAAAAAAYH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_SYMBOL_IMPORT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_SYMBOL_IMPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_SYMBOL_IMPORT}}
\par
{\bkmkstart AAAAAAAAYI}
{\bkmkend AAAAAAAAYI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE( decorators)\~     {\b DOCTEST_CREATE_AND_REGISTER_FUNCTION}({\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_FUNC_), decorators)}}
\par
{\bkmkstart AAAAAAAAYJ}
{\bkmkend AAAAAAAAYJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_CLASS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_CLASS(  {\i ...})\~     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}}
\par
{\bkmkstart AAAAAAAAYK}
{\bkmkend AAAAAAAAYK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_FIXTURE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_FIXTURE( c,  decorators)}}
\par
{\bkmkstart AAAAAAAAYL}
{\bkmkend AAAAAAAAYL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\\par
                              DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE( dec,  T,   {\i ...})\~     {\b DOCTEST_TEST_CASE_TEMPLATE_IMPL}(dec, T, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_TMP_), __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAYM}
{\bkmkend AAAAAAAAYM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_APPLY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAYN}
{\bkmkend AAAAAAAAYN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE( dec,  T,  id)}}
\par
{\bkmkstart AAAAAAAAYO}
{\bkmkend AAAAAAAAYO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT({\cf18 id}, ITERATOR),                      \\\par
                                           DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL( dec,  T,  iter,  func)}}
\par
{\bkmkstart AAAAAAAAYP}
{\bkmkend AAAAAAAAYP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func();                                                                            \\\par
    {\cf17 namespace }\{ {\cf20 /* NOLINT */}                                                                       \\\par
        {\cf17 template} <{\cf17 typename} Tuple>                                                                  \\\par
        {\cf17 struct }iter;                                                                               \\\par
        {\cf17 template} <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
        {\cf17 struct }iter<std::tuple<Type, Rest...>>                                                     \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
                doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
                                            doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
                                            doctest::toString<Type>(),                             \\\par
                                            {\cf18 int}(line) * 1000 + index)                              \\\par
                                         * dec);                                                   \\\par
                iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
            \}                                                                                      \\\par
        \};                                                                                         \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 struct }iter<std::tuple<>>                                                                  \\\par
        \{                                                                                          \\\par
            iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
        \};                                                                                         \\\par
    \}                                                                                              \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} func()\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2185               \{ {\cf20 /* NOLINT */}                                                                       \\\par
2186         {\cf17 template} <{\cf17 typename} Tuple>                                                                  \\\par
2187         {\cf17 struct }iter;                                                                               \\\par
2188         {\cf17 template} <{\cf17 typename} Type, {\cf17 typename}... Rest>                                                 \\\par
2189         {\cf17 struct }iter<std::tuple<Type, Rest...>>                                                     \\\par
2190         \{                                                                                          \\\par
2191             iter({\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf18 int} index) \{                                     \\\par
2192                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\\par
2193                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\\par
2194                                             doctest::toString<Type>(),                             \\\par
2195                                             {\cf18 int}(line) * 1000 + index)                              \\\par
2196                                          * dec);                                                   \\\par
2197                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\\par
2198             \}                                                                                      \\\par
2199         \};                                                                                         \\\par
2200         {\cf17 template} <>                                                                                \\\par
2201         {\cf17 struct }iter<std::tuple<>>                                                                  \\\par
2202         \{                                                                                          \\\par
2203             iter({\cf17 const} {\cf18 char}*, {\cf18 unsigned}, {\cf18 int}) \{\}                                                    \\\par
2204         \};                                                                                         \\\par
2205     \}                                                                                              \\\par
2206     {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
2207     {\cf17 static} {\cf18 void} func()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_IMPL( dec,  T,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAYQ}
{\bkmkend AAAAAAAAYQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\\par
    DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\\par
    {\cf17 template} <{\cf17 typename} T>                                                                          \\\par
    {\cf17 static} {\cf18 void} anon()\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id,__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAYR}
{\bkmkend AAAAAAAAYR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL( id,  anon,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAYS}
{\bkmkend AAAAAAAAYS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), {\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */} \\\par
        doctest::detail::instantiationHelper(                                                      \\\par
            DOCTEST_CAT({\cf18 id}, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))\par
}
}
{\xe \v DOCTEST_TEST_CASE_TEMPLATE_INVOKE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAYT}
{\bkmkend AAAAAAAAYT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL({\cf18 id}, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE( decorators)\~     {\b DOCTEST_TEST_SUITE_IMPL}(decorators, {\b DOCTEST_ANONYMOUS}(DOCTEST_ANON_SUITE_))}}
\par
{\bkmkstart AAAAAAAAYU}
{\bkmkend AAAAAAAAYU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TEST_SUITE_BEGIN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_BEGIN( decorators)}}
\par
{\bkmkstart AAAAAAAAYV}
{\bkmkend AAAAAAAAYV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_TEST_SUITE_END\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_END}}
\par
{\bkmkstart AAAAAAAAYW}
{\bkmkend AAAAAAAAYW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), {\cf20 /* NOLINT(cert-err58-cpp) */}  \\\par
            doctest::detail::setTestSuite(doctest::detail::TestSuite() * {\cf22 ""}))                      \\\par
    {\cf17 using }DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int\par
}
}
{\xe \v DOCTEST_TEST_SUITE_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TEST_SUITE_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TEST_SUITE_IMPL( decorators,  ns_name)}}
\par
{\bkmkstart AAAAAAAAYX}
{\bkmkend AAAAAAAAYX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }ns_name \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
            {\cf17 static} DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmissing-field-initializers"})             \\\par
                {\cf17 static} doctest::detail::TestSuite data\{\};                                          \\\par
                {\cf17 static} {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
                DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
                DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
                DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\\par
                if(!inited) \{                                                                      \\\par
                    data* decorators;                                                              \\\par
                    inited = {\cf17 true};                                                                 \\\par
                \}                                                                                  \\\par
                {\cf19 return} data;                                                                       \\\par
            \}                                                                                      \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    {\cf17 namespace }ns_name\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2242                       \{ {\cf17 namespace }doctest_detail_test_suite_ns \{                                   \\\par
2243             {\cf17 static} DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\\par
2244                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\\par
2245                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})                \\\par
2246                 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmissing-field-initializers"})             \\\par
2247                 {\cf17 static} doctest::detail::TestSuite data\{\};                                          \\\par
2248                 {\cf17 static} {\cf18 bool}                       inited = {\cf17 false};                                  \\\par
2249                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\\par
2250                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\\par
2251                 DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\\par
2252                 if(!inited) \{                                                                      \\\par
2253                     data* decorators;                                                              \\\par
2254                     inited = {\cf17 true};                                                                 \\\par
2255                 \}                                                                                  \\\par
2256                 {\cf19 return} data;                                                                       \\\par
2257             \}                                                                                      \\\par
2258         \}                                                                                          \\\par
2259     \}                                                                                              \\\par
2260     {\cf17 namespace }ns_name\par
}
}
{\xe \v DOCTEST_THEN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_THEN( name)\~ {\b DOCTEST_SUBCASE}("    Then: " name)}}
\par
{\bkmkstart AAAAAAAAYY}
{\bkmkend AAAAAAAAYY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TO_LVALUE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TO_LVALUE(  {\i ...})\~ __VA_ARGS__}}
\par
{\bkmkstart AAAAAAAAYZ}
{\bkmkend AAAAAAAAYZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TOSTR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR( x)\~ {\b DOCTEST_TOSTR_IMPL}(x)}}
\par
{\bkmkstart AAAAAAAAZA}
{\bkmkend AAAAAAAAZA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TOSTR_IMPL\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TOSTR_IMPL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TOSTR_IMPL( x)\~ #x}}
\par
{\bkmkstart AAAAAAAAZB}
{\bkmkend AAAAAAAAZB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(#__VA_ARGS__, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZC}
{\bkmkend AAAAAAAAZC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_TYPE_TO_STRING_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_TYPE_TO_STRING_AS( str,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAZD}
{\bkmkend AAAAAAAAZD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     {\cf17 namespace }doctest \{                                                                            \\\par
        {\cf17 template} <>                                                                                \\\par
        {\cf17 inline} String toString<__VA_ARGS__>() \{                                                    \\\par
            {\cf19 return} str;                                                                            \\\par
        \}                                                                                          \\\par
    \}                                                                                              \\\par
    static_assert({\cf17 true}, {\cf22 ""})\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2172                       \{                                                                            \\\par
2173         {\cf17 template} <>                                                                                \\\par
2174         {\cf17 inline} String toString<__VA_ARGS__>() \{                                                    \\\par
2175             {\cf19 return} str;                                                                            \\\par
2176         \}                                                                                          \\\par
2177     \}                                                                                              \\\par
2178     static_assert({\cf17 true}, {\cf22 ""})\par
}
}
{\xe \v DOCTEST_UNARY_ASSERT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_UNARY_ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNARY_ASSERT( assert_type,   {\i ...})}}
\par
{\bkmkstart AAAAAAAAZE}
{\bkmkend AAAAAAAAZE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\\par
        doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
                                                   __LINE__, #__VA_ARGS__);                        \\\par
        DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\\par
        DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
    \} DOCTEST_FUNC_SCOPE_END\par
}
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 2368                              \{                                                                     \\\par
2369         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\\par
2370                                                    __LINE__, #__VA_ARGS__);                        \\\par
2371         DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\\par
2372         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\\par
2373     \} DOCTEST_FUNC_SCOPE_END\par
}
}
{\xe \v DOCTEST_UNUSED\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_UNUSED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_UNUSED\~ __attribute__((unused))}}
\par
{\bkmkstart AAAAAAAAZF}
{\bkmkend AAAAAAAAZF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION\~     ({\b DOCTEST_VERSION_MAJOR} * 10000 + {\b DOCTEST_VERSION_MINOR} * 100 + {\b DOCTEST_VERSION_PATCH})}}
\par
{\bkmkstart AAAAAAAAZG}
{\bkmkend AAAAAAAAZG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MAJOR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_VERSION_MAJOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MAJOR\~ 2}}
\par
{\bkmkstart AAAAAAAAZH}
{\bkmkend AAAAAAAAZH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_MINOR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_VERSION_MINOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_MINOR\~ 4}}
\par
{\bkmkstart AAAAAAAAZI}
{\bkmkend AAAAAAAAZI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_PATCH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_VERSION_PATCH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_PATCH\~ 9}}
\par
{\bkmkstart AAAAAAAAZJ}
{\bkmkend AAAAAAAAZJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_VERSION_STR\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_VERSION_STR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_VERSION_STR}}
\par
{\bkmkstart AAAAAAAAZK}
{\bkmkend AAAAAAAAZK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Valor:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) {\cf22 "."}                                                       \\\par
    DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)\par
}
}
{\xe \v DOCTEST_WARN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZL}
{\bkmkend AAAAAAAAZL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_EQ, eq, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZM}
{\bkmkend AAAAAAAAZM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE(  {\i ...})\~ {\b DOCTEST_ASSERT_IMPLEMENT_1}(DT_WARN_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZN}
{\bkmkend AAAAAAAAZN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN_FALSE, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAZO}
{\bkmkend AAAAAAAAZO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GE, ge, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZP}
{\bkmkend AAAAAAAAZP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_GT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_GT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_GT, gt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZQ}
{\bkmkend AAAAAAAAZQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LE, le, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZR}
{\bkmkend AAAAAAAAZR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_LT\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_LT(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_LT, lt, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZS}
{\bkmkend AAAAAAAAZS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_FUNC_SCOPE_BEGIN} \{ {\b DOCTEST_INFO}(__VA_ARGS__); {\b DOCTEST_ASSERT_IMPLEMENT_2}(DT_WARN, cond); \} {\b DOCTEST_FUNC_SCOPE_END}}}
\par
{\bkmkstart AAAAAAAAZT}
{\bkmkend AAAAAAAAZT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NE(  {\i ...})\~ {\b DOCTEST_BINARY_ASSERT}(DT_WARN_NE, ne, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAZU}
{\bkmkend AAAAAAAAZU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAZV}
{\bkmkend AAAAAAAAZV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAZW}
{\bkmkend AAAAAAAAZW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS(  {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAZX}
{\bkmkend AAAAAAAAZX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAZY}
{\bkmkend AAAAAAAAZY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAAAZZ}
{\bkmkend AAAAAAAAZZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAABAA}
{\bkmkend AAAAAAABAA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAABAB}
{\bkmkend AAAAAAABAB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAABAC}
{\bkmkend AAAAAAABAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAABAD}
{\bkmkend AAAAAAABAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_EXCEPTION_EMPTY_FUNC}}}
\par
{\bkmkstart AAAAAAABAE}
{\bkmkend AAAAAAABAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAF}
{\bkmkend AAAAAAABAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WARN_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_UNARY_ASSERT}(DT_WARN_UNARY_FALSE, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAG}
{\bkmkend AAAAAAABAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WHEN\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WHEN( name)\~ {\b DOCTEST_SUBCASE}("    When: " name)}}
\par
{\bkmkstart AAAAAAABAH}
{\bkmkend AAAAAAABAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v DOCTEST_WRAP_IN_TRY\:doctest.hpp}
{\xe \v doctest.hpp\:DOCTEST_WRAP_IN_TRY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define DOCTEST_WRAP_IN_TRY( x)\~ x;}}
\par
{\bkmkstart AAAAAAABAI}
{\bkmkend AAAAAAABAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL\:doctest.hpp}
{\xe \v doctest.hpp\:FAIL}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL(  {\i ...})\~ {\b DOCTEST_FAIL}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAJ}
{\bkmkend AAAAAAABAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAIL_CHECK\:doctest.hpp}
{\xe \v doctest.hpp\:FAIL_CHECK}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAIL_CHECK(  {\i ...})\~ {\b DOCTEST_FAIL_CHECK}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAK}
{\bkmkend AAAAAAABAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_EQ(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAL}
{\bkmkend AAAAAAABAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAM}
{\bkmkend AAAAAAABAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_GT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_GT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAN}
{\bkmkend AAAAAAABAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAO}
{\bkmkend AAAAAAABAO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_LT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_LT(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAP}
{\bkmkend AAAAAAABAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_NE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_NE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAQ}
{\bkmkend AAAAAAABAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAR}
{\bkmkend AAAAAAABAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_CHECK_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_CHECK_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_CHECK_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_CHECK_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAS}
{\bkmkend AAAAAAABAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAT}
{\bkmkend AAAAAAABAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAU}
{\bkmkend AAAAAAABAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_GT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAV}
{\bkmkend AAAAAAABAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAW}
{\bkmkend AAAAAAABAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_LT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAX}
{\bkmkend AAAAAAABAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_NE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAY}
{\bkmkend AAAAAAABAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABAZ}
{\bkmkend AAAAAAABAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_REQUIRE_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBA}
{\bkmkend AAAAAAABBA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_EQ(  {\i ...})\~ {\b DOCTEST_FAST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBB}
{\bkmkend AAAAAAABBB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBC}
{\bkmkend AAAAAAABBC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_GT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_GT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBD}
{\bkmkend AAAAAAABBD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBE}
{\bkmkend AAAAAAABBE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_LT\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_LT(  {\i ...})\~ {\b DOCTEST_FAST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBF}
{\bkmkend AAAAAAABBF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_NE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_NE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBG}
{\bkmkend AAAAAAABBG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBH}
{\bkmkend AAAAAAABBH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FAST_WARN_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:FAST_WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FAST_WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_FAST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBI}
{\bkmkend AAAAAAABBI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v GIVEN\:doctest.hpp}
{\xe \v doctest.hpp\:GIVEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define GIVEN( name)\~ {\b DOCTEST_GIVEN}(name)}}
\par
{\bkmkstart AAAAAAABBJ}
{\bkmkend AAAAAAABBJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v INFO\:doctest.hpp}
{\xe \v doctest.hpp\:INFO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define INFO(  {\i ...})\~ {\b DOCTEST_INFO}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBK}
{\bkmkend AAAAAAABBK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MESSAGE(  {\i ...})\~ {\b DOCTEST_MESSAGE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBL}
{\bkmkend AAAAAAABBL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_EXCEPTION_TRANSLATOR\:doctest.hpp}
{\xe \v doctest.hpp\:REGISTER_EXCEPTION_TRANSLATOR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_EXCEPTION_TRANSLATOR( signature)\~ {\b DOCTEST_REGISTER_EXCEPTION_TRANSLATOR}(signature)}}
\par
{\bkmkstart AAAAAAABBM}
{\bkmkend AAAAAAABBM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_LISTENER\:doctest.hpp}
{\xe \v doctest.hpp\:REGISTER_LISTENER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_LISTENER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_LISTENER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAABBN}
{\bkmkend AAAAAAABBN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REGISTER_REPORTER\:doctest.hpp}
{\xe \v doctest.hpp\:REGISTER_REPORTER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REGISTER_REPORTER( name,  priority,  reporter)\~ {\b DOCTEST_REGISTER_REPORTER}(name, priority, reporter)}}
\par
{\bkmkstart AAAAAAABBO}
{\bkmkend AAAAAAABBO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE(  {\i ...})\~ {\b DOCTEST_REQUIRE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBP}
{\bkmkend AAAAAAABBP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_EQ(  {\i ...})\~ {\b DOCTEST_REQUIRE_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBQ}
{\bkmkend AAAAAAABBQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBR}
{\bkmkend AAAAAAABBR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBS}
{\bkmkend AAAAAAABBS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GE(  {\i ...})\~ {\b DOCTEST_REQUIRE_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBT}
{\bkmkend AAAAAAABBT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_GT\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_GT(  {\i ...})\~ {\b DOCTEST_REQUIRE_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBU}
{\bkmkend AAAAAAABBU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LE(  {\i ...})\~ {\b DOCTEST_REQUIRE_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBV}
{\bkmkend AAAAAAABBV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_LT\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_LT(  {\i ...})\~ {\b DOCTEST_REQUIRE_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBW}
{\bkmkend AAAAAAABBW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_REQUIRE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBX}
{\bkmkend AAAAAAABBX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NE(  {\i ...})\~ {\b DOCTEST_REQUIRE_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBY}
{\bkmkend AAAAAAABBY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW(  {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABBZ}
{\bkmkend AAAAAAABBZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCA}
{\bkmkend AAAAAAABCA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS(  {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCB}
{\bkmkend AAAAAAABCB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCC}
{\bkmkend AAAAAAABCC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCD}
{\bkmkend AAAAAAABCD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCE}
{\bkmkend AAAAAAABCE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCF}
{\bkmkend AAAAAAABCF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCG}
{\bkmkend AAAAAAABCG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCH}
{\bkmkend AAAAAAABCH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_REQUIRE_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCI}
{\bkmkend AAAAAAABCI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCJ}
{\bkmkend AAAAAAABCJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v REQUIRE_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:REQUIRE_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define REQUIRE_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_REQUIRE_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCK}
{\bkmkend AAAAAAABCK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO\:doctest.hpp}
{\xe \v doctest.hpp\:SCENARIO}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO( name)\~ {\b DOCTEST_SCENARIO}(name)}}
\par
{\bkmkstart AAAAAAABCL}
{\bkmkend AAAAAAABCL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_CLASS\:doctest.hpp}
{\xe \v doctest.hpp\:SCENARIO_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_CLASS( name)\~ {\b DOCTEST_SCENARIO_CLASS}(name)}}
\par
{\bkmkstart AAAAAAABCM}
{\bkmkend AAAAAAABCM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE\:doctest.hpp}
{\xe \v doctest.hpp\:SCENARIO_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_SCENARIO_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCN}
{\bkmkend AAAAAAABCN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SCENARIO_TEMPLATE_DEFINE\:doctest.hpp}
{\xe \v doctest.hpp\:SCENARIO_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SCENARIO_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_SCENARIO_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAABCO}
{\bkmkend AAAAAAABCO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SFINAE_OP\:doctest.hpp}
{\xe \v doctest.hpp\:SFINAE_OP}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SFINAE_OP( ret,  op)\~ decltype((void)({\b doctest::detail::declval}<L>() op {\b doctest::detail::declval}<R>()),ret\{\})}}
\par
{\bkmkstart AAAAAAABCP}
{\bkmkend AAAAAAABCP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v SUBCASE\:doctest.hpp}
{\xe \v doctest.hpp\:SUBCASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define SUBCASE( name)\~ {\b DOCTEST_SUBCASE}(name)}}
\par
{\bkmkstart AAAAAAABCQ}
{\bkmkend AAAAAAABCQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE( name)\~ {\b DOCTEST_TEST_CASE}(name)}}
\par
{\bkmkstart AAAAAAABCR}
{\bkmkend AAAAAAABCR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_CLASS\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_CLASS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_CLASS( name)\~ {\b DOCTEST_TEST_CASE_CLASS}(name)}}
\par
{\bkmkstart AAAAAAABCS}
{\bkmkend AAAAAAABCS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_FIXTURE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_FIXTURE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_FIXTURE( x,  name)\~ {\b DOCTEST_TEST_CASE_FIXTURE}(x, name)}}
\par
{\bkmkstart AAAAAAABCT}
{\bkmkend AAAAAAABCT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_TEMPLATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE( name,  T,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE}(name, T, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCU}
{\bkmkend AAAAAAABCU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_APPLY\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_TEMPLATE_APPLY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_APPLY( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_APPLY}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCV}
{\bkmkend AAAAAAABCV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_DEFINE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_TEMPLATE_DEFINE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_DEFINE( name,  T,  id)\~ {\b DOCTEST_TEST_CASE_TEMPLATE_DEFINE}(name, T, id)}}
\par
{\bkmkstart AAAAAAABCW}
{\bkmkend AAAAAAABCW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INSTANTIATE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_TEMPLATE_INSTANTIATE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INSTANTIATE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCX}
{\bkmkend AAAAAAABCX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_CASE_TEMPLATE_INVOKE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_CASE_TEMPLATE_INVOKE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_CASE_TEMPLATE_INVOKE( id,   {\i ...})\~ {\b DOCTEST_TEST_CASE_TEMPLATE_INVOKE}(id, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABCY}
{\bkmkend AAAAAAABCY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_SUITE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE( decorators)\~ {\b DOCTEST_TEST_SUITE}(decorators)}}
\par
{\bkmkstart AAAAAAABCZ}
{\bkmkend AAAAAAABCZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_BEGIN\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_SUITE_BEGIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_BEGIN( name)\~ {\b DOCTEST_TEST_SUITE_BEGIN}(name)}}
\par
{\bkmkstart AAAAAAABDA}
{\bkmkend AAAAAAABDA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TEST_SUITE_END\:doctest.hpp}
{\xe \v doctest.hpp\:TEST_SUITE_END}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TEST_SUITE_END\~ {\b DOCTEST_TEST_SUITE_END}}}
\par
{\bkmkstart AAAAAAABDB}
{\bkmkend AAAAAAABDB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v THEN\:doctest.hpp}
{\xe \v doctest.hpp\:THEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define THEN( name)\~ {\b DOCTEST_THEN}(name)}}
\par
{\bkmkstart AAAAAAABDC}
{\bkmkend AAAAAAABDC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TO_LVALUE\:doctest.hpp}
{\xe \v doctest.hpp\:TO_LVALUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TO_LVALUE(  {\i ...})\~ {\b DOCTEST_TO_LVALUE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDD}
{\bkmkend AAAAAAABDD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING\:doctest.hpp}
{\xe \v doctest.hpp\:TYPE_TO_STRING}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING(  {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDE}
{\bkmkend AAAAAAABDE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TYPE_TO_STRING_AS\:doctest.hpp}
{\xe \v doctest.hpp\:TYPE_TO_STRING_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TYPE_TO_STRING_AS( str,   {\i ...})\~ {\b DOCTEST_TYPE_TO_STRING_AS}(str, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDF}
{\bkmkend AAAAAAABDF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN\:doctest.hpp}
{\xe \v doctest.hpp\:WARN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN(  {\i ...})\~ {\b DOCTEST_WARN}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDG}
{\bkmkend AAAAAAABDG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_EQ\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_EQ}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_EQ(  {\i ...})\~ {\b DOCTEST_WARN_EQ}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDH}
{\bkmkend AAAAAAABDH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDI}
{\bkmkend AAAAAAABDI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_FALSE_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_FALSE_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_FALSE_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_FALSE_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDJ}
{\bkmkend AAAAAAABDJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_GE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GE(  {\i ...})\~ {\b DOCTEST_WARN_GE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDK}
{\bkmkend AAAAAAABDK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_GT\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_GT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_GT(  {\i ...})\~ {\b DOCTEST_WARN_GT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDL}
{\bkmkend AAAAAAABDL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_LE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LE(  {\i ...})\~ {\b DOCTEST_WARN_LE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDM}
{\bkmkend AAAAAAABDM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_LT\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_LT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_LT(  {\i ...})\~ {\b DOCTEST_WARN_LT}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDN}
{\bkmkend AAAAAAABDN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_MESSAGE( cond,   {\i ...})\~ {\b DOCTEST_WARN_MESSAGE}(cond, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDO}
{\bkmkend AAAAAAABDO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_NE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NE(  {\i ...})\~ {\b DOCTEST_WARN_NE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDP}
{\bkmkend AAAAAAABDP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_NOTHROW}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW(  {\i ...})\~ {\b DOCTEST_WARN_NOTHROW}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDQ}
{\bkmkend AAAAAAABDQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_NOTHROW_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_NOTHROW_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_NOTHROW_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_NOTHROW_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDR}
{\bkmkend AAAAAAABDR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS(  {\i ...})\~ {\b DOCTEST_WARN_THROWS}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDS}
{\bkmkend AAAAAAABDS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDT}
{\bkmkend AAAAAAABDT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_AS_MESSAGE( expr,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_AS_MESSAGE}(expr, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDU}
{\bkmkend AAAAAAABDU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_MESSAGE( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_MESSAGE}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDV}
{\bkmkend AAAAAAABDV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_WITH}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH( expr,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH}(expr, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDW}
{\bkmkend AAAAAAABDW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_WITH_AS}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDX}
{\bkmkend AAAAAAABDX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_AS_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_WITH_AS_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_AS_MESSAGE( expr,  with,  ex,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_AS_MESSAGE}(expr, with, ex, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDY}
{\bkmkend AAAAAAABDY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_THROWS_WITH_MESSAGE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_THROWS_WITH_MESSAGE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_THROWS_WITH_MESSAGE( expr,  with,   {\i ...})\~ {\b DOCTEST_WARN_THROWS_WITH_MESSAGE}(expr, with, __VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABDZ}
{\bkmkend AAAAAAABDZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_UNARY}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY(  {\i ...})\~ {\b DOCTEST_WARN_UNARY}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABEA}
{\bkmkend AAAAAAABEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WARN_UNARY_FALSE\:doctest.hpp}
{\xe \v doctest.hpp\:WARN_UNARY_FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WARN_UNARY_FALSE(  {\i ...})\~ {\b DOCTEST_WARN_UNARY_FALSE}(__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAABEB}
{\bkmkend AAAAAAABEB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v WHEN\:doctest.hpp}
{\xe \v doctest.hpp\:WHEN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define WHEN( name)\~ {\b DOCTEST_WHEN}(name)}}
\par
{\bkmkstart AAAAAAABEC}
{\bkmkend AAAAAAABEC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doctest.hpp\par \pard\plain 
{\tc\tcl2 \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/doctest.hpp}
{\xe \v D:/Leticia/ufmg/2sem/cpp/TP/ProjetoFinal/tests/doctest.hpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 // ====================================================================== lgtm [cpp/missing-header-guard]}\par
2 {\cf20 // == DO NOT MODIFY THIS FILE BY HAND - IT IS AUTO GENERATED BY CMAKE! ==}\par
3 {\cf20 // ======================================================================}\par
4 {\cf20 //}\par
5 {\cf20 // doctest.h - the lightest feature-rich C++ single-header testing framework for unit tests and TDD}\par
6 {\cf20 //}\par
7 {\cf20 // Copyright (c) 2016-2021 Viktor Kirilov}\par
8 {\cf20 //}\par
9 {\cf20 // Distributed under the MIT Software License}\par
10 {\cf20 // See accompanying file LICENSE.txt or copy at}\par
11 {\cf20 // https://opensource.org/licenses/MIT}\par
12 {\cf20 //}\par
13 {\cf20 // The documentation can be found at the library's page:}\par
14 {\cf20 // https://github.com/doctest/doctest/blob/master/doc/markdown/readme.md}\par
15 {\cf20 //}\par
16 {\cf20 // =================================================================================================}\par
17 {\cf20 // =================================================================================================}\par
18 {\cf20 // =================================================================================================}\par
19 {\cf20 //}\par
20 {\cf20 // The library is heavily influenced by Catch - https://github.com/catchorg/Catch2}\par
21 {\cf20 // which uses the Boost Software License - Version 1.0}\par
22 {\cf20 // see here - https://github.com/catchorg/Catch2/blob/master/LICENSE.txt}\par
23 {\cf20 //}\par
24 {\cf20 // The concept of subcases (sections in Catch) and expression decomposition are from there.}\par
25 {\cf20 // Some parts of the code are taken directly:}\par
26 {\cf20 // - stringification - the detection of "ostream& operator<<(ostream&, const T&)" and StringMaker<>}\par
27 {\cf20 // - the Approx() helper class for floating point comparison}\par
28 {\cf20 // - colors in the console}\par
29 {\cf20 // - breaking into a debugger}\par
30 {\cf20 // - signal / SEH handling}\par
31 {\cf20 // - timer}\par
32 {\cf20 // - XmlWriter class - thanks to Phil Nash for allowing the direct reuse (AKA copy/paste)}\par
33 {\cf20 //}\par
34 {\cf20 // The expression decomposing templates are taken from lest - https://github.com/martinmoene/lest}\par
35 {\cf20 // which uses the Boost Software License - Version 1.0}\par
36 {\cf20 // see here - https://github.com/martinmoene/lest/blob/master/LICENSE.txt}\par
37 {\cf20 //}\par
38 {\cf20 // =================================================================================================}\par
39 {\cf20 // =================================================================================================}\par
40 {\cf20 // =================================================================================================}\par
41 \par
42 {\cf21 #ifndef DOCTEST_LIBRARY_INCLUDED}\par
43 {\cf21 #define DOCTEST_LIBRARY_INCLUDED}\par
44 \par
45 {\cf20 // =================================================================================================}\par
46 {\cf20 // == VERSION ======================================================================================}\par
47 {\cf20 // =================================================================================================}\par
48 \par
49 {\cf21 #define DOCTEST_VERSION_MAJOR 2}\par
50 {\cf21 #define DOCTEST_VERSION_MINOR 4}\par
51 {\cf21 #define DOCTEST_VERSION_PATCH 9}\par
52 \par
53 {\cf20 // util we need here}\par
54 {\cf21 #define DOCTEST_TOSTR_IMPL(x) #x}\par
55 {\cf21 #define DOCTEST_TOSTR(x) DOCTEST_TOSTR_IMPL(x)}\par
56 \par
57 {\cf21 #define DOCTEST_VERSION_STR                                                                        \\}\par
58 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MAJOR) "."                                                       \\}\par
59 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_MINOR) "."                                                       \\}\par
60 {\cf21     DOCTEST_TOSTR(DOCTEST_VERSION_PATCH)}\par
61 \par
62 {\cf21 #define DOCTEST_VERSION                                                                            \\}\par
63 {\cf21     (DOCTEST_VERSION_MAJOR * 10000 + DOCTEST_VERSION_MINOR * 100 + DOCTEST_VERSION_PATCH)}\par
64 \par
65 {\cf20 // =================================================================================================}\par
66 {\cf20 // == COMPILER VERSION =============================================================================}\par
67 {\cf20 // =================================================================================================}\par
68 \par
69 {\cf20 // ideas for the version stuff are taken from here: https://github.com/cxxstuff/cxx_detect}\par
70 \par
71 {\cf21 #ifdef _MSC_VER}\par
72 {\cf21 #define DOCTEST_CPLUSPLUS _MSVC_LANG}\par
73 {\cf21 #else}\par
74 {\cf21 #define DOCTEST_CPLUSPLUS __cplusplus}\par
75 {\cf21 #endif}\par
76 \par
77 {\cf21 #define DOCTEST_COMPILER(MAJOR, MINOR, PATCH) ((MAJOR)*10000000 + (MINOR)*100000 + (PATCH))}\par
78 \par
79 {\cf20 // GCC/Clang and GCC/MSVC are mutually exclusive, but Clang/MSVC are not because of clang-cl...}\par
80 {\cf21 #if defined(_MSC_VER) && defined(_MSC_FULL_VER)}\par
81 {\cf21 #if _MSC_VER == _MSC_FULL_VER / 10000}\par
82 {\cf21 #define DOCTEST_MSVC DOCTEST_COMPILER(_MSC_VER / 100, _MSC_VER % 100, _MSC_FULL_VER % 10000)}\par
83 {\cf21 #else }{\cf20 // MSVC}\par
84 {\cf21 #define DOCTEST_MSVC                                                                               \\}\par
85 {\cf21     DOCTEST_COMPILER(_MSC_VER / 100, (_MSC_FULL_VER / 100000) % 100, _MSC_FULL_VER % 100000)}\par
86 {\cf21 #endif }{\cf20 // MSVC}\par
87 {\cf21 #endif }{\cf20 // MSVC}\par
88 {\cf21 #if defined(__clang__) && defined(__clang_minor__)}\par
89 {\cf21 #define DOCTEST_CLANG DOCTEST_COMPILER(__clang_major__, __clang_minor__, __clang_patchlevel__)}\par
90 {\cf21 #elif defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__) &&              \\}\par
91 {\cf21         !defined(__INTEL_COMPILER)}\par
92 {\cf21 #define DOCTEST_GCC DOCTEST_COMPILER(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)}\par
93 {\cf21 #endif }{\cf20 // GCC}\par
94 \par
95 {\cf21 #ifndef DOCTEST_MSVC}\par
96 {\cf21 #define DOCTEST_MSVC 0}\par
97 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
98 {\cf21 #ifndef DOCTEST_CLANG}\par
99 {\cf21 #define DOCTEST_CLANG 0}\par
100 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
101 {\cf21 #ifndef DOCTEST_GCC}\par
102 {\cf21 #define DOCTEST_GCC 0}\par
103 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
104 \par
105 {\cf20 // =================================================================================================}\par
106 {\cf20 // == COMPILER WARNINGS HELPERS ====================================================================}\par
107 {\cf20 // =================================================================================================}\par
108 \par
109 {\cf21 #if DOCTEST_CLANG}\par
110 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
111 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH _Pragma("clang diagnostic push")}\par
112 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(clang diagnostic ignored w)}\par
113 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP _Pragma("clang diagnostic pop")}\par
114 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)                                                \\}\par
115 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
116 {\cf21 #else }{\cf20 // DOCTEST_CLANG}\par
117 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_PUSH}\par
118 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING(w)}\par
119 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
120 {\cf21 #define DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH(w)}\par
121 {\cf21 #endif }{\cf20 // DOCTEST_CLANG}\par
122 \par
123 {\cf21 #if DOCTEST_GCC}\par
124 {\cf21 #define DOCTEST_PRAGMA_TO_STR(x) _Pragma(#x)}\par
125 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH _Pragma("GCC diagnostic push")}\par
126 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w) DOCTEST_PRAGMA_TO_STR(GCC diagnostic ignored w)}\par
127 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP _Pragma("GCC diagnostic pop")}\par
128 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)                                                  \\}\par
129 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
130 {\cf21 #else }{\cf20 // DOCTEST_GCC}\par
131 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_PUSH}\par
132 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING(w)}\par
133 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
134 {\cf21 #define DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
135 {\cf21 #endif }{\cf20 // DOCTEST_GCC}\par
136 \par
137 {\cf21 #if DOCTEST_MSVC}\par
138 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH __pragma(warning(push))}\par
139 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w) __pragma(warning(disable : w))}\par
140 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP __pragma(warning(pop))}\par
141 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)                                                 \\}\par
142 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
143 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
144 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_PUSH}\par
145 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING(w)}\par
146 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
147 {\cf21 #define DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(w)}\par
148 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
149 \par
150 {\cf20 // =================================================================================================}\par
151 {\cf20 // == COMPILER WARNINGS ============================================================================}\par
152 {\cf20 // =================================================================================================}\par
153 \par
154 {\cf20 // both the header and the implementation suppress all of these,}\par
155 {\cf20 // so it only makes sense to aggregrate them like so}\par
156 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH                                                      \\}\par
157 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH                                                            \\}\par
158 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wunknown-pragmas")                                            \\}\par
159 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wweak-vtables")                                               \\}\par
160 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wpadded")                                                     \\}\par
161 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-prototypes")                                         \\}\par
162 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat")                                               \\}\par
163 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING("-Wc++98-compat-pedantic")                                      \\}\par
164 {\cf21                                                                                                    \\}\par
165 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_PUSH                                                              \\}\par
166 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wunknown-pragmas")                                              \\}\par
167 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wpragmas")                                                      \\}\par
168 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Weffc++")                                                       \\}\par
169 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-overflow")                                              \\}\par
170 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wstrict-aliasing")                                              \\}\par
171 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-declarations")                                         \\}\par
172 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wuseless-cast")                                                 \\}\par
173 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING("-Wnoexcept")                                                     \\}\par
174 {\cf21                                                                                                    \\}\par
175 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
176 {\cf21     }{\cf20 /* these 4 also disabled globally via cmake: */}{\cf21                                                 \\}\par
177 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4514) }{\cf20 /* unreferenced inline function has been removed */}{\cf21         \\}\par
178 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4571) }{\cf20 /* SEH related */}{\cf21                                           \\}\par
179 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4710) }{\cf20 /* function not inlined */}{\cf21                                  \\}\par
180 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4711) }{\cf20 /* function selected for inline expansion*/}{\cf21                 \\}\par
181 {\cf21     }{\cf20 /* */}{\cf21                                                                                           \\}\par
182 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4616) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
183 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4619) }{\cf20 /* invalid compiler warning */}{\cf21                              \\}\par
184 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4996) }{\cf20 /* The compiler encountered a deprecated declaration */}{\cf21     \\}\par
185 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4706) }{\cf20 /* assignment within conditional expression */}{\cf21              \\}\par
186 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4512) }{\cf20 /* 'class' : assignment operator could not be generated */}{\cf21  \\}\par
187 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4127) }{\cf20 /* conditional expression is constant */}{\cf21                    \\}\par
188 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
189 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
190 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
191 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
192 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
193 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4640) }{\cf20 /* construction of local static object not thread-safe */}{\cf21   \\}\par
194 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
195 {\cf21     }{\cf20 /* static analysis */}{\cf21                                                                           \\}\par
196 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26439) }{\cf20 /* Function may not throw. Declare it 'noexcept' */}{\cf21        \\}\par
197 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26495) }{\cf20 /* Always initialize a member variable */}{\cf21                  \\}\par
198 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26451) }{\cf20 /* Arithmetic overflow ... */}{\cf21                              \\}\par
199 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26444) }{\cf20 /* Avoid unnamed objects with custom ctor and dtor... */}{\cf21   \\}\par
200 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(26812) }{\cf20 /* Prefer 'enum class' over 'enum' */}{\cf21 }\par
201 \par
202 {\cf21 #define DOCTEST_SUPPRESS_COMMON_WARNINGS_POP                                                       \\}\par
203 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                             \\}\par
204 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP                                                               \\}\par
205 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
206 \par
207 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
208 \par
209 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
210 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wnon-virtual-dtor"})\par
211 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdeprecated")\par
212 \par
213 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
214 DOCTEST_GCC_SUPPRESS_WARNING("-Wctor-dtor-privacy")\par
215 DOCTEST_GCC_SUPPRESS_WARNING("-Wnon-virtual-dtor")\par
216 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-promo")\par
217 \par
218 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
219 DOCTEST_MSVC_SUPPRESS_WARNING(4623) {\cf20 // default constructor was implicitly defined as deleted}\par
220 \par
221 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN                                 \\}\par
222 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH                                                             \\}\par
223 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4548) }{\cf20 /* before comma no effect; expected side - effect */}{\cf21        \\}\par
224 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4265) }{\cf20 /* virtual functions, but destructor is not virtual */}{\cf21      \\}\par
225 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4986) }{\cf20 /* exception specification does not match previous */}{\cf21       \\}\par
226 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4350) }{\cf20 /* 'member1' called instead of 'member2' */}{\cf21                 \\}\par
227 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4668) }{\cf20 /* not defined as a preprocessor macro */}{\cf21                   \\}\par
228 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4365) }{\cf20 /* signed/unsigned mismatch */}{\cf21                              \\}\par
229 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4774) }{\cf20 /* format string not a string literal */}{\cf21                    \\}\par
230 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4820) }{\cf20 /* padding */}{\cf21                                               \\}\par
231 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4625) }{\cf20 /* copy constructor was implicitly deleted */}{\cf21               \\}\par
232 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4626) }{\cf20 /* assignment operator was implicitly deleted */}{\cf21            \\}\par
233 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5027) }{\cf20 /* move assignment operator implicitly deleted */}{\cf21           \\}\par
234 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5026) }{\cf20 /* move constructor was implicitly deleted */}{\cf21               \\}\par
235 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4623) }{\cf20 /* default constructor was implicitly deleted */}{\cf21            \\}\par
236 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5039) }{\cf20 /* pointer to pot. throwing function passed to extern C */}{\cf21  \\}\par
237 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5045) }{\cf20 /* Spectre mitigation for memory load */}{\cf21                    \\}\par
238 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(5105) }{\cf20 /* macro producing 'defined' has undefined behavior */}{\cf21      \\}\par
239 {\cf21     DOCTEST_MSVC_SUPPRESS_WARNING(4738) }{\cf20 /* storing float result in memory, loss of performance */}{\cf21 }\par
240 \par
241 {\cf21 #define DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END DOCTEST_MSVC_SUPPRESS_WARNING_POP}\par
242 \par
243 {\cf20 // =================================================================================================}\par
244 {\cf20 // == FEATURE DETECTION ============================================================================}\par
245 {\cf20 // =================================================================================================}\par
246 \par
247 {\cf20 // general compiler feature support table: https://en.cppreference.com/w/cpp/compiler_support}\par
248 {\cf20 // MSVC C++11 feature support table: https://msdn.microsoft.com/en-us/library/hh567368.aspx}\par
249 {\cf20 // GCC C++11 feature support table: https://gcc.gnu.org/projects/cxx-status.html}\par
250 {\cf20 // MSVC version table:}\par
251 {\cf20 // https://en.wikipedia.org/wiki/Microsoft_Visual_C%2B%2B#Internal_version_numbering}\par
252 {\cf20 // MSVC++ 14.3 (17) _MSC_VER == 1930 (Visual Studio 2022)}\par
253 {\cf20 // MSVC++ 14.2 (16) _MSC_VER == 1920 (Visual Studio 2019)}\par
254 {\cf20 // MSVC++ 14.1 (15) _MSC_VER == 1910 (Visual Studio 2017)}\par
255 {\cf20 // MSVC++ 14.0      _MSC_VER == 1900 (Visual Studio 2015)}\par
256 {\cf20 // MSVC++ 12.0      _MSC_VER == 1800 (Visual Studio 2013)}\par
257 {\cf20 // MSVC++ 11.0      _MSC_VER == 1700 (Visual Studio 2012)}\par
258 {\cf20 // MSVC++ 10.0      _MSC_VER == 1600 (Visual Studio 2010)}\par
259 {\cf20 // MSVC++ 9.0       _MSC_VER == 1500 (Visual Studio 2008)}\par
260 {\cf20 // MSVC++ 8.0       _MSC_VER == 1400 (Visual Studio 2005)}\par
261 \par
262 {\cf20 // Universal Windows Platform support}\par
263 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
264 {\cf21 #define DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
265 {\cf21 #endif }{\cf20 // WINAPI_FAMILY}\par
266 {\cf21 #if DOCTEST_MSVC && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
267 {\cf21 #define DOCTEST_CONFIG_WINDOWS_SEH}\par
268 {\cf21 #endif }{\cf20 // MSVC}\par
269 {\cf21 #if defined(DOCTEST_CONFIG_NO_WINDOWS_SEH) && defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
270 {\cf21 #undef DOCTEST_CONFIG_WINDOWS_SEH}\par
271 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_WINDOWS_SEH}\par
272 \par
273 {\cf21 #if !defined(_WIN32) && !defined(__QNX__) && !defined(DOCTEST_CONFIG_POSIX_SIGNALS) &&             \\}\par
274 {\cf21         !defined(__EMSCRIPTEN__) && !defined(__wasi__)}\par
275 {\cf21 #define DOCTEST_CONFIG_POSIX_SIGNALS}\par
276 {\cf21 #endif }{\cf20 // _WIN32}\par
277 {\cf21 #if defined(DOCTEST_CONFIG_NO_POSIX_SIGNALS) && defined(DOCTEST_CONFIG_POSIX_SIGNALS)}\par
278 {\cf21 #undef DOCTEST_CONFIG_POSIX_SIGNALS}\par
279 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_POSIX_SIGNALS}\par
280 \par
281 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
282 {\cf21 #if !defined(__cpp_exceptions) && !defined(__EXCEPTIONS) && !defined(_CPPUNWIND)                   \\}\par
283 {\cf21         || defined(__wasi__)}\par
284 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
285 {\cf21 #endif }{\cf20 // no exceptions}\par
286 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
287 \par
288 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
289 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
290 {\cf21 #define DOCTEST_CONFIG_NO_EXCEPTIONS}\par
291 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
292 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
293 \par
294 {\cf21 #if defined(DOCTEST_CONFIG_NO_EXCEPTIONS) && !defined(DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS)}\par
295 {\cf21 #define DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
296 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS && !DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
297 \par
298 {\cf21 #ifdef __wasi__}\par
299 {\cf21 #define DOCTEST_CONFIG_NO_MULTITHREADING}\par
300 {\cf21 #endif}\par
301 \par
302 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN) && !defined(DOCTEST_CONFIG_IMPLEMENT)}\par
303 {\cf21 #define DOCTEST_CONFIG_IMPLEMENT}\par
304 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
305 \par
306 {\cf21 #if defined(_WIN32) || defined(__CYGWIN__)}\par
307 {\cf21 #if DOCTEST_MSVC}\par
308 {\cf21 #define DOCTEST_SYMBOL_EXPORT __declspec(dllexport)}\par
309 {\cf21 #define DOCTEST_SYMBOL_IMPORT __declspec(dllimport)}\par
310 {\cf21 #else }{\cf20 // MSVC}\par
311 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((dllexport))}\par
312 {\cf21 #define DOCTEST_SYMBOL_IMPORT __attribute__((dllimport))}\par
313 {\cf21 #endif }{\cf20 // MSVC}\par
314 {\cf21 #else  }{\cf20 // _WIN32}\par
315 {\cf21 #define DOCTEST_SYMBOL_EXPORT __attribute__((visibility("default")))}\par
316 {\cf21 #define DOCTEST_SYMBOL_IMPORT}\par
317 {\cf21 #endif }{\cf20 // _WIN32}\par
318 \par
319 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
320 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT}\par
321 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_EXPORT}\par
322 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
323 {\cf21 #define DOCTEST_INTERFACE DOCTEST_SYMBOL_IMPORT}\par
324 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
325 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
326 {\cf21 #define DOCTEST_INTERFACE}\par
327 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENTATION_IN_DLL}\par
328 \par
329 {\cf20 // needed for extern template instantiations}\par
330 {\cf20 // see https://github.com/fmtlib/fmt/issues/2228}\par
331 {\cf21 #if DOCTEST_MSVC}\par
332 {\cf21 #define DOCTEST_INTERFACE_DECL}\par
333 {\cf21 #define DOCTEST_INTERFACE_DEF DOCTEST_INTERFACE}\par
334 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
335 {\cf21 #define DOCTEST_INTERFACE_DECL DOCTEST_INTERFACE}\par
336 {\cf21 #define DOCTEST_INTERFACE_DEF}\par
337 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
338 \par
339 {\cf21 #define DOCTEST_EMPTY}\par
340 \par
341 {\cf21 #if DOCTEST_MSVC}\par
342 {\cf21 #define DOCTEST_NOINLINE __declspec(noinline)}\par
343 {\cf21 #define DOCTEST_UNUSED}\par
344 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
345 {\cf21 #elif DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 5, 0)}\par
346 {\cf21 #define DOCTEST_NOINLINE}\par
347 {\cf21 #define DOCTEST_UNUSED}\par
348 {\cf21 #define DOCTEST_ALIGNMENT(x)}\par
349 {\cf21 #else}\par
350 {\cf21 #define DOCTEST_NOINLINE __attribute__((noinline))}\par
351 {\cf21 #define DOCTEST_UNUSED __attribute__((unused))}\par
352 {\cf21 #define DOCTEST_ALIGNMENT(x) __attribute__((aligned(x)))}\par
353 {\cf21 #endif}\par
354 \par
355 {\cf21 #ifndef DOCTEST_NORETURN}\par
356 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
357 {\cf21 #define DOCTEST_NORETURN}\par
358 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
359 {\cf21 #define DOCTEST_NORETURN [[noreturn]]}\par
360 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
361 {\cf21 #endif }{\cf20 // DOCTEST_NORETURN}\par
362 \par
363 {\cf21 #ifndef DOCTEST_NOEXCEPT}\par
364 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
365 {\cf21 #define DOCTEST_NOEXCEPT}\par
366 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
367 {\cf21 #define DOCTEST_NOEXCEPT noexcept}\par
368 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
369 {\cf21 #endif }{\cf20 // DOCTEST_NOEXCEPT}\par
370 \par
371 {\cf21 #ifndef DOCTEST_CONSTEXPR}\par
372 {\cf21 #if DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
373 {\cf21 #define DOCTEST_CONSTEXPR const}\par
374 {\cf21 #define DOCTEST_CONSTEXPR_FUNC inline}\par
375 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
376 {\cf21 #define DOCTEST_CONSTEXPR constexpr}\par
377 {\cf21 #define DOCTEST_CONSTEXPR_FUNC constexpr}\par
378 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
379 {\cf21 #endif }{\cf20 // DOCTEST_CONSTEXPR}\par
380 \par
381 {\cf20 // =================================================================================================}\par
382 {\cf20 // == FEATURE DETECTION END ========================================================================}\par
383 {\cf20 // =================================================================================================}\par
384 \par
385 {\cf21 #define DOCTEST_DECLARE_INTERFACE(name)                                                            \\}\par
386 {\cf21     virtual ~name();                                                                               \\}\par
387 {\cf21     name() = default;                                                                              \\}\par
388 {\cf21     name(const name&) = delete;                                                                    \\}\par
389 {\cf21     name(name&&) = delete;                                                                         \\}\par
390 {\cf21     name& operator=(const name&) = delete;                                                         \\}\par
391 {\cf21     name& operator=(name&&) = delete;}\par
392 \par
393 {\cf21 #define DOCTEST_DEFINE_INTERFACE(name)                                                             \\}\par
394 {\cf21     name::~name() = default;}\par
395 \par
396 {\cf20 // internal macros for string concatenation and anonymous variable name generation}\par
397 {\cf21 #define DOCTEST_CAT_IMPL(s1, s2) s1##s2}\par
398 {\cf21 #define DOCTEST_CAT(s1, s2) DOCTEST_CAT_IMPL(s1, s2)}\par
399 {\cf21 #ifdef __COUNTER__ }{\cf20 // not standard and may be missing for some compilers}\par
400 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __COUNTER__)}\par
401 {\cf21 #else }{\cf20 // __COUNTER__}\par
402 {\cf21 #define DOCTEST_ANONYMOUS(x) DOCTEST_CAT(x, __LINE__)}\par
403 {\cf21 #endif }{\cf20 // __COUNTER__}\par
404 \par
405 {\cf21 #ifndef DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
406 {\cf21 #define DOCTEST_REF_WRAP(x) x&}\par
407 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
408 {\cf21 #define DOCTEST_REF_WRAP(x) x}\par
409 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_ASSERTION_PARAMETERS_BY_VALUE}\par
410 \par
411 {\cf20 // not using __APPLE__ because... this is how Catch does it}\par
412 {\cf21 #ifdef __MAC_OS_X_VERSION_MIN_REQUIRED}\par
413 {\cf21 #define DOCTEST_PLATFORM_MAC}\par
414 {\cf21 #elif defined(__IPHONE_OS_VERSION_MIN_REQUIRED)}\par
415 {\cf21 #define DOCTEST_PLATFORM_IPHONE}\par
416 {\cf21 #elif defined(_WIN32)}\par
417 {\cf21 #define DOCTEST_PLATFORM_WINDOWS}\par
418 {\cf21 #elif defined(__wasi__)}\par
419 {\cf21 #define DOCTEST_PLATFORM_WASI}\par
420 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM}\par
421 {\cf21 #define DOCTEST_PLATFORM_LINUX}\par
422 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM}\par
423 \par
424 {\cf17 namespace }doctest \{ {\cf17 namespace }detail \{\par
425     {\cf17 static} DOCTEST_CONSTEXPR {\cf18 int} consume({\cf17 const} {\cf18 int}*, {\cf18 int}) {\cf17 noexcept} \{ {\cf19 return} 0; \}\par
426 \}\}\par
427 \par
428 {\cf21 #define DOCTEST_GLOBAL_NO_WARNINGS(var, ...)                                                         \\}\par
429 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wglobal-constructors")                                \\}\par
430 {\cf21     static const int var = doctest::detail::consume(&var, __VA_ARGS__);                              \\}\par
431 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
432 \par
433 {\cf21 #ifndef DOCTEST_BREAK_INTO_DEBUGGER}\par
434 {\cf20 // should probably take a look at https://github.com/scottt/debugbreak}\par
435 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
436 {\cf21 #if defined(__GNUC__) && (defined(__i386) || defined(__x86_64))}\par
437 {\cf20 // Break at the location of the failing check if possible}\par
438 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
439 {\cf21 #else}\par
440 {\cf21 #include <signal.h>}\par
441 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() raise(SIGTRAP)}\par
442 {\cf21 #endif}\par
443 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
444 {\cf21 #if defined(__x86_64) || defined(__x86_64__) || defined(__amd64__) || defined(__i386)}\par
445 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("int $3\\n" : :) }{\cf20 // NOLINT(hicpp-no-assembler)}\par
446 {\cf21 #elif defined(__ppc__) || defined(__ppc64__)}\par
447 {\cf20 // https://www.cocoawithlove.com/2008/03/break-into-debugger.html}\par
448 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("li r0, 20\\nsc\\nnop\\nli r0, 37\\nli r4, 2\\nsc\\nnop\\n": : : "memory","r0","r3","r4") }{\cf20 // NOLINT(hicpp-no-assembler)}\par
449 {\cf21 #else}\par
450 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __asm__("brk #0"); }{\cf20 // NOLINT(hicpp-no-assembler)}\par
451 {\cf21 #endif}\par
452 {\cf21 #elif DOCTEST_MSVC}\par
453 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() __debugbreak()}\par
454 {\cf21 #elif defined(__MINGW32__)}\par
455 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wredundant-decls"})\par
456 extern "C" __declspec(dllimport) {\cf18 void} __stdcall DebugBreak();\par
457 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
458 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() ::DebugBreak()}\par
459 {\cf21 #else }{\cf20 // linux}\par
460 {\cf21 #define DOCTEST_BREAK_INTO_DEBUGGER() (static_cast<void>(0))}\par
461 {\cf21 #endif }{\cf20 // linux}\par
462 {\cf21 #endif }{\cf20 // DOCTEST_BREAK_INTO_DEBUGGER}\par
463 \par
464 {\cf20 // this is kept here for backwards compatibility since the config option was changed}\par
465 {\cf21 #ifdef DOCTEST_CONFIG_USE_IOSFWD}\par
466 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
467 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
468 {\cf21 #endif}\par
469 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_IOSFWD}\par
470 \par
471 {\cf20 // for clang - always include ciso646 (which drags some std stuff) because}\par
472 {\cf20 // we want to check if we are using libc++ with the _LIBCPP_VERSION macro in}\par
473 {\cf20 // which case we don't want to forward declare stuff from std - for reference:}\par
474 {\cf20 // https://github.com/doctest/doctest/issues/126}\par
475 {\cf20 // https://github.com/doctest/doctest/issues/356}\par
476 {\cf21 #if DOCTEST_CLANG}\par
477 {\cf21 #include <ciso646>}\par
478 {\cf21 #ifdef _LIBCPP_VERSION}\par
479 {\cf21 #ifndef DOCTEST_CONFIG_USE_STD_HEADERS}\par
480 {\cf21 #define DOCTEST_CONFIG_USE_STD_HEADERS}\par
481 {\cf21 #endif}\par
482 {\cf21 #endif }{\cf20 // _LIBCPP_VERSION}\par
483 {\cf21 #endif }{\cf20 // clang}\par
484 \par
485 {\cf21 #ifdef DOCTEST_CONFIG_USE_STD_HEADERS}\par
486 {\cf21 #ifndef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
487 {\cf21 #define DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
488 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
489 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
490 {\cf21 #include <cstddef>}\par
491 {\cf21 #include <ostream>}\par
492 {\cf21 #include <istream>}\par
493 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
494 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
495 \par
496 {\cf20 // Forward declaring 'X' in namespace std is not permitted by the C++ Standard.}\par
497 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4643)\par
498 \par
499 namespace std \{ {\cf20 // NOLINT(cert-dcl58-cpp)}\par
500 {\cf17 typedef} {\cf17 decltype}({\cf17 nullptr}) nullptr_t; {\cf20 // NOLINT(modernize-use-using)}\par
501 {\cf17 typedef} {\cf17 decltype}({\cf17 sizeof}({\cf18 void}*)) size_t; {\cf20 // NOLINT(modernize-use-using)}\par
502 {\cf17 template} <{\cf17 class} {\cf18 char}T>\par
503 {\cf17 struct }char_traits;\par
504 {\cf17 template} <>\par
505 {\cf17 struct }char_traits<char>;\par
506 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
507 {\cf17 class }basic_ostream; {\cf20 // NOLINT(fuchsia-virtual-inheritance)}\par
508 {\cf17 typedef} basic_ostream<char, char_traits<char>> ostream; {\cf20 // NOLINT(modernize-use-using)}\par
509 {\cf17 template}<{\cf17 class} traits>\par
510 {\cf20 // NOLINTNEXTLINE}\par
511 basic_ostream<char, traits>& operator<<(basic_ostream<char, traits>&, {\cf17 const} {\cf18 char}*);\par
512 {\cf17 template} <{\cf17 class} {\cf18 char}T, {\cf17 class} traits>\par
513 {\cf17 class }basic_istream;\par
514 {\cf17 typedef} basic_istream<char, char_traits<char>> istream; {\cf20 // NOLINT(modernize-use-using)}\par
515 {\cf17 template} <{\cf17 class}... Types>\par
516 {\cf17 class }tuple;\par
517 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
518 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
519 {\cf17 template} <{\cf17 class} Ty>\par
520 {\cf17 class }allocator;\par
521 {\cf17 template} <{\cf17 class} Elem, {\cf17 class} Traits, {\cf17 class} Alloc>\par
522 {\cf17 class }basic_string;\par
523 {\cf17 using }string = basic_string<char, char_traits<char>, allocator<char>>;\par
524 {\cf21 #endif }{\cf20 // VS 2019}\par
525 \} {\cf20 // namespace std}\par
526 \par
527 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
528 \par
529 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_USE_STD_HEADERS}\par
530 \par
531 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
532 {\cf21 #include <type_traits>}\par
533 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
534 \par
535 {\cf17 namespace }doctest \{\par
536 \par
537 {\cf17 using }std::size_t;\par
538 \par
539 DOCTEST_INTERFACE {\cf17 extern} {\cf18 bool} is_running_in_test;\par
540 \par
541 {\cf21 #ifndef DOCTEST_CONFIG_STRING_SIZE_TYPE}\par
542 {\cf21 #define DOCTEST_CONFIG_STRING_SIZE_TYPE unsigned}\par
543 {\cf21 #endif}\par
544 \par
545 {\cf20 // A 24 byte string class (can be as small as 17 for x64 and 13 for x86) that can hold strings with length}\par
546 {\cf20 // of up to 23 chars on the stack before going on the heap - the last byte of the buffer is used for:}\par
547 {\cf20 // - "is small" bit - the highest bit - if "0" then it is small - otherwise its "1" (128)}\par
548 {\cf20 // - if small - capacity left before going on the heap - using the lowest 5 bits}\par
549 {\cf20 // - if small - 2 bits are left unused - the second and third highest ones}\par
550 {\cf20 // - if small - acts as a null terminator if strlen() is 23 (24 including the null terminator)}\par
551 {\cf20 //              and the "is small" bit remains "0" ("as well as the capacity left") so its OK}\par
552 {\cf20 // Idea taken from this lecture about the string implementation of facebook/folly - fbstring}\par
553 {\cf20 // https://www.youtube.com/watch?v=kPR8h4-qZdk}\par
554 {\cf20 // TODO:}\par
555 {\cf20 // - optimizations - like not deleting memory unnecessarily in operator= and etc.}\par
556 {\cf20 // - resize/reserve/clear}\par
557 {\cf20 // - replace}\par
558 {\cf20 // - back/front}\par
559 {\cf20 // - iterator stuff}\par
560 {\cf20 // - find & friends}\par
561 {\cf20 // - push_back/pop_back}\par
562 {\cf20 // - assign/insert/erase}\par
563 {\cf20 // - relational operators as free functions - taking const char* as one of the params}\par
564 {\cf17 class }DOCTEST_INTERFACE String\par
565 \{\par
566 {\cf17 public}:\par
567     {\cf17 using }size_type = DOCTEST_CONFIG_STRING_SIZE_TYPE;\par
568 \par
569 {\cf17 private}:\par
570     {\cf17 static} DOCTEST_CONSTEXPR size_type len  = 24;      \par
571     {\cf17 static} DOCTEST_CONSTEXPR size_type last = len - 1; \par
572 \par
573     {\cf17 struct }view {\cf20 // len should be more than sizeof(view) - because of the final byte for flags}\par
574     \{\par
575         {\cf18 char}*    ptr;\par
576         size_type size;\par
577         size_type capacity;\par
578     \};\par
579 \par
580     {\cf17 union}\par
581     \{\par
582         {\cf18 char} buf[len]; {\cf20 // NOLINT(*-avoid-c-arrays)}\par
583         view data;\par
584     \};\par
585 \par
586     {\cf18 char}* allocate(size_type sz);\par
587 \par
588     {\cf18 bool} isOnStack() const noexcept \{ {\cf19 return} (buf[last] & 128) == 0; \}\par
589     {\cf18 void} setOnHeap() noexcept;\par
590     {\cf18 void} setLast(size_type in = last) noexcept;\par
591     {\cf18 void} setSize(size_type sz) noexcept;\par
592 \par
593     {\cf18 void} copy(const String& other);\par
594 \par
595 public:\par
596     static DOCTEST_CONSTEXPR size_type npos = static_cast<size_type>(-1);\par
597 \par
598     String() noexcept;\par
599     ~String();\par
600 \par
601     {\cf20 // cppcheck-suppress noExplicitConstructor}\par
602     String(const {\cf18 char}* in);\par
603     String(const {\cf18 char}* in, size_type in_size);\par
604 \par
605     String(std::istream& in, size_type in_size);\par
606 \par
607     String(const String& other);\par
608     String& operator=(const String& other);\par
609 \par
610     String& operator+=(const String& other);\par
611 \par
612     String(String&& other) noexcept;\par
613     String& operator=(String&& other) noexcept;\par
614 \par
615     {\cf18 char}  operator[](size_type i) const;\par
616     {\cf18 char}& operator[](size_type i);\par
617 \par
618     {\cf20 // the only functions I'm willing to leave in the interface - available for inlining}\par
619     const {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->c_str(); \} {\cf20 // NOLINT}\par
620     {\cf18 char}*       c_str() \{\par
621         {\cf19 if} (isOnStack()) \{\par
622             {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf);\par
623         \}\par
624         {\cf19 return} data.ptr;\par
625     \}\par
626 \par
627     size_type size() {\cf17 const};\par
628     size_type capacity() {\cf17 const};\par
629 \par
630     String substr(size_type pos, size_type cnt = npos) &&;\par
631     String substr(size_type pos, size_type cnt = npos) {\cf17 const} &;\par
632 \par
633     size_type find({\cf18 char} ch, size_type pos = 0) {\cf17 const};\par
634     size_type rfind({\cf18 char} ch, size_type pos = npos) {\cf17 const};\par
635 \par
636     {\cf18 int} compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
637     {\cf18 int} compare({\cf17 const} String& other, {\cf18 bool} no_case = {\cf17 false}) {\cf17 const};\par
638 \par
639 {\cf17 friend} DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in);\par
640 \};\par
641 \par
642 DOCTEST_INTERFACE String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
643 \par
644 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
645 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
646 DOCTEST_INTERFACE {\cf18 bool} operator<({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
647 DOCTEST_INTERFACE {\cf18 bool} operator>({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
648 DOCTEST_INTERFACE {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
649 DOCTEST_INTERFACE {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs);\par
650 \par
651 {\cf17 class }DOCTEST_INTERFACE Contains \{\par
652 {\cf17 public}:\par
653     {\cf17 explicit} Contains({\cf17 const} String& {\cf18 string});\par
654 \par
655     {\cf18 bool} checkWith({\cf17 const} String& other) {\cf17 const};\par
656 \par
657     String string;\par
658 \};\par
659 \par
660 DOCTEST_INTERFACE String toString({\cf17 const} Contains& in);\par
661 \par
662 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
663 DOCTEST_INTERFACE {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
664 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs);\par
665 DOCTEST_INTERFACE {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs);\par
666 \par
667 {\cf17 namespace }Color \{\par
668     {\cf17 enum} Enum\par
669     \{\par
670         None = 0,\par
671         White,\par
672         Red,\par
673         Green,\par
674         Blue,\par
675         Cyan,\par
676         Yellow,\par
677         Grey,\par
678 \par
679         Bright = 0x10,\par
680 \par
681         BrightRed   = Bright | Red,\par
682         BrightGreen = Bright | Green,\par
683         LightGrey   = Bright | Grey,\par
684         BrightWhite = Bright | White\par
685     \};\par
686 \par
687     DOCTEST_INTERFACE std::ostream& operator<<(std::ostream& s, Color::Enum code);\par
688 \} {\cf20 // namespace Color}\par
689 \par
690 {\cf17 namespace }assertType \{\par
691     {\cf17 enum} Enum\par
692     \{\par
693         {\cf20 // macro traits}\par
694 \par
695         is_warn    = 1,\par
696         is_check   = 2 * is_warn,\par
697         is_require = 2 * is_check,\par
698 \par
699         is_normal      = 2 * is_require,\par
700         is_throws      = 2 * is_normal,\par
701         is_throws_as   = 2 * is_throws,\par
702         is_throws_with = 2 * is_throws_as,\par
703         is_nothrow     = 2 * is_throws_with,\par
704 \par
705         is_false = 2 * is_nothrow,\par
706         is_unary = 2 * is_false, {\cf20 // not checked anywhere - used just to distinguish the types}\par
707 \par
708         is_eq = 2 * is_unary,\par
709         is_ne = 2 * is_eq,\par
710 \par
711         is_lt = 2 * is_ne,\par
712         is_gt = 2 * is_lt,\par
713 \par
714         is_ge = 2 * is_gt,\par
715         is_le = 2 * is_ge,\par
716 \par
717         {\cf20 // macro types}\par
718 \par
719         DT_WARN    = is_normal | is_warn,\par
720         DT_CHECK   = is_normal | is_check,\par
721         DT_REQUIRE = is_normal | is_require,\par
722 \par
723         DT_WARN_FALSE    = is_normal | is_false | is_warn,\par
724         DT_CHECK_FALSE   = is_normal | is_false | is_check,\par
725         DT_REQUIRE_FALSE = is_normal | is_false | is_require,\par
726 \par
727         DT_WARN_THROWS    = is_throws | is_warn,\par
728         DT_CHECK_THROWS   = is_throws | is_check,\par
729         DT_REQUIRE_THROWS = is_throws | is_require,\par
730 \par
731         DT_WARN_THROWS_AS    = is_throws_as | is_warn,\par
732         DT_CHECK_THROWS_AS   = is_throws_as | is_check,\par
733         DT_REQUIRE_THROWS_AS = is_throws_as | is_require,\par
734 \par
735         DT_WARN_THROWS_WITH    = is_throws_with | is_warn,\par
736         DT_CHECK_THROWS_WITH   = is_throws_with | is_check,\par
737         DT_REQUIRE_THROWS_WITH = is_throws_with | is_require,\par
738 \par
739         DT_WARN_THROWS_WITH_AS    = is_throws_with | is_throws_as | is_warn,\par
740         DT_CHECK_THROWS_WITH_AS   = is_throws_with | is_throws_as | is_check,\par
741         DT_REQUIRE_THROWS_WITH_AS = is_throws_with | is_throws_as | is_require,\par
742 \par
743         DT_WARN_NOTHROW    = is_nothrow | is_warn,\par
744         DT_CHECK_NOTHROW   = is_nothrow | is_check,\par
745         DT_REQUIRE_NOTHROW = is_nothrow | is_require,\par
746 \par
747         DT_WARN_EQ    = is_normal | is_eq | is_warn,\par
748         DT_CHECK_EQ   = is_normal | is_eq | is_check,\par
749         DT_REQUIRE_EQ = is_normal | is_eq | is_require,\par
750 \par
751         DT_WARN_NE    = is_normal | is_ne | is_warn,\par
752         DT_CHECK_NE   = is_normal | is_ne | is_check,\par
753         DT_REQUIRE_NE = is_normal | is_ne | is_require,\par
754 \par
755         DT_WARN_GT    = is_normal | is_gt | is_warn,\par
756         DT_CHECK_GT   = is_normal | is_gt | is_check,\par
757         DT_REQUIRE_GT = is_normal | is_gt | is_require,\par
758 \par
759         DT_WARN_LT    = is_normal | is_lt | is_warn,\par
760         DT_CHECK_LT   = is_normal | is_lt | is_check,\par
761         DT_REQUIRE_LT = is_normal | is_lt | is_require,\par
762 \par
763         DT_WARN_GE    = is_normal | is_ge | is_warn,\par
764         DT_CHECK_GE   = is_normal | is_ge | is_check,\par
765         DT_REQUIRE_GE = is_normal | is_ge | is_require,\par
766 \par
767         DT_WARN_LE    = is_normal | is_le | is_warn,\par
768         DT_CHECK_LE   = is_normal | is_le | is_check,\par
769         DT_REQUIRE_LE = is_normal | is_le | is_require,\par
770 \par
771         DT_WARN_UNARY    = is_normal | is_unary | is_warn,\par
772         DT_CHECK_UNARY   = is_normal | is_unary | is_check,\par
773         DT_REQUIRE_UNARY = is_normal | is_unary | is_require,\par
774 \par
775         DT_WARN_UNARY_FALSE    = is_normal | is_false | is_unary | is_warn,\par
776         DT_CHECK_UNARY_FALSE   = is_normal | is_false | is_unary | is_check,\par
777         DT_REQUIRE_UNARY_FALSE = is_normal | is_false | is_unary | is_require,\par
778     \};\par
779 \} {\cf20 // namespace assertType}\par
780 \par
781 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* assertString(assertType::Enum at);\par
782 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* failureString(assertType::Enum at);\par
783 DOCTEST_INTERFACE {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file);\par
784 \par
785 {\cf17 struct }DOCTEST_INTERFACE TestCaseData\par
786 \{\par
787     String      m_file;       {\cf20 // the file in which the test was registered (using String - see #350)}\par
788     {\cf18 unsigned}    m_line;       {\cf20 // the line where the test was registered}\par
789     {\cf17 const} {\cf18 char}* m_name;       {\cf20 // name of the test case}\par
790     {\cf17 const} {\cf18 char}* m_test_suite; {\cf20 // the test suite in which the test was added}\par
791     {\cf17 const} {\cf18 char}* m_description;\par
792     {\cf18 bool}        m_skip;\par
793     {\cf18 bool}        m_no_breaks;\par
794     {\cf18 bool}        m_no_output;\par
795     {\cf18 bool}        m_may_fail;\par
796     {\cf18 bool}        m_should_fail;\par
797     {\cf18 int}         m_expected_failures;\par
798     {\cf18 double}      m_timeout;\par
799 \};\par
800 \par
801 {\cf17 struct }DOCTEST_INTERFACE AssertData\par
802 \{\par
803     {\cf20 // common - for all asserts}\par
804     {\cf17 const} TestCaseData* m_test_case;\par
805     assertType::Enum    m_at;\par
806     {\cf17 const} {\cf18 char}*         m_file;\par
807     {\cf18 int}                 m_line;\par
808     {\cf17 const} {\cf18 char}*         m_expr;\par
809     {\cf18 bool}                m_failed;\par
810 \par
811     {\cf20 // exception-related - for all asserts}\par
812     {\cf18 bool}   m_threw;\par
813     String m_exception;\par
814 \par
815     {\cf20 // for normal asserts}\par
816     String m_decomp;\par
817 \par
818     {\cf20 // for specific exception-related asserts}\par
819     {\cf18 bool}           m_threw_as;\par
820     {\cf17 const} {\cf18 char}*    m_exception_type;\par
821 \par
822     {\cf17 class }DOCTEST_INTERFACE StringContains \{\par
823         {\cf17 private}:\par
824             Contains content;\par
825             {\cf18 bool} isContains;\par
826 \par
827         {\cf17 public}:\par
828             StringContains({\cf17 const} String& str) : content(str), isContains(false) \{ \}\par
829             StringContains(Contains cntn) : content(static_cast<Contains&&>(cntn)), isContains(true) \{ \}\par
830 \par
831             {\cf18 bool} check({\cf17 const} String& str) \{ {\cf19 return} isContains ? (content == str) : (content.string == str); \}\par
832 \par
833             {\cf17 operator} {\cf17 const} String&() {\cf17 const} \{ {\cf19 return} content.string; \}\par
834 \par
835             {\cf17 const} {\cf18 char}* c_str(){\cf17  const }\{ {\cf19 return} content.string.c_str(); \}\par
836     \} m_exception_string;\par
837 \par
838     AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
839         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string);\par
840 \};\par
841 \par
842 {\cf17 struct }DOCTEST_INTERFACE MessageData\par
843 \{\par
844     String           m_string;\par
845     {\cf17 const} {\cf18 char}*      m_file;\par
846     {\cf18 int}              m_line;\par
847     assertType::Enum m_severity;\par
848 \};\par
849 \par
850 {\cf17 struct }DOCTEST_INTERFACE SubcaseSignature\par
851 \{\par
852     String      m_name;\par
853     {\cf17 const} {\cf18 char}* m_file;\par
854     {\cf18 int}         m_line;\par
855 \par
856     {\cf18 bool} operator==({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
857     {\cf18 bool} operator<({\cf17 const} SubcaseSignature& other) {\cf17 const};\par
858 \};\par
859 \par
860 {\cf17 struct }DOCTEST_INTERFACE IContextScope\par
861 \{\par
862     DOCTEST_DECLARE_INTERFACE(IContextScope)\par
863     virtual {\cf18 void} stringify(std::ostream*) const = 0;\par
864 \};\par
865 \par
866 namespace detail \{\par
867     {\cf17 struct }DOCTEST_INTERFACE TestCase;\par
868 \} {\cf20 // namespace detail}\par
869 \par
870 {\cf17 struct }ContextOptions \par
871 \{\par
872     std::ostream* cout = {\cf17 nullptr}; {\cf20 // stdout stream}\par
873     String        binary_name;    {\cf20 // the test binary name}\par
874 \par
875     {\cf17 const} detail::TestCase* currentTest = {\cf17 nullptr};\par
876 \par
877     {\cf20 // == parameters from the command line}\par
878     String   out;       {\cf20 // output filename}\par
879     String   order_by;  {\cf20 // how tests should be ordered}\par
880     {\cf18 unsigned} rand_seed; {\cf20 // the seed for rand ordering}\par
881 \par
882     {\cf18 unsigned} first; {\cf20 // the first (matching) test to be executed}\par
883     {\cf18 unsigned} last;  {\cf20 // the last (matching) test to be executed}\par
884 \par
885     {\cf18 int} abort_after;           {\cf20 // stop tests after this many failed assertions}\par
886     {\cf18 int} subcase_filter_levels; {\cf20 // apply the subcase filters for the first N levels}\par
887 \par
888     {\cf18 bool} success;              {\cf20 // include successful assertions in output}\par
889     {\cf18 bool} case_sensitive;       {\cf20 // if filtering should be case sensitive}\par
890     {\cf18 bool} exit;                 {\cf20 // if the program should be exited after the tests are ran/whatever}\par
891     {\cf18 bool} duration;             {\cf20 // print the time duration of each test case}\par
892     {\cf18 bool} minimal;              {\cf20 // minimal console output (only test failures)}\par
893     {\cf18 bool} quiet;                {\cf20 // no console output}\par
894     {\cf18 bool} no_throw;             {\cf20 // to skip exceptions-related assertion macros}\par
895     {\cf18 bool} no_exitcode;          {\cf20 // if the framework should return 0 as the exitcode}\par
896     {\cf18 bool} no_run;               {\cf20 // to not run the tests at all (can be done with an "*" exclude)}\par
897     {\cf18 bool} no_intro;             {\cf20 // to not print the intro of the framework}\par
898     {\cf18 bool} no_version;           {\cf20 // to not print the version of the framework}\par
899     {\cf18 bool} no_colors;            {\cf20 // if output to the console should be colorized}\par
900     {\cf18 bool} force_colors;         {\cf20 // forces the use of colors even when a tty cannot be detected}\par
901     {\cf18 bool} no_breaks;            {\cf20 // to not break into the debugger}\par
902     {\cf18 bool} no_skip;              {\cf20 // don't skip test cases which are marked to be skipped}\par
903     {\cf18 bool} gnu_file_line;        {\cf20 // if line numbers should be surrounded with :x: and not (x):}\par
904     {\cf18 bool} no_path_in_filenames; {\cf20 // if the path to files should be removed from the output}\par
905     {\cf18 bool} no_line_numbers;      {\cf20 // if source code line numbers should be omitted from the output}\par
906     {\cf18 bool} no_debug_output;      {\cf20 // no output in the debug console when a debugger is attached}\par
907     {\cf18 bool} no_skipped_summary;   {\cf20 // don't print "skipped" in the summary !!! UNDOCUMENTED !!!}\par
908     {\cf18 bool} no_time_in_output;    {\cf20 // omit any time/timestamps from output !!! UNDOCUMENTED !!!}\par
909 \par
910     {\cf18 bool} help;             {\cf20 // to print the help}\par
911     {\cf18 bool} version;          {\cf20 // to print the version}\par
912     {\cf18 bool} count;            {\cf20 // if only the count of matching tests is to be retrieved}\par
913     {\cf18 bool} list_test_cases;  {\cf20 // to list all tests matching the filters}\par
914     {\cf18 bool} list_test_suites; {\cf20 // to list all suites matching the filters}\par
915     {\cf18 bool} list_reporters;   {\cf20 // lists all registered reporters}\par
916 \};\par
917 \par
918 {\cf17 namespace }detail \{\par
919     {\cf17 namespace }types \{\par
920 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
921         {\cf17 using namespace }std;\par
922 {\cf21 #else}\par
923         {\cf17 template} <{\cf18 bool} COND, {\cf17 typename} T = {\cf18 void}>\par
924         {\cf17 struct }enable_if \{ \};\par
925 \par
926         {\cf17 template} <{\cf17 typename} T>\par
927         {\cf17 struct }enable_if<true, T> \{ {\cf17 using }type = T; \};\par
928 \par
929         {\cf17 struct }true_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 true}; \};\par
930         {\cf17 struct }false_type \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = {\cf17 false}; \};\par
931 \par
932         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference \{ {\cf17 using }type = T; \};\par
933         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&> \{ {\cf17 using }type = T; \};\par
934         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_reference<T&&> \{ {\cf17 using }type = T; \};\par
935 \par
936         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference : false_type \{ \};\par
937         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_rvalue_reference<T&&> : true_type \{ \};\par
938 \par
939         {\cf17 template}<{\cf17 typename} T> {\cf17 struct }remove_const \{ {\cf17 using }type = T; \};\par
940         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }remove_const<const T> \{ {\cf17 using }type = T; \};\par
941 \par
942         {\cf20 // Compiler intrinsics}\par
943         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_enum \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = __is_enum(T); \};\par
944         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }underlying_type \{ {\cf17 using }type = __underlying_type(T); \};\par
945 \par
946         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer : false_type \{ \};\par
947         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_pointer<T*> : true_type \{ \};\par
948 \par
949         {\cf17 template} <{\cf17 typename} T> {\cf17 struct }is_array : false_type \{ \};\par
950         {\cf20 // NOLINTNEXTLINE(*-avoid-c-arrays)}\par
951         {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} SIZE> {\cf17 struct }is_array<T[SIZE]> : true_type \{ \};\par
952 {\cf21 #endif}\par
953     \}\par
954 \par
955     {\cf20 // <utility>}\par
956     {\cf17 template} <{\cf17 typename} T>\par
957     T&& declval();\par
958 \par
959     {\cf17 template} <{\cf17 class} T>\par
960     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type& t) DOCTEST_NOEXCEPT \{\par
961         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
962     \}\par
963 \par
964     {\cf17 template} <{\cf17 class} T>\par
965     DOCTEST_CONSTEXPR_FUNC T&& forward({\cf17 typename} types::remove_reference<T>::type&& t) DOCTEST_NOEXCEPT \{\par
966         {\cf19 return} {\cf17 static_cast<}T&&{\cf17 >}(t);\par
967     \}\par
968 \par
969     {\cf17 template} <{\cf17 typename} T>\par
970     {\cf17 struct }deferred_false : types::false_type \{ \};\par
971 \par
972 {\cf20 // MSVS 2015 :(}\par
973 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
974     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
975     {\cf17 struct }has_global_insertion_operator : types::false_type \{ \};\par
976 \par
977     {\cf17 template} <{\cf17 typename} T>\par
978     {\cf17 struct }has_global_insertion_operator<T, decltype(::operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
979 \par
980     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
981     {\cf17 struct }has_insertion_operator \{ {\cf17 static} DOCTEST_CONSTEXPR {\cf18 bool} value = has_global_insertion_operator<T>::value; \};\par
982 \par
983     {\cf17 template} <{\cf17 typename} T, {\cf18 bool} global>\par
984     {\cf17 struct }insert_hack;\par
985 \par
986     {\cf17 template} <{\cf17 typename} T>\par
987     {\cf17 struct }insert_hack<T, true> \{\par
988         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ ::operator<<(os, t); \}\par
989     \};\par
990 \par
991     {\cf17 template} <{\cf17 typename} T>\par
992     {\cf17 struct }insert_hack<T, false> \{\par
993         {\cf17 static} {\cf18 void} insert(std::ostream& os, {\cf17 const} T& t) \{ operator<<(os, t); \}\par
994     \};\par
995 \par
996     {\cf17 template} <{\cf17 typename} T>\par
997     {\cf17 using }insert_hack_t = insert_hack<T, has_global_insertion_operator<T>::value>;\par
998 {\cf21 #else}\par
999     {\cf17 template} <{\cf17 typename} T, {\cf17 typename} = {\cf18 void}>\par
1000     {\cf17 struct }has_insertion_operator : types::false_type \{ \};\par
1001 {\cf21 #endif}\par
1002 \par
1003 {\cf17 template} <{\cf17 typename} T>\par
1004 {\cf17 struct }has_insertion_operator<T, decltype(operator<<(declval<std::ostream&>(), declval<const T&>()), void())> : types::true_type \{ \};\par
1005 \par
1006     DOCTEST_INTERFACE std::ostream* tlssPush();\par
1007     DOCTEST_INTERFACE String tlssPop();\par
1008 \par
1009     {\cf17 template} <{\cf18 bool} C>\par
1010     {\cf17 struct }StringMakerBase \{\par
1011         {\cf17 template} <{\cf17 typename} T>\par
1012         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T)) \{\par
1013 {\cf21 #ifdef DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES}\par
1014             {\cf17 static_assert}(deferred_false<T>::value, {\cf22 "No stringification detected for type T. See string conversion manual"});\par
1015 {\cf21 #endif}\par
1016             {\cf19 return} {\cf22 "\{?\}"};\par
1017         \}\par
1018     \};\par
1019 \par
1020     {\cf17 template} <{\cf17 typename} T>\par
1021     {\cf17 struct }filldata;\par
1022 \par
1023     {\cf17 template} <{\cf17 typename} T>\par
1024     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T& in) \{\par
1025         filldata<T>::fill(stream, in);\par
1026     \}\par
1027 \par
1028     {\cf17 template} <{\cf17 typename} T, {\cf18 size_t} N>\par
1029     {\cf18 void} filloss(std::ostream* stream, {\cf17 const} T (&in)[N]) \{ {\cf20 // NOLINT(*-avoid-c-arrays)}\par
1030         {\cf20 // T[N], T(&)[N], T(&&)[N] have same behaviour.}\par
1031         {\cf20 // Hence remove reference.}\par
1032         filloss<{\cf17 typename} types::remove_reference<{\cf17 decltype}(in)>::type>(stream, in);\par
1033     \}\par
1034 \par
1035     {\cf17 template} <{\cf17 typename} T>\par
1036     String toStream({\cf17 const} T& in) \{\par
1037         std::ostream* stream = tlssPush();\par
1038         filloss(stream, in);\par
1039         {\cf19 return} tlssPop();\par
1040     \}\par
1041 \par
1042     {\cf17 template} <>\par
1043     {\cf17 struct }StringMakerBase<true> \{\par
1044         {\cf17 template} <{\cf17 typename} T>\par
1045         {\cf17 static} String convert({\cf17 const} DOCTEST_REF_WRAP(T) in) \{\par
1046             {\cf19 return} toStream(in);\par
1047         \}\par
1048     \};\par
1049 \} {\cf20 // namespace detail}\par
1050 \par
1051 {\cf17 template} <{\cf17 typename} T>\par
1052 {\cf17 struct }StringMaker : {\cf17 public} detail::StringMakerBase<\par
1053     detail::has_insertion_operator<T>::value || detail::types::is_pointer<T>::value || detail::types::is_array<T>::value>\par
1054 \{\};\par
1055 \par
1056 {\cf21 #ifndef DOCTEST_STRINGIFY}\par
1057 {\cf21 #ifdef DOCTEST_CONFIG_DOUBLE_STRINGIFY}\par
1058 {\cf21 #define DOCTEST_STRINGIFY(...) toString(toString(__VA_ARGS__))}\par
1059 {\cf21 #else}\par
1060 {\cf21 #define DOCTEST_STRINGIFY(...) toString(__VA_ARGS__)}\par
1061 {\cf21 #endif}\par
1062 {\cf21 #endif}\par
1063 \par
1064 {\cf17 template} <{\cf17 typename} T>\par
1065 String toString() \{\par
1066 {\cf21 #if DOCTEST_MSVC >= 0 && DOCTEST_CLANG == 0 && DOCTEST_GCC == 0}\par
1067     String ret = __FUNCSIG__; {\cf20 // class doctest::String __cdecl doctest::toString<TYPE>(void)}\par
1068     String::size_type beginPos = ret.find({\cf23 '<'});\par
1069     {\cf19 return} ret.substr(beginPos + 1, ret.size() - beginPos - {\cf17 static_cast<}String::size_type{\cf17 >}({\cf17 sizeof}({\cf22 ">(void)"})));\par
1070 {\cf21 #else}\par
1071     String ret = __PRETTY_FUNCTION__; {\cf20 // doctest::String toString() [with T = TYPE]}\par
1072     String::size_type begin = ret.find({\cf23 '='}) + 2;\par
1073     {\cf19 return} ret.substr(begin, ret.size() - begin - 1);\par
1074 {\cf21 #endif}\par
1075 \}\par
1076 \par
1077 template <typename T, typename detail::types::enable_if<!detail::types::is_enum<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1078 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1079     {\cf19 return} StringMaker<T>::convert(value);\par
1080 \}\par
1081 \par
1082 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1083 DOCTEST_INTERFACE String toString({\cf17 const} {\cf18 char}* in);\par
1084 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1085 \par
1086 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
1087 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
1088 DOCTEST_INTERFACE String toString({\cf17 const} std::string& in);\par
1089 {\cf21 #endif }{\cf20 // VS 2019}\par
1090 \par
1091 DOCTEST_INTERFACE String toString(String in);\par
1092 \par
1093 DOCTEST_INTERFACE String toString(std::nullptr_t);\par
1094 \par
1095 DOCTEST_INTERFACE String toString({\cf18 bool} in);\par
1096 \par
1097 DOCTEST_INTERFACE String toString({\cf18 float} in);\par
1098 DOCTEST_INTERFACE String toString({\cf18 double} in);\par
1099 DOCTEST_INTERFACE String toString({\cf18 double} {\cf18 long} in);\par
1100 \par
1101 DOCTEST_INTERFACE String toString({\cf18 char} in);\par
1102 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 signed} in);\par
1103 DOCTEST_INTERFACE String toString({\cf18 char} {\cf18 unsigned} in);\par
1104 DOCTEST_INTERFACE String toString({\cf18 short} in);\par
1105 DOCTEST_INTERFACE String toString({\cf18 short} {\cf18 unsigned} in);\par
1106 DOCTEST_INTERFACE String toString({\cf18 signed} in);\par
1107 DOCTEST_INTERFACE String toString({\cf18 unsigned} in);\par
1108 DOCTEST_INTERFACE String toString({\cf18 long} in);\par
1109 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 unsigned} in);\par
1110 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} in);\par
1111 DOCTEST_INTERFACE String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in);\par
1112 \par
1113 template <typename T, typename detail::types::enable_if<detail::types::is_enum<T>::value, {\cf18 bool}>::type = {\cf17 true}>\par
1114 String toString({\cf17 const} DOCTEST_REF_WRAP(T) value) \{\par
1115     {\cf17 using }UT = {\cf17 typename} detail::types::underlying_type<T>::type;\par
1116     {\cf19 return} (DOCTEST_STRINGIFY({\cf17 static_cast<}UT{\cf17 >}(value)));\par
1117 \}\par
1118 \par
1119 {\cf17 namespace }detail \{\par
1120     {\cf17 template} <{\cf17 typename} T>\par
1121     {\cf17 struct }filldata\par
1122     \{\par
1123         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T& in) \{\par
1124 {\cf21 #if defined(_MSC_VER) && _MSC_VER <= 1900}\par
1125         insert_hack_t<T>::insert(*stream, in);\par
1126 {\cf21 #else}\par
1127         operator<<(*stream, in);\par
1128 {\cf21 #endif}\par
1129         \}\par
1130     \};\par
1131 \par
1132 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1133 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1134     template <typename T, {\cf18 size_t} N>\par
1135     struct filldata<T[N]> \{\par
1136         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T(&in)[N]) \{\par
1137             *stream << {\cf22 "["};\par
1138             {\cf19 for} ({\cf18 size_t} i = 0; i < N; i++) \{\par
1139                 {\cf19 if} (i != 0) \{ *stream << {\cf22 ", "}; \}\par
1140                 *stream << (DOCTEST_STRINGIFY(in[i]));\par
1141             \}\par
1142             *stream << {\cf22 "]"};\par
1143         \}\par
1144     \};\par
1145 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1146 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1147 \par
1148     {\cf20 // Specialized since we don't want the terminating null byte!}\par
1149 {\cf20 // NOLINTBEGIN(*-avoid-c-arrays)}\par
1150     {\cf17 template} <{\cf18 size_t} N>\par
1151     {\cf17 struct }filldata<const char[N]> \{\par
1152         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 char} (&in)[N]) \{\par
1153             *stream << String(in, in[N - 1] ? N : N - 1);\par
1154         \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
1155     \};\par
1156 {\cf20 // NOLINTEND(*-avoid-c-arrays)}\par
1157 \par
1158     {\cf17 template} <>\par
1159     {\cf17 struct }filldata<const void*> \{\par
1160         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in);\par
1161     \};\par
1162 \par
1163     {\cf17 template} <{\cf17 typename} T>\par
1164     {\cf17 struct }filldata<T*> \{\par
1165         {\cf17 static} {\cf18 void} fill(std::ostream* stream, {\cf17 const} T* in) \{\par
1166             filldata<const void*>::fill(stream, in);\par
1167         \}\par
1168     \};\par
1169 \}\par
1170 \par
1171 {\cf17 struct }DOCTEST_INTERFACE Approx\par
1172 \{\par
1173     Approx({\cf18 double} value);\par
1174 \par
1175     Approx operator()({\cf18 double} value) {\cf17 const};\par
1176 \par
1177 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1178     {\cf17 template} <{\cf17 typename} T>\par
1179     {\cf17 explicit} Approx({\cf17 const} T& value,\par
1180                     {\cf17 typename} detail::types::enable_if<std::is_constructible<double, T>::value>::type* =\par
1181                             {\cf17 static_cast<}T*{\cf17 >}({\cf17 nullptr})) \{\par
1182         *{\cf17 this} = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(value);\par
1183     \}\par
1184 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1185 \par
1186     Approx& epsilon({\cf18 double} newEpsilon);\par
1187 \par
1188 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1189     {\cf17 template} <{\cf17 typename} T>\par
1190     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type epsilon(\par
1191             {\cf17 const} T& newEpsilon) \{\par
1192         m_epsilon = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newEpsilon);\par
1193         {\cf19 return} *{\cf17 this};\par
1194     \}\par
1195 {\cf21 #endif }{\cf20 //  DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1196 \par
1197     Approx& scale({\cf18 double} newScale);\par
1198 \par
1199 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1200     {\cf17 template} <{\cf17 typename} T>\par
1201     {\cf17 typename} std::enable_if<std::is_constructible<double, T>::value, Approx&>::type scale(\par
1202             {\cf17 const} T& newScale) \{\par
1203         m_scale = {\cf17 static_cast<}{\cf18 double}{\cf17 >}(newScale);\par
1204         {\cf19 return} *{\cf17 this};\par
1205     \}\par
1206 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1207 \par
1208     {\cf20 // clang-format off}\par
1209     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1210     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator==({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1211     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1212     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator!=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1213     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1214     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator<=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1215     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1216     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator>=({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1217     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1218     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator< ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1219     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf18 double} lhs, {\cf17 const} Approx & rhs);\par
1220     DOCTEST_INTERFACE {\cf17 friend} {\cf18 bool} operator> ({\cf17 const} Approx & lhs, {\cf18 double} rhs);\par
1221 \par
1222 {\cf21 #ifdef DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1223 {\cf21 #define DOCTEST_APPROX_PREFIX \\}\par
1224 {\cf21     template <typename T> friend typename std::enable_if<std::is_constructible<double, T>::value, bool>::type}\par
1225 \par
1226     DOCTEST_APPROX_PREFIX operator==({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} operator==({\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs), rhs); \}\par
1227     DOCTEST_APPROX_PREFIX operator==({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
1228     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
1229     DOCTEST_APPROX_PREFIX operator!=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
1230     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value || lhs == rhs; \}\par
1231     DOCTEST_APPROX_PREFIX operator<=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1232     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value || lhs == rhs; \}\par
1233     DOCTEST_APPROX_PREFIX operator>=({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) || lhs == rhs; \}\par
1234     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) < rhs.m_value && lhs != rhs; \}\par
1235     DOCTEST_APPROX_PREFIX operator< ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value < {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1236     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} T& lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(lhs) > rhs.m_value && lhs != rhs; \}\par
1237     DOCTEST_APPROX_PREFIX operator> ({\cf17 const} Approx& lhs, {\cf17 const} T& rhs) \{ {\cf19 return} lhs.m_value > {\cf17 static_cast<}{\cf18 double}{\cf17 >}(rhs) && lhs != rhs; \}\par
1238 {\cf21 #undef DOCTEST_APPROX_PREFIX}\par
1239 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_INCLUDE_TYPE_TRAITS}\par
1240 \par
1241     {\cf20 // clang-format on}\par
1242 \par
1243     {\cf18 double} m_epsilon;\par
1244     {\cf18 double} m_scale;\par
1245     {\cf18 double} m_value;\par
1246 \};\par
1247 \par
1248 DOCTEST_INTERFACE String toString({\cf17 const} Approx& in);\par
1249 \par
1250 DOCTEST_INTERFACE {\cf17 const} ContextOptions* getContextOptions();\par
1251 \par
1252 {\cf17 template} <{\cf17 typename} F>\par
1253 {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN\par
1254 \{\par
1255     F value; {\cf18 bool} flipped;\par
1256     IsNaN(F f, {\cf18 bool} flip = {\cf17 false}) : value(f), flipped(flip) \{ \}\par
1257     IsNaN<F> operator!(){\cf17  const }\{ {\cf19 return} \{ value, !flipped \}; \}\par
1258     {\cf17 operator} bool() {\cf17 const};\par
1259 \};\par
1260 {\cf21 #ifndef __MINGW32__}\par
1261 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<float>;\par
1262 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<double>;\par
1263 {\cf17 extern} {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DECL IsNaN<long double>;\par
1264 {\cf21 #endif}\par
1265 DOCTEST_INTERFACE String toString(IsNaN<float> in);\par
1266 DOCTEST_INTERFACE String toString(IsNaN<double> in);\par
1267 DOCTEST_INTERFACE String toString(IsNaN<double long> in);\par
1268 \par
1269 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
1270 \par
1271 {\cf17 namespace }detail \{\par
1272     {\cf20 // clang-format off}\par
1273 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1274     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array       \{ {\cf17 using }type = T; \};\par
1275     {\cf17 template}<{\cf17 class} T, {\cf18 unsigned} N>   {\cf17 struct }decay_array<T[N]> \{ {\cf17 using }type = T*; \};\par
1276     {\cf17 template}<{\cf17 class} T>               {\cf17 struct }decay_array<T[]>  \{ {\cf17 using }type = T*; \};\par
1277 \par
1278     {\cf17 template}<{\cf17 class} T>   {\cf17 struct }not_char_pointer              \{ {\cf17 static} DOCTEST_CONSTEXPR value = 1; \};\par
1279     {\cf17 template}<>          {\cf17 struct }not_char_pointer<char*>       \{ {\cf17 static} DOCTEST_CONSTEXPR value = 0; \};\par
1280     {\cf17 template}<>          {\cf17 struct }not_char_pointer<const char*> \{ {\cf17 static} DOCTEST_CONSTEXPR value = 0; \};\par
1281 \par
1282     {\cf17 template}<{\cf17 class} T> {\cf17 struct }can_use_op : {\cf17 public} not_char_pointer<typename decay_array<T>::type> \{\};\par
1283 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1284     {\cf20 // clang-format on}\par
1285 \par
1286     {\cf17 struct }DOCTEST_INTERFACE TestFailureException\par
1287     \{\par
1288     \};\par
1289 \par
1290     DOCTEST_INTERFACE {\cf18 bool} checkIfShouldThrow(assertType::Enum at);\par
1291 \par
1292 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1293     DOCTEST_NORETURN\par
1294 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1295     DOCTEST_INTERFACE {\cf18 void} throwException();\par
1296 \par
1297     {\cf17 struct }DOCTEST_INTERFACE Subcase\par
1298     \{\par
1299         SubcaseSignature m_signature;\par
1300         {\cf18 bool}             m_entered = {\cf17 false};\par
1301 \par
1302         Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line);\par
1303         Subcase({\cf17 const} Subcase&) = {\cf17 delete};\par
1304         Subcase(Subcase&&) = {\cf17 delete};\par
1305         Subcase& operator=({\cf17 const} Subcase&) = {\cf17 delete};\par
1306         Subcase& operator=(Subcase&&) = {\cf17 delete};\par
1307         ~Subcase();\par
1308 \par
1309         {\cf17 operator} bool() {\cf17 const};\par
1310 \par
1311         {\cf17 private}:\par
1312             {\cf18 bool} checkFilters();\par
1313     \};\par
1314 \par
1315     {\cf17 template} <{\cf17 typename} L, {\cf17 typename} R>\par
1316     String stringifyBinaryExpr({\cf17 const} DOCTEST_REF_WRAP(L) lhs, {\cf17 const} {\cf18 char}* op,\par
1317                                {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1318         {\cf19 return} (DOCTEST_STRINGIFY(lhs)) + op + (DOCTEST_STRINGIFY(rhs));\par
1319     \}\par
1320 \par
1321 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1322 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-comparison"})\par
1323 {\cf21 #endif}\par
1324 \par
1325 {\cf20 // This will check if there is any way it could find a operator like member or friend and uses it.}\par
1326 {\cf20 // If not it doesn't find the operator or if the operator at global scope is defined after}\par
1327 {\cf20 // this template, the template won't be instantiated due to SFINAE. Once the template is not}\par
1328 {\cf20 // instantiated it can look for global operator using normal conversions.}\par
1329 {\cf21 #define SFINAE_OP(ret,op) decltype((void)(doctest::detail::declval<L>() op doctest::detail::declval<R>()),ret\{\})}\par
1330 \par
1331 {\cf21 #define DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(op, op_str, op_macro)                              \\}\par
1332 {\cf21     template <typename R>                                                                          \\}\par
1333 {\cf21     DOCTEST_NOINLINE SFINAE_OP(Result,op) operator op(R&& rhs) \{                                   \\}\par
1334 {\cf21     bool res = op_macro(doctest::detail::forward<const L>(lhs), doctest::detail::forward<R>(rhs)); \\}\par
1335 {\cf21         if(m_at & assertType::is_false)                                                            \\}\par
1336 {\cf21             res = !res;                                                                            \\}\par
1337 {\cf21         if(!res || doctest::getContextOptions()->success)                                          \\}\par
1338 {\cf21             return Result(res, stringifyBinaryExpr(lhs, op_str, rhs));                             \\}\par
1339 {\cf21         return Result(res);                                                                        \\}\par
1340 {\cf21     \}}\par
1341 \par
1342     {\cf20 // more checks could be added - like in Catch:}\par
1343     {\cf20 // https://github.com/catchorg/Catch2/pull/1480/files}\par
1344     {\cf20 // https://github.com/catchorg/Catch2/pull/1481/files}\par
1345 {\cf21 #define DOCTEST_FORBIT_EXPRESSION(rt, op)                                                          \\}\par
1346 {\cf21     template <typename R>                                                                          \\}\par
1347 {\cf21     rt& operator op(const R&) \{                                                                    \\}\par
1348 {\cf21         static_assert(deferred_false<R>::value,                                                    \\}\par
1349 {\cf21                       "Expression Too Complex Please Rewrite As Binary Comparison!");              \\}\par
1350 {\cf21         return *this;                                                                              \\}\par
1351 {\cf21     \}}\par
1352 \par
1353     {\cf17 struct }DOCTEST_INTERFACE Result {\cf20 // NOLINT(*-member-init)}\par
1354     \{\par
1355         {\cf18 bool}   m_passed;\par
1356         String m_decomp;\par
1357 \par
1358         Result() = {\cf19 default}; {\cf20 // TODO: Why do we need this? (To remove NOLINT)}\par
1359         Result({\cf18 bool} passed, {\cf17 const} String& decomposition = String());\par
1360 \par
1361         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1362         DOCTEST_FORBIT_EXPRESSION(Result, &)\par
1363         DOCTEST_FORBIT_EXPRESSION(Result, ^)\par
1364         DOCTEST_FORBIT_EXPRESSION(Result, |)\par
1365         DOCTEST_FORBIT_EXPRESSION(Result, &&)\par
1366         DOCTEST_FORBIT_EXPRESSION(Result, ||)\par
1367         DOCTEST_FORBIT_EXPRESSION(Result, ==)\par
1368         DOCTEST_FORBIT_EXPRESSION(Result, !=)\par
1369         DOCTEST_FORBIT_EXPRESSION(Result, <)\par
1370         DOCTEST_FORBIT_EXPRESSION(Result, >)\par
1371         DOCTEST_FORBIT_EXPRESSION(Result, <=)\par
1372         DOCTEST_FORBIT_EXPRESSION(Result, >=)\par
1373         DOCTEST_FORBIT_EXPRESSION(Result, =)\par
1374         DOCTEST_FORBIT_EXPRESSION(Result, +=)\par
1375         DOCTEST_FORBIT_EXPRESSION(Result, -=)\par
1376         DOCTEST_FORBIT_EXPRESSION(Result, *=)\par
1377         DOCTEST_FORBIT_EXPRESSION(Result, /=)\par
1378         DOCTEST_FORBIT_EXPRESSION(Result, %=)\par
1379         DOCTEST_FORBIT_EXPRESSION(Result, <<=)\par
1380         DOCTEST_FORBIT_EXPRESSION(Result, >>=)\par
1381         DOCTEST_FORBIT_EXPRESSION(Result, &=)\par
1382         DOCTEST_FORBIT_EXPRESSION(Result, ^=)\par
1383         DOCTEST_FORBIT_EXPRESSION(Result, |=)\par
1384     \};\par
1385 \par
1386 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1387 \par
1388     DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
1389     DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wsign-conversion"})\par
1390     DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-compare")\par
1391     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1392     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wconversion")}\par
1393     {\cf20 //DOCTEST_CLANG_SUPPRESS_WARNING("-Wfloat-equal")}\par
1394 \par
1395     DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
1396     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
1397     DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-compare")\par
1398     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wdouble-promotion")}\par
1399     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")}\par
1400     {\cf20 //DOCTEST_GCC_SUPPRESS_WARNING("-Wfloat-equal")}\par
1401 \par
1402     DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
1403     {\cf20 // https://stackoverflow.com/questions/39479163 what's the difference between 4018 and 4389}\par
1404     DOCTEST_MSVC_SUPPRESS_WARNING(4388) {\cf20 // signed/unsigned mismatch}\par
1405     DOCTEST_MSVC_SUPPRESS_WARNING(4389) {\cf20 // 'operator' : signed/unsigned mismatch}\par
1406     DOCTEST_MSVC_SUPPRESS_WARNING(4018) {\cf20 // 'expression' : signed/unsigned mismatch}\par
1407     {\cf20 //DOCTEST_MSVC_SUPPRESS_WARNING(4805) // 'operation' : unsafe mix of type 'type' and type 'type' in operation}\par
1408 \par
1409 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1410 \par
1411     {\cf20 // clang-format off}\par
1412 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1413 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE bool}\par
1414 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1415 {\cf21 #define DOCTEST_COMPARISON_RETURN_TYPE typename types::enable_if<can_use_op<L>::value || can_use_op<R>::value, bool>::type}\par
1416     {\cf17 inline} {\cf18 bool} eq({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) == String(rhs); \}\par
1417     {\cf17 inline} {\cf18 bool} ne({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) != String(rhs); \}\par
1418     {\cf17 inline} {\cf18 bool} lt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <  String(rhs); \}\par
1419     {\cf17 inline} {\cf18 bool} gt({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >  String(rhs); \}\par
1420     {\cf17 inline} {\cf18 bool} le({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) <= String(rhs); \}\par
1421     {\cf17 inline} {\cf18 bool} ge({\cf17 const} {\cf18 char}* lhs, {\cf17 const} {\cf18 char}* rhs) \{ {\cf19 return} String(lhs) >= String(rhs); \}\par
1422 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1423     {\cf20 // clang-format on}\par
1424 \par
1425 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
1426 {\cf21     template <typename L, typename R>                                                              \\}\par
1427 {\cf21     DOCTEST_COMPARISON_RETURN_TYPE name(const DOCTEST_REF_WRAP(L) lhs,                             \\}\par
1428 {\cf21                                         const DOCTEST_REF_WRAP(R) rhs) \{                           \\}\par
1429 {\cf21         return lhs op rhs;                                                                         \\}\par
1430 {\cf21     \}}\par
1431 \par
1432     DOCTEST_RELATIONAL_OP(eq, ==)\par
1433     DOCTEST_RELATIONAL_OP(ne, !=)\par
1434     DOCTEST_RELATIONAL_OP(lt, <)\par
1435     DOCTEST_RELATIONAL_OP(gt, >)\par
1436     DOCTEST_RELATIONAL_OP(le, <=)\par
1437     DOCTEST_RELATIONAL_OP(ge, >=)\par
1438 \par
1439 {\cf21 #ifndef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1440 {\cf21 #define DOCTEST_CMP_EQ(l, r) l == r}\par
1441 {\cf21 #define DOCTEST_CMP_NE(l, r) l != r}\par
1442 {\cf21 #define DOCTEST_CMP_GT(l, r) l > r}\par
1443 {\cf21 #define DOCTEST_CMP_LT(l, r) l < r}\par
1444 {\cf21 #define DOCTEST_CMP_GE(l, r) l >= r}\par
1445 {\cf21 #define DOCTEST_CMP_LE(l, r) l <= r}\par
1446 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1447 {\cf21 #define DOCTEST_CMP_EQ(l, r) eq(l, r)}\par
1448 {\cf21 #define DOCTEST_CMP_NE(l, r) ne(l, r)}\par
1449 {\cf21 #define DOCTEST_CMP_GT(l, r) gt(l, r)}\par
1450 {\cf21 #define DOCTEST_CMP_LT(l, r) lt(l, r)}\par
1451 {\cf21 #define DOCTEST_CMP_GE(l, r) ge(l, r)}\par
1452 {\cf21 #define DOCTEST_CMP_LE(l, r) le(l, r)}\par
1453 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
1454 \par
1455     {\cf17 template} <{\cf17 typename} L>\par
1456     {\cf20 // cppcheck-suppress copyCtorAndEqOperator}\par
1457     {\cf17 struct }Expression_lhs\par
1458     \{\par
1459         L                lhs;\par
1460         assertType::Enum m_at;\par
1461 \par
1462         {\cf17 explicit} Expression_lhs(L&& in, assertType::Enum at)\par
1463                 : lhs(static_cast<L&&>(in))\par
1464                 , m_at(at) \{\}\par
1465 \par
1466         DOCTEST_NOINLINE {\cf17 operator} Result() \{\par
1467 {\cf20 // this is needed only for MSVC 2015}\par
1468 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4800) {\cf20 // 'int': forcing value to bool}\par
1469             {\cf18 bool} res = {\cf17 static_cast<}{\cf18 bool}{\cf17 >}(lhs);\par
1470 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1471             {\cf19 if}(m_at & assertType::is_false) \{ \par
1472                 res = !res;\par
1473             \}\par
1474 \par
1475             {\cf19 if}(!res || getContextOptions()->success) \{\par
1476                 {\cf19 return} \{ res, (DOCTEST_STRINGIFY(lhs)) \};\par
1477             \}\par
1478             {\cf19 return} \{ res \};\par
1479         \}\par
1480 \par
1481         {\cf20 /* This is required for user-defined conversions from Expression_lhs to L */}\par
1482         {\cf17 operator} L(){\cf17  const }\{ {\cf19 return} lhs; \}\par
1483 \par
1484         {\cf20 // clang-format off}\par
1485         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(==, {\cf22 " == "}, DOCTEST_CMP_EQ) \par
1486         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(!=, {\cf22 " != "}, DOCTEST_CMP_NE) \par
1487         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>,  {\cf22 " >  "}, DOCTEST_CMP_GT) \par
1488         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<,  {\cf22 " <  "}, DOCTEST_CMP_LT) \par
1489         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(>=, {\cf22 " >= "}, DOCTEST_CMP_GE) \par
1490         DOCTEST_DO_BINARY_EXPRESSION_COMPARISON(<=, {\cf22 " <= "}, DOCTEST_CMP_LE) \par
1491         {\cf20 // clang-format on}\par
1492 \par
1493         {\cf20 // forbidding some expressions based on this table: https://en.cppreference.com/w/cpp/language/operator_precedence}\par
1494         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &)\par
1495         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^)\par
1496         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |)\par
1497         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &&)\par
1498         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ||)\par
1499         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, =)\par
1500         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, +=)\par
1501         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, -=)\par
1502         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, *=)\par
1503         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, /=)\par
1504         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, %=)\par
1505         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<=)\par
1506         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>=)\par
1507         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, &=)\par
1508         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, ^=)\par
1509         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, |=)\par
1510         {\cf20 // these 2 are unfortunate because they should be allowed - they have higher precedence over the comparisons, but the}\par
1511         {\cf20 // ExpressionDecomposer class uses the left shift operator to capture the left operand of the binary expression...}\par
1512         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, <<)\par
1513         DOCTEST_FORBIT_EXPRESSION(Expression_lhs, >>)\par
1514     \};\par
1515 \par
1516 {\cf21 #ifndef DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1517 \par
1518     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1519     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1520     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
1521 \par
1522 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_COMPARISON_WARNING_SUPPRESSION}\par
1523 \par
1524 {\cf21 #if DOCTEST_CLANG && DOCTEST_CLANG < DOCTEST_COMPILER(3, 6, 0)}\par
1525 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1526 {\cf21 #endif}\par
1527 \par
1528     {\cf17 struct }DOCTEST_INTERFACE ExpressionDecomposer\par
1529     \{\par
1530         assertType::Enum m_at;\par
1531 \par
1532         ExpressionDecomposer(assertType::Enum at);\par
1533 \par
1534         {\cf20 // The right operator for capturing expressions is "<=" instead of "<<" (based on the operator precedence table)}\par
1535         {\cf20 // but then there will be warnings from GCC about "-Wparentheses" and since "_Pragma()" is problematic this will stay for now...}\par
1536         {\cf20 // https://github.com/catchorg/Catch2/issues/870}\par
1537         {\cf20 // https://github.com/catchorg/Catch2/issues/565}\par
1538         {\cf17 template} <{\cf17 typename} L>\par
1539         Expression_lhs<L> operator<<(L&& operand) \{\par
1540             {\cf19 return} Expression_lhs<L>({\cf17 static_cast<}L&&{\cf17 >}(operand), m_at);\par
1541         \}\par
1542 \par
1543         template <typename L,typename types::enable_if<!doctest::detail::types::is_rvalue_reference<L>::value,{\cf18 void} >::type* = {\cf17 nullptr}>\par
1544         Expression_lhs<const L&> operator<<({\cf17 const} L &operand) \{\par
1545             {\cf19 return} Expression_lhs<const L&>(operand, m_at);\par
1546         \}\par
1547     \};\par
1548 \par
1549     {\cf17 struct }DOCTEST_INTERFACE TestSuite\par
1550     \{\par
1551         {\cf17 const} {\cf18 char}* m_test_suite = {\cf17 nullptr};\par
1552         {\cf17 const} {\cf18 char}* m_description = {\cf17 nullptr};\par
1553         {\cf18 bool}        m_skip = {\cf17 false};\par
1554         {\cf18 bool}        m_no_breaks = {\cf17 false};\par
1555         {\cf18 bool}        m_no_output = {\cf17 false};\par
1556         {\cf18 bool}        m_may_fail = {\cf17 false};\par
1557         {\cf18 bool}        m_should_fail = {\cf17 false};\par
1558         {\cf18 int}         m_expected_failures = 0;\par
1559         {\cf18 double}      m_timeout = 0;\par
1560 \par
1561         TestSuite& operator*({\cf17 const} {\cf18 char}* in);\par
1562 \par
1563         {\cf17 template} <{\cf17 typename} T>\par
1564         TestSuite& operator*({\cf17 const} T& in) \{\par
1565             in.fill(*{\cf17 this});\par
1566             {\cf19 return} *{\cf17 this};\par
1567         \}\par
1568     \};\par
1569 \par
1570     {\cf17 using }funcType = void (*)();\par
1571 \par
1572     {\cf17 struct }DOCTEST_INTERFACE TestCase : {\cf17 public} TestCaseData\par
1573     \{\par
1574         funcType m_test; {\cf20 // a function pointer to the test case}\par
1575 \par
1576         String m_type; {\cf20 // for templated test cases - gets appended to the real name}\par
1577         {\cf18 int} m_template_id; {\cf20 // an ID used to distinguish between the different versions of a templated test case}\par
1578         String m_full_name; {\cf20 // contains the name (only for templated test cases!) + the template type}\par
1579 \par
1580         TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
1581                  {\cf17 const} String& type = String(), {\cf18 int} template_id = -1);\par
1582 \par
1583         TestCase({\cf17 const} TestCase& other);\par
1584         TestCase(TestCase&&) = {\cf17 delete};\par
1585 \par
1586         DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
1587         TestCase& operator=(const TestCase& other);\par
1588         DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1589 \par
1590         TestCase& operator=(TestCase&&) = delete;\par
1591 \par
1592         TestCase& operator*(const {\cf18 char}* in);\par
1593 \par
1594         template <typename T>\par
1595         TestCase& operator*(const T& in) \{\par
1596             in.fill(*{\cf17 this});\par
1597             {\cf19 return} *{\cf17 this};\par
1598         \}\par
1599 \par
1600         {\cf18 bool} operator<({\cf17 const} TestCase& other) {\cf17 const};\par
1601 \par
1602         ~TestCase() = {\cf19 default};\par
1603     \};\par
1604 \par
1605     {\cf20 // forward declarations of functions used by the macros}\par
1606     DOCTEST_INTERFACE {\cf18 int}  regTest({\cf17 const} TestCase& tc);\par
1607     DOCTEST_INTERFACE {\cf18 int}  setTestSuite({\cf17 const} TestSuite& ts);\par
1608     DOCTEST_INTERFACE {\cf18 bool} isDebuggerActive();\par
1609 \par
1610     {\cf17 template}<{\cf17 typename} T>\par
1611     {\cf18 int} instantiationHelper({\cf17 const} T&) \{ {\cf19 return} 0; \}\par
1612 \par
1613     {\cf17 namespace }binaryAssertComparison \{\par
1614         {\cf17 enum} Enum\par
1615         \{\par
1616             eq = 0,\par
1617             ne,\par
1618             gt,\par
1619             lt,\par
1620             ge,\par
1621             le\par
1622         \};\par
1623     \} {\cf20 // namespace binaryAssertComparison}\par
1624 \par
1625     {\cf20 // clang-format off}\par
1626     {\cf17 template} <{\cf18 int}, {\cf17 class} L, {\cf17 class} R> {\cf17 struct }RelationalComparator     \{ {\cf18 bool} operator()({\cf17 const} DOCTEST_REF_WRAP(L),     {\cf17 const} DOCTEST_REF_WRAP(R)    ){\cf17  const }\{ {\cf19 return} {\cf17 false};        \} \};\par
1627 \par
1628 {\cf21 #define DOCTEST_BINARY_RELATIONAL_OP(n, op) \\}\par
1629 {\cf21     template <class L, class R> struct RelationalComparator<n, L, R> \{ bool operator()(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) const \{ return op(lhs, rhs); \} \};}\par
1630     {\cf20 // clang-format on}\par
1631 \par
1632     DOCTEST_BINARY_RELATIONAL_OP(0, doctest::detail::eq)\par
1633     DOCTEST_BINARY_RELATIONAL_OP(1, doctest::detail::ne)\par
1634     DOCTEST_BINARY_RELATIONAL_OP(2, doctest::detail::gt)\par
1635     DOCTEST_BINARY_RELATIONAL_OP(3, doctest::detail::lt)\par
1636     DOCTEST_BINARY_RELATIONAL_OP(4, doctest::detail::ge)\par
1637     DOCTEST_BINARY_RELATIONAL_OP(5, doctest::detail::le)\par
1638 \par
1639     {\cf17 struct }DOCTEST_INTERFACE ResultBuilder : {\cf17 public} AssertData\par
1640     \{\par
1641         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1642                       {\cf17 const} {\cf18 char}* exception_type = {\cf22 ""}, {\cf17 const} String& exception_string = {\cf22 ""});\par
1643 \par
1644         ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
1645                       {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string);\par
1646 \par
1647         {\cf18 void} setResult({\cf17 const} Result& res);\par
1648 \par
1649         {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1650         DOCTEST_NOINLINE {\cf18 bool} binary_assert({\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1651                                             {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1652             m_failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1653             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1654                 m_decomp = stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs);\par
1655             \}\par
1656             {\cf19 return} !m_failed;\par
1657         \}\par
1658 \par
1659         {\cf17 template} <{\cf17 typename} L>\par
1660         DOCTEST_NOINLINE {\cf18 bool} unary_assert({\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1661             m_failed = !val;\par
1662 \par
1663             {\cf19 if} (m_at & assertType::is_false) \{ \par
1664                 m_failed = !m_failed;\par
1665             \}\par
1666 \par
1667             {\cf19 if} (m_failed || getContextOptions()->success) \{\par
1668                 m_decomp = (DOCTEST_STRINGIFY(val));\par
1669             \}\par
1670 \par
1671             {\cf19 return} !m_failed;\par
1672         \}\par
1673 \par
1674         {\cf18 void} translateException();\par
1675 \par
1676         {\cf18 bool} log();\par
1677         {\cf18 void} react() {\cf17 const};\par
1678     \};\par
1679 \par
1680     {\cf17 namespace }assertAction \{\par
1681         {\cf17 enum} Enum\par
1682         \{\par
1683             nothing     = 0,\par
1684             dbgbreak    = 1,\par
1685             shouldthrow = 2\par
1686         \};\par
1687     \} {\cf20 // namespace assertAction}\par
1688 \par
1689     DOCTEST_INTERFACE {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad);\par
1690 \par
1691     DOCTEST_INTERFACE {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1692                                          {\cf17 const} {\cf18 char}* expr, {\cf17 const} Result& result);\par
1693 \par
1694 {\cf21 #define DOCTEST_ASSERT_OUT_OF_TESTS(decomp)                                                        \\}\par
1695 {\cf21     do \{                                                                                           \\}\par
1696 {\cf21         if(!is_running_in_test) \{                                                                  \\}\par
1697 {\cf21             if(failed) \{                                                                           \\}\par
1698 {\cf21                 ResultBuilder rb(at, file, line, expr);                                            \\}\par
1699 {\cf21                 rb.m_failed = failed;                                                              \\}\par
1700 {\cf21                 rb.m_decomp = decomp;                                                              \\}\par
1701 {\cf21                 failed_out_of_a_testing_context(rb);                                               \\}\par
1702 {\cf21                 if(isDebuggerActive() && !getContextOptions()->no_breaks)                          \\}\par
1703 {\cf21                     DOCTEST_BREAK_INTO_DEBUGGER();                                                 \\}\par
1704 {\cf21                 if(checkIfShouldThrow(at))                                                         \\}\par
1705 {\cf21                     throwException();                                                              \\}\par
1706 {\cf21             \}                                                                                      \\}\par
1707 {\cf21             return !failed;                                                                        \\}\par
1708 {\cf21         \}                                                                                          \\}\par
1709 {\cf21     \} while(false)}\par
1710 \par
1711 {\cf21 #define DOCTEST_ASSERT_IN_TESTS(decomp)                                                            \\}\par
1712 {\cf21     ResultBuilder rb(at, file, line, expr);                                                        \\}\par
1713 {\cf21     rb.m_failed = failed;                                                                          \\}\par
1714 {\cf21     if(rb.m_failed || getContextOptions()->success)                                                \\}\par
1715 {\cf21         rb.m_decomp = decomp;                                                                      \\}\par
1716 {\cf21     if(rb.log())                                                                                   \\}\par
1717 {\cf21         DOCTEST_BREAK_INTO_DEBUGGER();                                                             \\}\par
1718 {\cf21     if(rb.m_failed && checkIfShouldThrow(at))                                                      \\}\par
1719 {\cf21     throwException()}\par
1720 \par
1721     {\cf17 template} <{\cf18 int} comparison, {\cf17 typename} L, {\cf17 typename} R>\par
1722     DOCTEST_NOINLINE {\cf18 bool} binary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1723                                         {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) lhs,\par
1724                                         {\cf17 const} DOCTEST_REF_WRAP(R) rhs) \{\par
1725         {\cf18 bool} failed = !RelationalComparator<comparison, L, R>()(lhs, rhs);\par
1726 \par
1727         {\cf20 // ###################################################################################}\par
1728         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1729         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1730         {\cf20 // ###################################################################################}\par
1731         DOCTEST_ASSERT_OUT_OF_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1732         DOCTEST_ASSERT_IN_TESTS(stringifyBinaryExpr(lhs, {\cf22 ", "}, rhs));\par
1733         {\cf19 return} !failed;\par
1734     \}\par
1735 \par
1736     {\cf17 template} <{\cf17 typename} L>\par
1737     DOCTEST_NOINLINE {\cf18 bool} unary_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
1738                                        {\cf17 const} {\cf18 char}* expr, {\cf17 const} DOCTEST_REF_WRAP(L) val) \{\par
1739         {\cf18 bool} failed = !val;\par
1740 \par
1741         {\cf19 if}(at & assertType::is_false) \par
1742             failed = !failed;\par
1743 \par
1744         {\cf20 // ###################################################################################}\par
1745         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
1746         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
1747         {\cf20 // ###################################################################################}\par
1748         DOCTEST_ASSERT_OUT_OF_TESTS((DOCTEST_STRINGIFY(val)));\par
1749         DOCTEST_ASSERT_IN_TESTS((DOCTEST_STRINGIFY(val)));\par
1750         {\cf19 return} !failed;\par
1751     \}\par
1752 \par
1753     {\cf17 struct }DOCTEST_INTERFACE IExceptionTranslator\par
1754     \{\par
1755         DOCTEST_DECLARE_INTERFACE(IExceptionTranslator)\par
1756         virtual {\cf18 bool} translate(String&) const = 0;\par
1757     \};\par
1758 \par
1759     template <typename T>\par
1760     class ExceptionTranslator : public IExceptionTranslator \par
1761     \{\par
1762     {\cf17 public}:\par
1763         {\cf17 explicit} ExceptionTranslator(String (*translateFunction)(T))\par
1764                 : m_translateFunction(translateFunction) \{\}\par
1765 \par
1766         {\cf18 bool} translate(String& res){\cf17  const override }\{\par
1767 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1768             {\cf19 try} \{\par
1769                 {\cf19 throw}; {\cf20 // lgtm [cpp/rethrow-no-exception]}\par
1770                 {\cf20 // cppcheck-suppress catchExceptionByValue}\par
1771             \} {\cf19 catch}({\cf17 const} T& ex) \{\par
1772                 res = m_translateFunction(ex); \par
1773                 {\cf19 return} {\cf17 true};\par
1774             \} {\cf19 catch}(...) \{\}         \par
1775 {\cf21 #endif                              }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
1776             {\cf17 static_cast<}{\cf18 void}{\cf17 >}(res); {\cf20 // to silence -Wunused-parameter}\par
1777             {\cf19 return} {\cf17 false};\par
1778         \}\par
1779 \par
1780     {\cf17 private}:\par
1781         String (*m_translateFunction)(T);\par
1782     \};\par
1783 \par
1784     DOCTEST_INTERFACE {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et);\par
1785 \par
1786     {\cf20 // ContextScope base class used to allow implementing methods of ContextScope}\par
1787     {\cf20 // that don't depend on the template parameter in doctest.cpp.}\par
1788     {\cf17 struct }DOCTEST_INTERFACE ContextScopeBase : {\cf17 public} IContextScope \{\par
1789         ContextScopeBase({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1790 \par
1791         ContextScopeBase& operator=({\cf17 const} ContextScopeBase&) = {\cf17 delete};\par
1792         ContextScopeBase& operator=(ContextScopeBase&&) = {\cf17 delete};\par
1793 \par
1794         ~ContextScopeBase() {\cf17 override} = {\cf19 default};\par
1795 \par
1796     {\cf17 protected}:\par
1797         ContextScopeBase();\par
1798         ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept};\par
1799 \par
1800         {\cf18 void} destroy();\par
1801         {\cf18 bool} need_to_destroy\{{\cf17 true}\};\par
1802     \};\par
1803 \par
1804     {\cf17 template} <{\cf17 typename} L> {\cf17 class }ContextScope : {\cf17 public} ContextScopeBase\par
1805     \{\par
1806         L lambda_;\par
1807 \par
1808     {\cf17 public}:\par
1809         {\cf17 explicit} ContextScope({\cf17 const} L &lambda) : lambda_(lambda) \{\}\par
1810         {\cf17 explicit} ContextScope(L&& lambda) : lambda_(static_cast<L&&>(lambda)) \{ \}\par
1811 \par
1812         ContextScope({\cf17 const} ContextScope&) = {\cf17 delete};\par
1813         ContextScope(ContextScope&&) noexcept = default;\par
1814 \par
1815         ContextScope& operator=(const ContextScope&) = delete;\par
1816         ContextScope& operator=(ContextScope&&) = delete;\par
1817 \par
1818         {\cf18 void} stringify(std::ostream* s){\cf17  const override }\{ lambda_(s); \}\par
1819 \par
1820         ~ContextScope(){\cf17  override }\{\par
1821             {\cf19 if} (need_to_destroy) \{\par
1822                 destroy();\par
1823             \}\par
1824         \}\par
1825     \};\par
1826 \par
1827     {\cf17 struct }DOCTEST_INTERFACE MessageBuilder : {\cf17 public} MessageData\par
1828     \{\par
1829         std::ostream* m_stream;\par
1830         {\cf18 bool}          logged = {\cf17 false};\par
1831 \par
1832         MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity);\par
1833 \par
1834         MessageBuilder({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1835         MessageBuilder(MessageBuilder&&) = {\cf17 delete};\par
1836 \par
1837         MessageBuilder& operator=({\cf17 const} MessageBuilder&) = {\cf17 delete};\par
1838         MessageBuilder& operator=(MessageBuilder&&) = {\cf17 delete};\par
1839 \par
1840         ~MessageBuilder();\par
1841 \par
1842         {\cf20 // the preferred way of chaining parameters for stringification}\par
1843 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4866)\par
1844         template <typename T>\par
1845         MessageBuilder& operator,(const T& in) \{\par
1846             *m_stream << (DOCTEST_STRINGIFY(in));\par
1847             {\cf19 return} *{\cf17 this};\par
1848         \}\par
1849 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
1850 \par
1851         {\cf20 // kept here just for backwards-compatibility - the comma operator should be preferred now}\par
1852         {\cf17 template} <{\cf17 typename} T>\par
1853         MessageBuilder& operator<<({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1854 \par
1855         {\cf20 // the `,` operator has the lowest operator precedence - if `<<` is used by the user then}\par
1856         {\cf20 // the `,` operator will be called last which is not what we want and thus the `*` operator}\par
1857         {\cf20 // is used first (has higher operator precedence compared to `<<`) so that we guarantee that}\par
1858         {\cf20 // an operator of the MessageBuilder class is called first before the rest of the parameters}\par
1859         {\cf17 template} <{\cf17 typename} T>\par
1860         MessageBuilder& operator*({\cf17 const} T& in) \{ {\cf19 return} this->operator,(in); \}\par
1861 \par
1862         {\cf18 bool} log();\par
1863         {\cf18 void} react();\par
1864     \};\par
1865 \par
1866     {\cf17 template} <{\cf17 typename} L>\par
1867     ContextScope<L> MakeContextScope({\cf17 const} L &lambda) \{\par
1868         {\cf19 return} ContextScope<L>(lambda);\par
1869     \}\par
1870 \} {\cf20 // namespace detail}\par
1871 \par
1872 {\cf21 #define DOCTEST_DEFINE_DECORATOR(name, type, def)                                                  \\}\par
1873 {\cf21     struct name                                                                                    \\}\par
1874 {\cf21     \{                                                                                              \\}\par
1875 {\cf21         type data;                                                                                 \\}\par
1876 {\cf21         name(type in = def)                                                                        \\}\par
1877 {\cf21                 : data(in) \{\}                                                                      \\}\par
1878 {\cf21         void fill(detail::TestCase& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}           \\}\par
1879 {\cf21         void fill(detail::TestSuite& state) const \{ state.DOCTEST_CAT(m_, name) = data; \}          \\}\par
1880 {\cf21     \}}\par
1881 \par
1882 DOCTEST_DEFINE_DECORATOR(test_suite, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1883 DOCTEST_DEFINE_DECORATOR(description, {\cf17 const} {\cf18 char}*, {\cf22 ""});\par
1884 DOCTEST_DEFINE_DECORATOR(skip, {\cf18 bool}, {\cf17 true});\par
1885 DOCTEST_DEFINE_DECORATOR(no_breaks, {\cf18 bool}, {\cf17 true});\par
1886 DOCTEST_DEFINE_DECORATOR(no_output, {\cf18 bool}, {\cf17 true});\par
1887 DOCTEST_DEFINE_DECORATOR(timeout, {\cf18 double}, 0);\par
1888 DOCTEST_DEFINE_DECORATOR(may_fail, {\cf18 bool}, {\cf17 true});\par
1889 DOCTEST_DEFINE_DECORATOR(should_fail, {\cf18 bool}, {\cf17 true});\par
1890 DOCTEST_DEFINE_DECORATOR(expected_failures, {\cf18 int}, 0);\par
1891 \par
1892 {\cf17 template} <{\cf17 typename} T>\par
1893 {\cf18 int} registerExceptionTranslator(String (*translateFunction)(T)) \{\par
1894     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wexit-time-destructors"})\par
1895     static detail::ExceptionTranslator<T> exceptionTranslator(translateFunction);\par
1896     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
1897     detail::registerExceptionTranslatorImpl(&exceptionTranslator);\par
1898     return 0;\par
1899 \}\par
1900 \par
1901 \} {\cf20 // namespace doctest}\par
1902 \par
1903 {\cf20 // in a separate namespace outside of doctest because the DOCTEST_TEST_SUITE macro}\par
1904 {\cf20 // introduces an anonymous namespace in which getCurrentTestSuite gets overridden}\par
1905 namespace doctest_detail_test_suite_ns \{\par
1906 DOCTEST_INTERFACE doctest::detail::TestSuite& getCurrentTestSuite();\par
1907 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
1908 \par
1909 {\cf17 namespace }doctest \{\par
1910 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1911 {\cf17 template} <{\cf17 typename} T>\par
1912 {\cf18 int} registerExceptionTranslator(String (*)(T)) \{\par
1913     {\cf19 return} 0;\par
1914 \}\par
1915 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
1916 \par
1917 {\cf17 namespace }detail \{\par
1918     {\cf17 using }assert_handler = void (*)({\cf17 const} AssertData&);\par
1919     {\cf17 struct }ContextState;\par
1920 \} {\cf20 // namespace detail}\par
1921 \par
1922 {\cf17 class }DOCTEST_INTERFACE Context\par
1923 \{\par
1924     detail::ContextState* p;\par
1925 \par
1926     {\cf18 void} parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults = {\cf17 false});\par
1927 \par
1928 {\cf17 public}:\par
1929     {\cf17 explicit} Context({\cf18 int} argc = 0, {\cf17 const} {\cf18 char}* {\cf17 const}* argv = {\cf17 nullptr});\par
1930 \par
1931     Context({\cf17 const} Context&) = {\cf17 delete};\par
1932     Context(Context&&) = {\cf17 delete};\par
1933 \par
1934     Context& operator=({\cf17 const} Context&) = {\cf17 delete};\par
1935     Context& operator=(Context&&) = {\cf17 delete};\par
1936 \par
1937     ~Context(); {\cf20 // NOLINT(performance-trivially-destructible)}\par
1938 \par
1939     {\cf18 void} applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv);\par
1940 \par
1941     {\cf18 void} addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value);\par
1942     {\cf18 void} clearFilters();\par
1943     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value);\par
1944     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value);\par
1945     {\cf18 void} setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value);\par
1946 \par
1947     {\cf18 bool} shouldExit();\par
1948 \par
1949     {\cf18 void} setAsDefaultForAssertsOutOfTestCases();\par
1950 \par
1951     {\cf18 void} setAssertHandler(detail::assert_handler ah);\par
1952 \par
1953     {\cf18 void} setCout(std::ostream* out);\par
1954 \par
1955     {\cf18 int} run();\par
1956 \};\par
1957 \par
1958 {\cf17 namespace }TestCaseFailureReason \{\par
1959     {\cf17 enum} Enum\par
1960     \{\par
1961         None                     = 0,\par
1962         AssertFailure            = 1,   {\cf20 // an assertion has failed in the test case}\par
1963         Exception                = 2,   {\cf20 // test case threw an exception}\par
1964         Crash                    = 4,   {\cf20 // a crash...}\par
1965         TooManyFailedAsserts     = 8,   {\cf20 // the abort-after option}\par
1966         Timeout                  = 16,  {\cf20 // see the timeout decorator}\par
1967         ShouldHaveFailedButDidnt = 32,  {\cf20 // see the should_fail decorator}\par
1968         ShouldHaveFailedAndDid   = 64,  {\cf20 // see the should_fail decorator}\par
1969         DidntFailExactlyNumTimes = 128, {\cf20 // see the expected_failures decorator}\par
1970         FailedExactlyNumTimes    = 256, {\cf20 // see the expected_failures decorator}\par
1971         CouldHaveFailedAndDid    = 512  {\cf20 // see the may_fail decorator}\par
1972     \};\par
1973 \} {\cf20 // namespace TestCaseFailureReason}\par
1974 \par
1975 {\cf17 struct }DOCTEST_INTERFACE CurrentTestCaseStats\par
1976 \{\par
1977     {\cf18 int}    numAssertsCurrentTest;\par
1978     {\cf18 int}    numAssertsFailedCurrentTest;\par
1979     {\cf18 double} seconds;\par
1980     {\cf18 int}    failure_flags; {\cf20 // use TestCaseFailureReason::Enum}\par
1981     {\cf18 bool}   testCaseSuccess;\par
1982 \};\par
1983 \par
1984 {\cf17 struct }DOCTEST_INTERFACE TestCaseException\par
1985 \{\par
1986     String error_string;\par
1987     {\cf18 bool}   is_crash;\par
1988 \};\par
1989 \par
1990 {\cf17 struct }DOCTEST_INTERFACE TestRunStats\par
1991 \{\par
1992     {\cf18 unsigned} numTestCases;\par
1993     {\cf18 unsigned} numTestCasesPassingFilters;\par
1994     {\cf18 unsigned} numTestSuitesPassingFilters;\par
1995     {\cf18 unsigned} numTestCasesFailed;\par
1996     {\cf18 int}      numAsserts;\par
1997     {\cf18 int}      numAssertsFailed;\par
1998 \};\par
1999 \par
2000 {\cf17 struct }QueryData\par
2001 \{\par
2002     {\cf17 const} TestRunStats*  run_stats = {\cf17 nullptr};\par
2003     {\cf17 const} TestCaseData** data      = {\cf17 nullptr};\par
2004     {\cf18 unsigned}             num_data  = 0;\par
2005 \};\par
2006 \par
2007 {\cf17 struct }DOCTEST_INTERFACE IReporter\par
2008 \{\par
2009     {\cf20 // The constructor has to accept "const ContextOptions&" as a single argument}\par
2010     {\cf20 // which has most of the options for the run + a pointer to the stdout stream}\par
2011     {\cf20 // Reporter(const ContextOptions& in)}\par
2012 \par
2013     {\cf20 // called when a query should be reported (listing test cases, printing the version, etc.)}\par
2014     {\cf17 virtual} {\cf18 void} report_query({\cf17 const} QueryData&) = 0;\par
2015 \par
2016     {\cf20 // called when the whole test run starts}\par
2017     {\cf17 virtual} {\cf18 void} test_run_start() = 0;\par
2018     {\cf20 // called when the whole test run ends (caching a pointer to the input doesn't make sense here)}\par
2019     {\cf17 virtual} {\cf18 void} test_run_end({\cf17 const} TestRunStats&) = 0;\par
2020 \par
2021     {\cf20 // called when a test case is started (safe to cache a pointer to the input)}\par
2022     {\cf17 virtual} {\cf18 void} test_case_start({\cf17 const} TestCaseData&) = 0;\par
2023     {\cf20 // called when a test case is reentered because of unfinished subcases (safe to cache a pointer to the input)}\par
2024     {\cf17 virtual} {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&) = 0;\par
2025     {\cf20 // called when a test case has ended}\par
2026     {\cf17 virtual} {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&) = 0;\par
2027 \par
2028     {\cf20 // called when an exception is thrown from the test case (or it crashes)}\par
2029     {\cf17 virtual} {\cf18 void} test_case_exception({\cf17 const} TestCaseException&) = 0;\par
2030 \par
2031     {\cf20 // called whenever a subcase is entered (don't cache pointers to the input)}\par
2032     {\cf17 virtual} {\cf18 void} subcase_start({\cf17 const} SubcaseSignature&) = 0;\par
2033     {\cf20 // called whenever a subcase is exited (don't cache pointers to the input)}\par
2034     {\cf17 virtual} {\cf18 void} subcase_end() = 0;\par
2035 \par
2036     {\cf20 // called for each assert (don't cache pointers to the input)}\par
2037     {\cf17 virtual} {\cf18 void} log_assert({\cf17 const} AssertData&) = 0;\par
2038     {\cf20 // called for each message (don't cache pointers to the input)}\par
2039     {\cf17 virtual} {\cf18 void} log_message({\cf17 const} MessageData&) = 0;\par
2040 \par
2041     {\cf20 // called when a test case is skipped either because it doesn't pass the filters, has a skip decorator}\par
2042     {\cf20 // or isn't in the execution range (between first and last) (safe to cache a pointer to the input)}\par
2043     {\cf17 virtual} {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&) = 0;\par
2044 \par
2045     DOCTEST_DECLARE_INTERFACE(IReporter)\par
2046 \par
2047     {\cf20 // can obtain all currently active contexts and stringify them if one wishes to do so}\par
2048     static {\cf18 int}                         get_num_active_contexts();\par
2049     static const IContextScope* const* get_active_contexts();\par
2050 \par
2051     {\cf20 // can iterate through contexts which have been stringified automatically in their destructors when an exception has been thrown}\par
2052     static {\cf18 int}           get_num_stringified_contexts();\par
2053     static const String* get_stringified_contexts();\par
2054 \};\par
2055 \par
2056 namespace detail \{\par
2057     {\cf17 using }reporterCreatorFunc =  IReporter* (*)({\cf17 const} ContextOptions&);\par
2058 \par
2059     DOCTEST_INTERFACE {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} prio, reporterCreatorFunc c, {\cf18 bool} isReporter);\par
2060 \par
2061     {\cf17 template} <{\cf17 typename} Reporter>\par
2062     IReporter* reporterCreator({\cf17 const} ContextOptions& o) \{\par
2063         {\cf19 return} {\cf17 new} Reporter(o);\par
2064     \}\par
2065 \} {\cf20 // namespace detail}\par
2066 \par
2067 {\cf17 template} <{\cf17 typename} Reporter>\par
2068 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, {\cf18 bool} isReporter) \{\par
2069     detail::registerReporterImpl(name, priority, detail::reporterCreator<Reporter>, isReporter);\par
2070     {\cf19 return} 0;\par
2071 \}\par
2072 \} {\cf20 // namespace doctest}\par
2073 \par
2074 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2075 {\cf21 #define DOCTEST_FUNC_EMPTY [] \{ return false; \}()}\par
2076 {\cf21 #else}\par
2077 {\cf21 #define DOCTEST_FUNC_EMPTY (void)0}\par
2078 {\cf21 #endif}\par
2079 \par
2080 {\cf20 // if registering is not disabled}\par
2081 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
2082 \par
2083 {\cf21 #ifdef DOCTEST_CONFIG_ASSERTS_RETURN_VALUES}\par
2084 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN [&]}\par
2085 {\cf21 #define DOCTEST_FUNC_SCOPE_END ()}\par
2086 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) return v}\par
2087 {\cf21 #else}\par
2088 {\cf21 #define DOCTEST_FUNC_SCOPE_BEGIN do}\par
2089 {\cf21 #define DOCTEST_FUNC_SCOPE_END while(false)}\par
2090 {\cf21 #define DOCTEST_FUNC_SCOPE_RET(v) (void)0}\par
2091 {\cf21 #endif}\par
2092 \par
2093 {\cf20 // common code in asserts - for convenience}\par
2094 {\cf21 #define DOCTEST_ASSERT_LOG_REACT_RETURN(b)                                                         \\}\par
2095 {\cf21     if(b.log()) DOCTEST_BREAK_INTO_DEBUGGER();                                                     \\}\par
2096 {\cf21     b.react();                                                                                     \\}\par
2097 {\cf21     DOCTEST_FUNC_SCOPE_RET(!b.m_failed)}\par
2098 \par
2099 {\cf21 #ifdef DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2100 {\cf21 #define DOCTEST_WRAP_IN_TRY(x) x;}\par
2101 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2102 {\cf21 #define DOCTEST_WRAP_IN_TRY(x)                                                                     \\}\par
2103 {\cf21     try \{                                                                                          \\}\par
2104 {\cf21         x;                                                                                         \\}\par
2105 {\cf21     \} catch(...) \{ DOCTEST_RB.translateException(); \}}\par
2106 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_TRY_CATCH_IN_ASSERTS}\par
2107 \par
2108 {\cf21 #ifdef DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2109 {\cf21 #define DOCTEST_CAST_TO_VOID(...)                                                                  \\}\par
2110 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wuseless-cast")                                       \\}\par
2111 {\cf21     static_cast<void>(__VA_ARGS__);                                                                \\}\par
2112 {\cf21     DOCTEST_GCC_SUPPRESS_WARNING_POP}\par
2113 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2114 {\cf21 #define DOCTEST_CAST_TO_VOID(...) __VA_ARGS__;}\par
2115 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_VOID_CAST_EXPRESSIONS}\par
2116 \par
2117 {\cf20 // registers the test by initializing a dummy var with a function}\par
2118 {\cf21 #define DOCTEST_REGISTER_FUNCTION(global_prefix, f, decorators)                                    \\}\par
2119 {\cf21     global_prefix DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT */}{\cf21     \\}\par
2120 {\cf21             doctest::detail::regTest(                                                              \\}\par
2121 {\cf21                     doctest::detail::TestCase(                                                     \\}\par
2122 {\cf21                             f, __FILE__, __LINE__,                                                 \\}\par
2123 {\cf21                             doctest_detail_test_suite_ns::getCurrentTestSuite()) *                 \\}\par
2124 {\cf21                     decorators))}\par
2125 \par
2126 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, decorators)                                     \\}\par
2127 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2128 {\cf21         struct der : public base                                                                   \\}\par
2129 {\cf21         \{                                                                                          \\}\par
2130 {\cf21             void f();                                                                              \\}\par
2131 {\cf21         \};                                                                                         \\}\par
2132 {\cf21         static inline DOCTEST_NOINLINE void func() \{                                               \\}\par
2133 {\cf21             der v;                                                                                 \\}\par
2134 {\cf21             v.f();                                                                                 \\}\par
2135 {\cf21         \}                                                                                          \\}\par
2136 {\cf21         DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, func, decorators)                                 \\}\par
2137 {\cf21     \}                                                                                              \\}\par
2138 {\cf21     inline DOCTEST_NOINLINE void der::f() }{\cf20 // NOLINT(misc-definitions-in-headers)}\par
2139 \par
2140 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, decorators)                                        \\}\par
2141 {\cf21     static void f();                                                                               \\}\par
2142 {\cf21     DOCTEST_REGISTER_FUNCTION(DOCTEST_EMPTY, f, decorators)                                        \\}\par
2143 {\cf21     static void f()}\par
2144 \par
2145 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(f, proxy, decorators)                        \\}\par
2146 {\cf21     static doctest::detail::funcType proxy() \{ return f; \}                                         \\}\par
2147 {\cf21     DOCTEST_REGISTER_FUNCTION(inline, proxy(), decorators)                                         \\}\par
2148 {\cf21     static void f()}\par
2149 \par
2150 {\cf20 // for registering tests}\par
2151 {\cf21 #define DOCTEST_TEST_CASE(decorators)                                                              \\}\par
2152 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2153 \par
2154 {\cf20 // for registering tests in classes - requires C++17 for inline variables!}\par
2155 {\cf21 #if DOCTEST_CPLUSPLUS >= 201703L}\par
2156 {\cf21 #define DOCTEST_TEST_CASE_CLASS(decorators)                                                        \\}\par
2157 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION_IN_CLASS(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_),           \\}\par
2158 {\cf21                                                   DOCTEST_ANONYMOUS(DOCTEST_ANON_PROXY_),          \\}\par
2159 {\cf21                                                   decorators)}\par
2160 {\cf21 #else }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2161 {\cf21 #define DOCTEST_TEST_CASE_CLASS(...)                                                               \\}\par
2162 {\cf21     TEST_CASES_CAN_BE_REGISTERED_IN_CLASSES_ONLY_IN_CPP17_MODE_OR_WITH_VS_2017_OR_NEWER}\par
2163 {\cf21 #endif }{\cf20 // DOCTEST_TEST_CASE_CLASS}\par
2164 \par
2165 {\cf20 // for registering tests with a fixture}\par
2166 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(c, decorators)                                                   \\}\par
2167 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), c,                           \\}\par
2168 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), decorators)}\par
2169 \par
2170 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2171 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...)                                                        \\}\par
2172 {\cf21     namespace doctest \{                                                                            \\}\par
2173 {\cf21         template <>                                                                                \\}\par
2174 {\cf21         inline String toString<__VA_ARGS__>() \{                                                    \\}\par
2175 {\cf21             return str;                                                                            \\}\par
2176 {\cf21         \}                                                                                          \\}\par
2177 {\cf21     \}                                                                                              \\}\par
2178 {\cf21     static_assert(true, "")}\par
2179 \par
2180 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING_AS(#__VA_ARGS__, __VA_ARGS__)}\par
2181 \par
2182 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, iter, func)                                 \\}\par
2183 {\cf21     template <typename T>                                                                          \\}\par
2184 {\cf21     static void func();                                                                            \\}\par
2185 {\cf21     namespace \{ }{\cf20 /* NOLINT */}{\cf21                                                                        \\}\par
2186 {\cf21         template <typename Tuple>                                                                  \\}\par
2187 {\cf21         struct iter;                                                                               \\}\par
2188 {\cf21         template <typename Type, typename... Rest>                                                 \\}\par
2189 {\cf21         struct iter<std::tuple<Type, Rest...>>                                                     \\}\par
2190 {\cf21         \{                                                                                          \\}\par
2191 {\cf21             iter(const char* file, unsigned line, int index) \{                                     \\}\par
2192 {\cf21                 doctest::detail::regTest(doctest::detail::TestCase(func<Type>, file, line,         \\}\par
2193 {\cf21                                             doctest_detail_test_suite_ns::getCurrentTestSuite(),   \\}\par
2194 {\cf21                                             doctest::toString<Type>(),                             \\}\par
2195 {\cf21                                             int(line) * 1000 + index)                              \\}\par
2196 {\cf21                                          * dec);                                                   \\}\par
2197 {\cf21                 iter<std::tuple<Rest...>>(file, line, index + 1);                                  \\}\par
2198 {\cf21             \}                                                                                      \\}\par
2199 {\cf21         \};                                                                                         \\}\par
2200 {\cf21         template <>                                                                                \\}\par
2201 {\cf21         struct iter<std::tuple<>>                                                                  \\}\par
2202 {\cf21         \{                                                                                          \\}\par
2203 {\cf21             iter(const char*, unsigned, int) \{\}                                                    \\}\par
2204 {\cf21         \};                                                                                         \\}\par
2205 {\cf21     \}                                                                                              \\}\par
2206 {\cf21     template <typename T>                                                                          \\}\par
2207 {\cf21     static void func()}\par
2208 \par
2209 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(dec, T, id)                                              \\}\par
2210 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(id, ITERATOR),                      \\}\par
2211 {\cf21                                            DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_))}\par
2212 \par
2213 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, anon, ...)                                 \\}\par
2214 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_CAT(anon, DUMMY), }{\cf20 /* NOLINT(cert-err58-cpp, fuchsia-statically-constructed-objects) */}{\cf21  \\}\par
2215 {\cf21         doctest::detail::instantiationHelper(                                                      \\}\par
2216 {\cf21             DOCTEST_CAT(id, ITERATOR)<__VA_ARGS__>(__FILE__, __LINE__, 0)))}\par
2217 \par
2218 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...)                                                 \\}\par
2219 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), std::tuple<__VA_ARGS__>) \\}\par
2220 {\cf21     static_assert(true, "")}\par
2221 \par
2222 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...)                                                  \\}\par
2223 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(id, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__) \\}\par
2224 {\cf21     static_assert(true, "")}\par
2225 \par
2226 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, anon, ...)                                         \\}\par
2227 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_DEFINE_IMPL(dec, T, DOCTEST_CAT(anon, ITERATOR), anon);             \\}\par
2228 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE_IMPL(anon, anon, std::tuple<__VA_ARGS__>)               \\}\par
2229 {\cf21     template <typename T>                                                                          \\}\par
2230 {\cf21     static void anon()}\par
2231 \par
2232 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(dec, T, ...)                                                    \\}\par
2233 {\cf21     DOCTEST_TEST_CASE_TEMPLATE_IMPL(dec, T, DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_), __VA_ARGS__)}\par
2234 \par
2235 {\cf20 // for subcases}\par
2236 {\cf21 #define DOCTEST_SUBCASE(name)                                                                      \\}\par
2237 {\cf21     if(const doctest::detail::Subcase & DOCTEST_ANONYMOUS(DOCTEST_ANON_SUBCASE_) DOCTEST_UNUSED =  \\}\par
2238 {\cf21                doctest::detail::Subcase(name, __FILE__, __LINE__))}\par
2239 \par
2240 {\cf20 // for grouping tests in test suites by using code blocks}\par
2241 {\cf21 #define DOCTEST_TEST_SUITE_IMPL(decorators, ns_name)                                               \\}\par
2242 {\cf21     namespace ns_name \{ namespace doctest_detail_test_suite_ns \{                                   \\}\par
2243 {\cf21             static DOCTEST_NOINLINE doctest::detail::TestSuite& getCurrentTestSuite() noexcept \{   \\}\par
2244 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4640)                                      \\}\par
2245 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wexit-time-destructors")                \\}\par
2246 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wmissing-field-initializers")             \\}\par
2247 {\cf21                 static doctest::detail::TestSuite data\{\};                                          \\}\par
2248 {\cf21                 static bool                       inited = false;                                  \\}\par
2249 {\cf21                 DOCTEST_MSVC_SUPPRESS_WARNING_POP                                                  \\}\par
2250 {\cf21                 DOCTEST_CLANG_SUPPRESS_WARNING_POP                                                 \\}\par
2251 {\cf21                 DOCTEST_GCC_SUPPRESS_WARNING_POP                                                   \\}\par
2252 {\cf21                 if(!inited) \{                                                                      \\}\par
2253 {\cf21                     data* decorators;                                                              \\}\par
2254 {\cf21                     inited = true;                                                                 \\}\par
2255 {\cf21                 \}                                                                                  \\}\par
2256 {\cf21                 return data;                                                                       \\}\par
2257 {\cf21             \}                                                                                      \\}\par
2258 {\cf21         \}                                                                                          \\}\par
2259 {\cf21     \}                                                                                              \\}\par
2260 {\cf21     namespace ns_name}\par
2261 \par
2262 {\cf21 #define DOCTEST_TEST_SUITE(decorators)                                                             \\}\par
2263 {\cf21     DOCTEST_TEST_SUITE_IMPL(decorators, DOCTEST_ANONYMOUS(DOCTEST_ANON_SUITE_))}\par
2264 \par
2265 {\cf20 // for starting a testsuite block}\par
2266 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(decorators)                                                       \\}\par
2267 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2268 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * decorators))              \\}\par
2269 {\cf21     static_assert(true, "")}\par
2270 \par
2271 {\cf20 // for ending a testsuite block}\par
2272 {\cf21 #define DOCTEST_TEST_SUITE_END                                                                     \\}\par
2273 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_VAR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21   \\}\par
2274 {\cf21             doctest::detail::setTestSuite(doctest::detail::TestSuite() * ""))                      \\}\par
2275 {\cf21     using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2276 \par
2277 {\cf20 // for registering exception translators}\par
2278 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(translatorName, signature)                      \\}\par
2279 {\cf21     inline doctest::String translatorName(signature);                                              \\}\par
2280 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2281 {\cf21             doctest::registerExceptionTranslator(translatorName))                                  \\}\par
2282 {\cf21     doctest::String translatorName(signature)}\par
2283 \par
2284 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2285 {\cf21     DOCTEST_REGISTER_EXCEPTION_TRANSLATOR_IMPL(DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_),        \\}\par
2286 {\cf21                                                signature)}\par
2287 \par
2288 {\cf20 // for registering reporters}\par
2289 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)                                        \\}\par
2290 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2291 {\cf21             doctest::registerReporter<reporter>(name, priority, true))                             \\}\par
2292 {\cf21     static_assert(true, "")}\par
2293 \par
2294 {\cf20 // for registering listeners}\par
2295 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)                                        \\}\par
2296 {\cf21     DOCTEST_GLOBAL_NO_WARNINGS(DOCTEST_ANONYMOUS(DOCTEST_ANON_REPORTER_), }{\cf20 /* NOLINT(cert-err58-cpp) */}{\cf21  \\}\par
2297 {\cf21             doctest::registerReporter<reporter>(name, priority, false))                            \\}\par
2298 {\cf21     static_assert(true, "")}\par
2299 \par
2300 {\cf20 // clang-format off}\par
2301 {\cf20 // for logging - disabling formatting because it's important to have these on 2 separate lines - see PR #557}\par
2302 {\cf21 #define DOCTEST_INFO(...)                                                                          \\}\par
2303 {\cf21     DOCTEST_INFO_IMPL(DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_),                                         \\}\par
2304 {\cf21                       DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_OTHER_),                                   \\}\par
2305 {\cf21                       __VA_ARGS__)}\par
2306 {\cf20 // clang-format on}\par
2307 \par
2308 {\cf21 #define DOCTEST_INFO_IMPL(mb_name, s_name, ...)                                       \\}\par
2309 {\cf21     auto DOCTEST_ANONYMOUS(DOCTEST_CAPTURE_) = doctest::detail::MakeContextScope(                  \\}\par
2310 {\cf21         [&](std::ostream* s_name) \{                                                                \\}\par
2311 {\cf21         doctest::detail::MessageBuilder mb_name(__FILE__, __LINE__, doctest::assertType::is_warn); \\}\par
2312 {\cf21         mb_name.m_stream = s_name;                                                                 \\}\par
2313 {\cf21         mb_name * __VA_ARGS__;                                                                     \\}\par
2314 {\cf21     \})}\par
2315 \par
2316 {\cf21 #define DOCTEST_CAPTURE(x) DOCTEST_INFO(#x " := ", x)}\par
2317 \par
2318 {\cf21 #define DOCTEST_ADD_AT_IMPL(type, file, line, mb, ...)                                             \\}\par
2319 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2320 {\cf21         doctest::detail::MessageBuilder mb(file, line, doctest::assertType::type);                 \\}\par
2321 {\cf21         mb * __VA_ARGS__;                                                                          \\}\par
2322 {\cf21         if(mb.log())                                                                               \\}\par
2323 {\cf21             DOCTEST_BREAK_INTO_DEBUGGER();                                                         \\}\par
2324 {\cf21         mb.react();                                                                                \\}\par
2325 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2326 \par
2327 {\cf20 // clang-format off}\par
2328 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_warn, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2329 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_check, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2330 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_AT_IMPL(is_require, file, line, DOCTEST_ANONYMOUS(DOCTEST_MESSAGE_), __VA_ARGS__)}\par
2331 {\cf20 // clang-format on}\par
2332 \par
2333 {\cf21 #define DOCTEST_MESSAGE(...) DOCTEST_ADD_MESSAGE_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2334 {\cf21 #define DOCTEST_FAIL_CHECK(...) DOCTEST_ADD_FAIL_CHECK_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2335 {\cf21 #define DOCTEST_FAIL(...) DOCTEST_ADD_FAIL_AT(__FILE__, __LINE__, __VA_ARGS__)}\par
2336 \par
2337 {\cf21 #define DOCTEST_TO_LVALUE(...) __VA_ARGS__ }{\cf20 // Not removed to keep backwards compatibility.}\par
2338 \par
2339 {\cf21 #ifndef DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2340 \par
2341 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2(assert_type, ...)                                               \\}\par
2342 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2343 {\cf21     }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21                                   \\}\par
2344 {\cf21     doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,          \\}\par
2345 {\cf21                                                __LINE__, #__VA_ARGS__);                            \\}\par
2346 {\cf21     DOCTEST_WRAP_IN_TRY(DOCTEST_RB.setResult(                                                      \\}\par
2347 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2348 {\cf21             << __VA_ARGS__)) }{\cf20 /* NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks) */}{\cf21          \\}\par
2349 {\cf21     DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB)                                                    \\}\par
2350 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2351 \par
2352 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2353 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2354 {\cf21         DOCTEST_ASSERT_IMPLEMENT_2(assert_type, __VA_ARGS__);                                      \\}\par
2355 {\cf21     \} DOCTEST_FUNC_SCOPE_END }{\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
2356 \par
2357 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comp, ...)                                              \\}\par
2358 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2359 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2360 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2361 {\cf21         DOCTEST_WRAP_IN_TRY(                                                                       \\}\par
2362 {\cf21                 DOCTEST_RB.binary_assert<doctest::detail::binaryAssertComparison::comp>(           \\}\par
2363 {\cf21                         __VA_ARGS__))                                                              \\}\par
2364 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2365 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2366 \par
2367 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2368 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2369 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2370 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2371 {\cf21         DOCTEST_WRAP_IN_TRY(DOCTEST_RB.unary_assert(__VA_ARGS__))                                  \\}\par
2372 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2373 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2374 \par
2375 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2376 \par
2377 {\cf20 // necessary for <ASSERT>_MESSAGE}\par
2378 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_2 DOCTEST_ASSERT_IMPLEMENT_1}\par
2379 \par
2380 {\cf21 #define DOCTEST_ASSERT_IMPLEMENT_1(assert_type, ...)                                               \\}\par
2381 {\cf21     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Woverloaded-shift-op-parentheses")                  \\}\par
2382 {\cf21     doctest::detail::decomp_assert(                                                                \\}\par
2383 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__,                    \\}\par
2384 {\cf21             doctest::detail::ExpressionDecomposer(doctest::assertType::assert_type)                \\}\par
2385 {\cf21                     << __VA_ARGS__) DOCTEST_CLANG_SUPPRESS_WARNING_POP}\par
2386 \par
2387 {\cf21 #define DOCTEST_BINARY_ASSERT(assert_type, comparison, ...)                                        \\}\par
2388 {\cf21     doctest::detail::binary_assert<doctest::detail::binaryAssertComparison::comparison>(           \\}\par
2389 {\cf21             doctest::assertType::assert_type, __FILE__, __LINE__, #__VA_ARGS__, __VA_ARGS__)}\par
2390 \par
2391 {\cf21 #define DOCTEST_UNARY_ASSERT(assert_type, ...)                                                     \\}\par
2392 {\cf21     doctest::detail::unary_assert(doctest::assertType::assert_type, __FILE__, __LINE__,            \\}\par
2393 {\cf21                                   #__VA_ARGS__, __VA_ARGS__)}\par
2394 \par
2395 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_SUPER_FAST_ASSERTS}\par
2396 \par
2397 {\cf21 #define DOCTEST_WARN(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN, __VA_ARGS__)}\par
2398 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK, __VA_ARGS__)}\par
2399 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE, __VA_ARGS__)}\par
2400 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_WARN_FALSE, __VA_ARGS__)}\par
2401 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_CHECK_FALSE, __VA_ARGS__)}\par
2402 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_ASSERT_IMPLEMENT_1(DT_REQUIRE_FALSE, __VA_ARGS__)}\par
2403 \par
2404 {\cf20 // clang-format off}\par
2405 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2406 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2407 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2408 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_WARN_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2409 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_CHECK_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2410 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_ASSERT_IMPLEMENT_2(DT_REQUIRE_FALSE, cond); \} DOCTEST_FUNC_SCOPE_END}\par
2411 {\cf20 // clang-format on}\par
2412 \par
2413 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_BINARY_ASSERT(DT_WARN_EQ, eq, __VA_ARGS__)}\par
2414 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_BINARY_ASSERT(DT_CHECK_EQ, eq, __VA_ARGS__)}\par
2415 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_EQ, eq, __VA_ARGS__)}\par
2416 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_BINARY_ASSERT(DT_WARN_NE, ne, __VA_ARGS__)}\par
2417 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_NE, ne, __VA_ARGS__)}\par
2418 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_NE, ne, __VA_ARGS__)}\par
2419 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_BINARY_ASSERT(DT_WARN_GT, gt, __VA_ARGS__)}\par
2420 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GT, gt, __VA_ARGS__)}\par
2421 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GT, gt, __VA_ARGS__)}\par
2422 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_BINARY_ASSERT(DT_WARN_LT, lt, __VA_ARGS__)}\par
2423 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LT, lt, __VA_ARGS__)}\par
2424 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LT, lt, __VA_ARGS__)}\par
2425 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_BINARY_ASSERT(DT_WARN_GE, ge, __VA_ARGS__)}\par
2426 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_GE, ge, __VA_ARGS__)}\par
2427 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_GE, ge, __VA_ARGS__)}\par
2428 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_BINARY_ASSERT(DT_WARN_LE, le, __VA_ARGS__)}\par
2429 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_BINARY_ASSERT(DT_CHECK_LE, le, __VA_ARGS__)}\par
2430 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_BINARY_ASSERT(DT_REQUIRE_LE, le, __VA_ARGS__)}\par
2431 \par
2432 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY, __VA_ARGS__)}\par
2433 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY, __VA_ARGS__)}\par
2434 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY, __VA_ARGS__)}\par
2435 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_WARN_UNARY_FALSE, __VA_ARGS__)}\par
2436 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_CHECK_UNARY_FALSE, __VA_ARGS__)}\par
2437 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_UNARY_ASSERT(DT_REQUIRE_UNARY_FALSE, __VA_ARGS__)}\par
2438 \par
2439 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2440 \par
2441 {\cf21 #define DOCTEST_ASSERT_THROWS_AS(expr, assert_type, message, ...)                                  \\}\par
2442 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2443 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2444 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2445 {\cf21                                                        __LINE__, #expr, #__VA_ARGS__, message);    \\}\par
2446 {\cf21             try \{                                                                                  \\}\par
2447 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2448 {\cf21             \} catch(const typename doctest::detail::types::remove_const<                           \\}\par
2449 {\cf21                     typename doctest::detail::types::remove_reference<__VA_ARGS__>::type>::type&) \{\\}\par
2450 {\cf21                 DOCTEST_RB.translateException();                                                   \\}\par
2451 {\cf21                 DOCTEST_RB.m_threw_as = true;                                                      \\}\par
2452 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2453 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2454 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2455 {\cf21             DOCTEST_FUNC_SCOPE_RET(false);                                                         \\}\par
2456 {\cf21         \}                                                                                          \\}\par
2457 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2458 \par
2459 {\cf21 #define DOCTEST_ASSERT_THROWS_WITH(expr, expr_str, assert_type, ...)                               \\}\par
2460 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2461 {\cf21         if(!doctest::getContextOptions()->no_throw) \{                                              \\}\par
2462 {\cf21             doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,  \\}\par
2463 {\cf21                                                        __LINE__, expr_str, "", __VA_ARGS__);       \\}\par
2464 {\cf21             try \{                                                                                  \\}\par
2465 {\cf21                 DOCTEST_CAST_TO_VOID(expr)                                                         \\}\par
2466 {\cf21             \} catch(...) \{ DOCTEST_RB.translateException(); \}                                      \\}\par
2467 {\cf21             DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                           \\}\par
2468 {\cf21         \} else \{ }{\cf20 /* NOLINT(*-else-after-return) */}{\cf21                                                  \\}\par
2469 {\cf21            DOCTEST_FUNC_SCOPE_RET(false);                                                          \\}\par
2470 {\cf21         \}                                                                                          \\}\par
2471 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2472 \par
2473 {\cf21 #define DOCTEST_ASSERT_NOTHROW(assert_type, ...)                                                   \\}\par
2474 {\cf21     DOCTEST_FUNC_SCOPE_BEGIN \{                                                                     \\}\par
2475 {\cf21         doctest::detail::ResultBuilder DOCTEST_RB(doctest::assertType::assert_type, __FILE__,      \\}\par
2476 {\cf21                                                    __LINE__, #__VA_ARGS__);                        \\}\par
2477 {\cf21         try \{                                                                                      \\}\par
2478 {\cf21             DOCTEST_CAST_TO_VOID(__VA_ARGS__)                                                      \\}\par
2479 {\cf21         \} catch(...) \{ DOCTEST_RB.translateException(); \}                                          \\}\par
2480 {\cf21         DOCTEST_ASSERT_LOG_REACT_RETURN(DOCTEST_RB);                                               \\}\par
2481 {\cf21     \} DOCTEST_FUNC_SCOPE_END}\par
2482 \par
2483 {\cf20 // clang-format off}\par
2484 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_WARN_THROWS, "")}\par
2485 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_CHECK_THROWS, "")}\par
2486 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_ASSERT_THROWS_WITH((__VA_ARGS__), #__VA_ARGS__, DT_REQUIRE_THROWS, "")}\par
2487 \par
2488 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_AS, "", __VA_ARGS__)}\par
2489 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_AS, "", __VA_ARGS__)}\par
2490 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_AS, "", __VA_ARGS__)}\par
2491 \par
2492 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_WARN_THROWS_WITH, __VA_ARGS__)}\par
2493 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_CHECK_THROWS_WITH, __VA_ARGS__)}\par
2494 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_ASSERT_THROWS_WITH(expr, #expr, DT_REQUIRE_THROWS_WITH, __VA_ARGS__)}\par
2495 \par
2496 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_WARN_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2497 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_CHECK_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2498 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, message, ...) DOCTEST_ASSERT_THROWS_AS(expr, DT_REQUIRE_THROWS_WITH_AS, message, __VA_ARGS__)}\par
2499 \par
2500 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_WARN_NOTHROW, __VA_ARGS__)}\par
2501 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_CHECK_NOTHROW, __VA_ARGS__)}\par
2502 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_ASSERT_NOTHROW(DT_REQUIRE_NOTHROW, __VA_ARGS__)}\par
2503 \par
2504 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2505 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2506 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2507 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2508 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2509 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_AS(expr, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2510 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2511 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2512 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH(expr, with); \} DOCTEST_FUNC_SCOPE_END}\par
2513 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2514 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2515 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex); \} DOCTEST_FUNC_SCOPE_END}\par
2516 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_WARN_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2517 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_CHECK_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2518 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_SCOPE_BEGIN \{ DOCTEST_INFO(__VA_ARGS__); DOCTEST_REQUIRE_NOTHROW(expr); \} DOCTEST_FUNC_SCOPE_END}\par
2519 {\cf20 // clang-format on}\par
2520 \par
2521 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2522 \par
2523 {\cf20 // =================================================================================================}\par
2524 {\cf20 // == WHAT FOLLOWS IS VERSIONS OF THE MACROS THAT DO NOT DO ANY REGISTERING!                      ==}\par
2525 {\cf20 // == THIS CAN BE ENABLED BY DEFINING DOCTEST_CONFIG_DISABLE GLOBALLY!                            ==}\par
2526 {\cf20 // =================================================================================================}\par
2527 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2528 \par
2529 {\cf21 #define DOCTEST_IMPLEMENT_FIXTURE(der, base, func, name)                                           \\}\par
2530 {\cf21     namespace }{\cf20 /* NOLINT */}{\cf21  \{                                                                       \\}\par
2531 {\cf21         template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                           \\}\par
2532 {\cf21         struct der : public base                                                                   \\}\par
2533 {\cf21         \{ void f(); \};                                                                             \\}\par
2534 {\cf21     \}                                                                                              \\}\par
2535 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2536 {\cf21     inline void der<DOCTEST_UNUSED_TEMPLATE_TYPE>::f()}\par
2537 \par
2538 {\cf21 #define DOCTEST_CREATE_AND_REGISTER_FUNCTION(f, name)                                              \\}\par
2539 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2540 {\cf21     static inline void f()}\par
2541 \par
2542 {\cf20 // for registering tests}\par
2543 {\cf21 #define DOCTEST_TEST_CASE(name)                                                                    \\}\par
2544 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2545 \par
2546 {\cf20 // for registering tests in classes}\par
2547 {\cf21 #define DOCTEST_TEST_CASE_CLASS(name)                                                              \\}\par
2548 {\cf21     DOCTEST_CREATE_AND_REGISTER_FUNCTION(DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2549 \par
2550 {\cf20 // for registering tests with a fixture}\par
2551 {\cf21 #define DOCTEST_TEST_CASE_FIXTURE(x, name)                                                         \\}\par
2552 {\cf21     DOCTEST_IMPLEMENT_FIXTURE(DOCTEST_ANONYMOUS(DOCTEST_ANON_CLASS_), x,                           \\}\par
2553 {\cf21                               DOCTEST_ANONYMOUS(DOCTEST_ANON_FUNC_), name)}\par
2554 \par
2555 {\cf20 // for converting types to strings without the <typeinfo> header and demangling}\par
2556 {\cf21 #define DOCTEST_TYPE_TO_STRING_AS(str, ...) static_assert(true, "")}\par
2557 {\cf21 #define DOCTEST_TYPE_TO_STRING(...) static_assert(true, "")}\par
2558 \par
2559 {\cf20 // for typed tests}\par
2560 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE(name, type, ...)                                                \\}\par
2561 {\cf21     template <typename type>                                                                       \\}\par
2562 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2563 \par
2564 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, type, id)                                          \\}\par
2565 {\cf21     template <typename type>                                                                       \\}\par
2566 {\cf21     inline void DOCTEST_ANONYMOUS(DOCTEST_ANON_TMP_)()}\par
2567 \par
2568 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, ...) static_assert(true, "")}\par
2569 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, ...) static_assert(true, "")}\par
2570 \par
2571 {\cf20 // for subcases}\par
2572 {\cf21 #define DOCTEST_SUBCASE(name)}\par
2573 \par
2574 {\cf20 // for a testsuite block}\par
2575 {\cf21 #define DOCTEST_TEST_SUITE(name) namespace }{\cf20 // NOLINT}\par
2576 \par
2577 {\cf20 // for starting a testsuite block}\par
2578 {\cf21 #define DOCTEST_TEST_SUITE_BEGIN(name) static_assert(true, "")}\par
2579 \par
2580 {\cf20 // for ending a testsuite block}\par
2581 {\cf21 #define DOCTEST_TEST_SUITE_END using DOCTEST_ANONYMOUS(DOCTEST_ANON_FOR_SEMICOLON_) = int}\par
2582 \par
2583 {\cf21 #define DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)                                           \\}\par
2584 {\cf21     template <typename DOCTEST_UNUSED_TEMPLATE_TYPE>                                               \\}\par
2585 {\cf21     static inline doctest::String DOCTEST_ANONYMOUS(DOCTEST_ANON_TRANSLATOR_)(signature)}\par
2586 \par
2587 {\cf21 #define DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2588 {\cf21 #define DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2589 \par
2590 {\cf21 #define DOCTEST_INFO(...) (static_cast<void>(0))}\par
2591 {\cf21 #define DOCTEST_CAPTURE(x) (static_cast<void>(0))}\par
2592 {\cf21 #define DOCTEST_ADD_MESSAGE_AT(file, line, ...) (static_cast<void>(0))}\par
2593 {\cf21 #define DOCTEST_ADD_FAIL_CHECK_AT(file, line, ...) (static_cast<void>(0))}\par
2594 {\cf21 #define DOCTEST_ADD_FAIL_AT(file, line, ...) (static_cast<void>(0))}\par
2595 {\cf21 #define DOCTEST_MESSAGE(...) (static_cast<void>(0))}\par
2596 {\cf21 #define DOCTEST_FAIL_CHECK(...) (static_cast<void>(0))}\par
2597 {\cf21 #define DOCTEST_FAIL(...) (static_cast<void>(0))}\par
2598 \par
2599 {\cf21 #if defined(DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED)                                    \\}\par
2600 {\cf21  && defined(DOCTEST_CONFIG_ASSERTS_RETURN_VALUES)}\par
2601 \par
2602 {\cf21 #define DOCTEST_WARN(...) [&] \{ return __VA_ARGS__; \}()}\par
2603 {\cf21 #define DOCTEST_CHECK(...) [&] \{ return __VA_ARGS__; \}()}\par
2604 {\cf21 #define DOCTEST_REQUIRE(...) [&] \{ return __VA_ARGS__; \}()}\par
2605 {\cf21 #define DOCTEST_WARN_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2606 {\cf21 #define DOCTEST_CHECK_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2607 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2608 \par
2609 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2610 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2611 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) [&] \{ return cond; \}()}\par
2612 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2613 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2614 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) [&] \{ return !(cond); \}()}\par
2615 \par
2616 {\cf17 namespace }doctest \{\par
2617 {\cf17 namespace }detail \{\par
2618 {\cf21 #define DOCTEST_RELATIONAL_OP(name, op)                                                            \\}\par
2619 {\cf21     template <typename L, typename R>                                                              \\}\par
2620 {\cf21     bool name(const DOCTEST_REF_WRAP(L) lhs, const DOCTEST_REF_WRAP(R) rhs) \{ return lhs op rhs; \}}\par
2621 \par
2622     DOCTEST_RELATIONAL_OP(eq, ==)\par
2623     DOCTEST_RELATIONAL_OP(ne, !=)\par
2624     DOCTEST_RELATIONAL_OP(lt, <)\par
2625     DOCTEST_RELATIONAL_OP(gt, >)\par
2626     DOCTEST_RELATIONAL_OP(le, <=)\par
2627     DOCTEST_RELATIONAL_OP(ge, >=)\par
2628 \} {\cf20 // namespace detail}\par
2629 \} {\cf20 // namespace doctest}\par
2630 \par
2631 {\cf21 #define DOCTEST_WARN_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2632 {\cf21 #define DOCTEST_CHECK_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2633 {\cf21 #define DOCTEST_REQUIRE_EQ(...) [&] \{ return doctest::detail::eq(__VA_ARGS__); \}()}\par
2634 {\cf21 #define DOCTEST_WARN_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2635 {\cf21 #define DOCTEST_CHECK_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2636 {\cf21 #define DOCTEST_REQUIRE_NE(...) [&] \{ return doctest::detail::ne(__VA_ARGS__); \}()}\par
2637 {\cf21 #define DOCTEST_WARN_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2638 {\cf21 #define DOCTEST_CHECK_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2639 {\cf21 #define DOCTEST_REQUIRE_LT(...) [&] \{ return doctest::detail::lt(__VA_ARGS__); \}()}\par
2640 {\cf21 #define DOCTEST_WARN_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2641 {\cf21 #define DOCTEST_CHECK_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2642 {\cf21 #define DOCTEST_REQUIRE_GT(...) [&] \{ return doctest::detail::gt(__VA_ARGS__); \}()}\par
2643 {\cf21 #define DOCTEST_WARN_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2644 {\cf21 #define DOCTEST_CHECK_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2645 {\cf21 #define DOCTEST_REQUIRE_LE(...) [&] \{ return doctest::detail::le(__VA_ARGS__); \}()}\par
2646 {\cf21 #define DOCTEST_WARN_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2647 {\cf21 #define DOCTEST_CHECK_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2648 {\cf21 #define DOCTEST_REQUIRE_GE(...) [&] \{ return doctest::detail::ge(__VA_ARGS__); \}()}\par
2649 {\cf21 #define DOCTEST_WARN_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2650 {\cf21 #define DOCTEST_CHECK_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2651 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) [&] \{ return __VA_ARGS__; \}()}\par
2652 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2653 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2654 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) [&] \{ return !(__VA_ARGS__); \}()}\par
2655 \par
2656 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2657 \par
2658 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, with, ...) [] \{ static_assert(false, "Exception translation is not available when doctest is disabled."); return false; \}()}\par
2659 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2660 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2661 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2662 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2663 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2664 \par
2665 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2666 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2667 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2668 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2669 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2670 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH(,,)}\par
2671 \par
2672 {\cf21 #define DOCTEST_WARN_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2673 {\cf21 #define DOCTEST_CHECK_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2674 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2675 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2676 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2677 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2678 {\cf21 #define DOCTEST_WARN_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2679 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2680 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2681 \par
2682 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2683 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2684 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return false; \} catch (...) \{ return true; \} \}()}\par
2685 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2686 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2687 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) [&] \{ try \{ expr; \} catch (__VA_ARGS__) \{ return true; \} catch (...) \{ \} return false; \}()}\par
2688 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2689 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2690 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) [&] \{ try \{ __VA_ARGS__; return true; \} catch (...) \{ return false; \} \}()}\par
2691 \par
2692 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2693 \par
2694 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2695 \par
2696 {\cf21 #define DOCTEST_WARN(...) DOCTEST_FUNC_EMPTY}\par
2697 {\cf21 #define DOCTEST_CHECK(...) DOCTEST_FUNC_EMPTY}\par
2698 {\cf21 #define DOCTEST_REQUIRE(...) DOCTEST_FUNC_EMPTY}\par
2699 {\cf21 #define DOCTEST_WARN_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2700 {\cf21 #define DOCTEST_CHECK_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2701 {\cf21 #define DOCTEST_REQUIRE_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2702 \par
2703 {\cf21 #define DOCTEST_WARN_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2704 {\cf21 #define DOCTEST_CHECK_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2705 {\cf21 #define DOCTEST_REQUIRE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2706 {\cf21 #define DOCTEST_WARN_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2707 {\cf21 #define DOCTEST_CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2708 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_FUNC_EMPTY}\par
2709 \par
2710 {\cf21 #define DOCTEST_WARN_EQ(...) DOCTEST_FUNC_EMPTY}\par
2711 {\cf21 #define DOCTEST_CHECK_EQ(...) DOCTEST_FUNC_EMPTY}\par
2712 {\cf21 #define DOCTEST_REQUIRE_EQ(...) DOCTEST_FUNC_EMPTY}\par
2713 {\cf21 #define DOCTEST_WARN_NE(...) DOCTEST_FUNC_EMPTY}\par
2714 {\cf21 #define DOCTEST_CHECK_NE(...) DOCTEST_FUNC_EMPTY}\par
2715 {\cf21 #define DOCTEST_REQUIRE_NE(...) DOCTEST_FUNC_EMPTY}\par
2716 {\cf21 #define DOCTEST_WARN_GT(...) DOCTEST_FUNC_EMPTY}\par
2717 {\cf21 #define DOCTEST_CHECK_GT(...) DOCTEST_FUNC_EMPTY}\par
2718 {\cf21 #define DOCTEST_REQUIRE_GT(...) DOCTEST_FUNC_EMPTY}\par
2719 {\cf21 #define DOCTEST_WARN_LT(...) DOCTEST_FUNC_EMPTY}\par
2720 {\cf21 #define DOCTEST_CHECK_LT(...) DOCTEST_FUNC_EMPTY}\par
2721 {\cf21 #define DOCTEST_REQUIRE_LT(...) DOCTEST_FUNC_EMPTY}\par
2722 {\cf21 #define DOCTEST_WARN_GE(...) DOCTEST_FUNC_EMPTY}\par
2723 {\cf21 #define DOCTEST_CHECK_GE(...) DOCTEST_FUNC_EMPTY}\par
2724 {\cf21 #define DOCTEST_REQUIRE_GE(...) DOCTEST_FUNC_EMPTY}\par
2725 {\cf21 #define DOCTEST_WARN_LE(...) DOCTEST_FUNC_EMPTY}\par
2726 {\cf21 #define DOCTEST_CHECK_LE(...) DOCTEST_FUNC_EMPTY}\par
2727 {\cf21 #define DOCTEST_REQUIRE_LE(...) DOCTEST_FUNC_EMPTY}\par
2728 \par
2729 {\cf21 #define DOCTEST_WARN_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2730 {\cf21 #define DOCTEST_CHECK_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2731 {\cf21 #define DOCTEST_REQUIRE_UNARY(...) DOCTEST_FUNC_EMPTY}\par
2732 {\cf21 #define DOCTEST_WARN_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2733 {\cf21 #define DOCTEST_CHECK_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2734 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE(...) DOCTEST_FUNC_EMPTY}\par
2735 \par
2736 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2737 \par
2738 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2739 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2740 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_FUNC_EMPTY}\par
2741 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2742 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2743 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_FUNC_EMPTY}\par
2744 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2745 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2746 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_FUNC_EMPTY}\par
2747 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2748 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2749 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2750 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2751 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2752 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_FUNC_EMPTY}\par
2753 \par
2754 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2755 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2756 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2757 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2758 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2759 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_FUNC_EMPTY}\par
2760 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2761 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2762 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_FUNC_EMPTY}\par
2763 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2764 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2765 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_FUNC_EMPTY}\par
2766 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2767 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2768 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_FUNC_EMPTY}\par
2769 \par
2770 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2771 \par
2772 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_EVALUATE_ASSERTS_EVEN_WHEN_DISABLED}\par
2773 \par
2774 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
2775 \par
2776 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2777 \par
2778 {\cf21 #ifdef DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2779 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC DOCTEST_FUNC_EMPTY}\par
2780 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2781 {\cf21 #define DOCTEST_EXCEPTION_EMPTY_FUNC [] \{ static_assert(false, "Exceptions are disabled! " \\}\par
2782 {\cf21     "Use DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS if you want to compile with exceptions disabled."); return false; \}()}\par
2783 \par
2784 {\cf21 #undef DOCTEST_REQUIRE}\par
2785 {\cf21 #undef DOCTEST_REQUIRE_FALSE}\par
2786 {\cf21 #undef DOCTEST_REQUIRE_MESSAGE}\par
2787 {\cf21 #undef DOCTEST_REQUIRE_FALSE_MESSAGE}\par
2788 {\cf21 #undef DOCTEST_REQUIRE_EQ}\par
2789 {\cf21 #undef DOCTEST_REQUIRE_NE}\par
2790 {\cf21 #undef DOCTEST_REQUIRE_GT}\par
2791 {\cf21 #undef DOCTEST_REQUIRE_LT}\par
2792 {\cf21 #undef DOCTEST_REQUIRE_GE}\par
2793 {\cf21 #undef DOCTEST_REQUIRE_LE}\par
2794 {\cf21 #undef DOCTEST_REQUIRE_UNARY}\par
2795 {\cf21 #undef DOCTEST_REQUIRE_UNARY_FALSE}\par
2796 \par
2797 {\cf21 #define DOCTEST_REQUIRE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2798 {\cf21 #define DOCTEST_REQUIRE_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2799 {\cf21 #define DOCTEST_REQUIRE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2800 {\cf21 #define DOCTEST_REQUIRE_FALSE_MESSAGE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2801 {\cf21 #define DOCTEST_REQUIRE_EQ DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2802 {\cf21 #define DOCTEST_REQUIRE_NE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2803 {\cf21 #define DOCTEST_REQUIRE_GT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2804 {\cf21 #define DOCTEST_REQUIRE_LT DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2805 {\cf21 #define DOCTEST_REQUIRE_GE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2806 {\cf21 #define DOCTEST_REQUIRE_LE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2807 {\cf21 #define DOCTEST_REQUIRE_UNARY DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2808 {\cf21 #define DOCTEST_REQUIRE_UNARY_FALSE DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2809 \par
2810 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS_BUT_WITH_ALL_ASSERTS}\par
2811 \par
2812 {\cf21 #define DOCTEST_WARN_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2813 {\cf21 #define DOCTEST_CHECK_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2814 {\cf21 #define DOCTEST_REQUIRE_THROWS(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2815 {\cf21 #define DOCTEST_WARN_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2816 {\cf21 #define DOCTEST_CHECK_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2817 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2818 {\cf21 #define DOCTEST_WARN_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2819 {\cf21 #define DOCTEST_CHECK_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2820 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2821 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2822 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2823 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2824 {\cf21 #define DOCTEST_WARN_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2825 {\cf21 #define DOCTEST_CHECK_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2826 {\cf21 #define DOCTEST_REQUIRE_NOTHROW(...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2827 \par
2828 {\cf21 #define DOCTEST_WARN_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2829 {\cf21 #define DOCTEST_CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2830 {\cf21 #define DOCTEST_REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2831 {\cf21 #define DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2832 {\cf21 #define DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2833 {\cf21 #define DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2834 {\cf21 #define DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2835 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2836 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2837 {\cf21 #define DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2838 {\cf21 #define DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2839 {\cf21 #define DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2840 {\cf21 #define DOCTEST_WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2841 {\cf21 #define DOCTEST_CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2842 {\cf21 #define DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_EXCEPTION_EMPTY_FUNC}\par
2843 \par
2844 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
2845 \par
2846 {\cf20 // clang-format off}\par
2847 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY - FORWARDING TO THE RIGHT MACROS}\par
2848 {\cf21 #define DOCTEST_FAST_WARN_EQ             DOCTEST_WARN_EQ}\par
2849 {\cf21 #define DOCTEST_FAST_CHECK_EQ            DOCTEST_CHECK_EQ}\par
2850 {\cf21 #define DOCTEST_FAST_REQUIRE_EQ          DOCTEST_REQUIRE_EQ}\par
2851 {\cf21 #define DOCTEST_FAST_WARN_NE             DOCTEST_WARN_NE}\par
2852 {\cf21 #define DOCTEST_FAST_CHECK_NE            DOCTEST_CHECK_NE}\par
2853 {\cf21 #define DOCTEST_FAST_REQUIRE_NE          DOCTEST_REQUIRE_NE}\par
2854 {\cf21 #define DOCTEST_FAST_WARN_GT             DOCTEST_WARN_GT}\par
2855 {\cf21 #define DOCTEST_FAST_CHECK_GT            DOCTEST_CHECK_GT}\par
2856 {\cf21 #define DOCTEST_FAST_REQUIRE_GT          DOCTEST_REQUIRE_GT}\par
2857 {\cf21 #define DOCTEST_FAST_WARN_LT             DOCTEST_WARN_LT}\par
2858 {\cf21 #define DOCTEST_FAST_CHECK_LT            DOCTEST_CHECK_LT}\par
2859 {\cf21 #define DOCTEST_FAST_REQUIRE_LT          DOCTEST_REQUIRE_LT}\par
2860 {\cf21 #define DOCTEST_FAST_WARN_GE             DOCTEST_WARN_GE}\par
2861 {\cf21 #define DOCTEST_FAST_CHECK_GE            DOCTEST_CHECK_GE}\par
2862 {\cf21 #define DOCTEST_FAST_REQUIRE_GE          DOCTEST_REQUIRE_GE}\par
2863 {\cf21 #define DOCTEST_FAST_WARN_LE             DOCTEST_WARN_LE}\par
2864 {\cf21 #define DOCTEST_FAST_CHECK_LE            DOCTEST_CHECK_LE}\par
2865 {\cf21 #define DOCTEST_FAST_REQUIRE_LE          DOCTEST_REQUIRE_LE}\par
2866 \par
2867 {\cf21 #define DOCTEST_FAST_WARN_UNARY          DOCTEST_WARN_UNARY}\par
2868 {\cf21 #define DOCTEST_FAST_CHECK_UNARY         DOCTEST_CHECK_UNARY}\par
2869 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY       DOCTEST_REQUIRE_UNARY}\par
2870 {\cf21 #define DOCTEST_FAST_WARN_UNARY_FALSE    DOCTEST_WARN_UNARY_FALSE}\par
2871 {\cf21 #define DOCTEST_FAST_CHECK_UNARY_FALSE   DOCTEST_CHECK_UNARY_FALSE}\par
2872 {\cf21 #define DOCTEST_FAST_REQUIRE_UNARY_FALSE DOCTEST_REQUIRE_UNARY_FALSE}\par
2873 \par
2874 {\cf21 #define DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id,__VA_ARGS__)}\par
2875 {\cf20 // clang-format on}\par
2876 \par
2877 {\cf20 // BDD style macros}\par
2878 {\cf20 // clang-format off}\par
2879 {\cf21 #define DOCTEST_SCENARIO(name) DOCTEST_TEST_CASE("  Scenario: " name)}\par
2880 {\cf21 #define DOCTEST_SCENARIO_CLASS(name) DOCTEST_TEST_CASE_CLASS("  Scenario: " name)}\par
2881 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE(name, T, ...)  DOCTEST_TEST_CASE_TEMPLATE("  Scenario: " name, T, __VA_ARGS__)}\par
2882 {\cf21 #define DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE("  Scenario: " name, T, id)}\par
2883 \par
2884 {\cf21 #define DOCTEST_GIVEN(name)     DOCTEST_SUBCASE("   Given: " name)}\par
2885 {\cf21 #define DOCTEST_WHEN(name)      DOCTEST_SUBCASE("    When: " name)}\par
2886 {\cf21 #define DOCTEST_AND_WHEN(name)  DOCTEST_SUBCASE("And when: " name)}\par
2887 {\cf21 #define DOCTEST_THEN(name)      DOCTEST_SUBCASE("    Then: " name)}\par
2888 {\cf21 #define DOCTEST_AND_THEN(name)  DOCTEST_SUBCASE("     And: " name)}\par
2889 {\cf20 // clang-format on}\par
2890 \par
2891 {\cf20 // == SHORT VERSIONS OF THE MACROS}\par
2892 {\cf21 #ifndef DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
2893 \par
2894 {\cf21 #define TEST_CASE(name) DOCTEST_TEST_CASE(name)}\par
2895 {\cf21 #define TEST_CASE_CLASS(name) DOCTEST_TEST_CASE_CLASS(name)}\par
2896 {\cf21 #define TEST_CASE_FIXTURE(x, name) DOCTEST_TEST_CASE_FIXTURE(x, name)}\par
2897 {\cf21 #define TYPE_TO_STRING_AS(str, ...) DOCTEST_TYPE_TO_STRING_AS(str, __VA_ARGS__)}\par
2898 {\cf21 #define TYPE_TO_STRING(...) DOCTEST_TYPE_TO_STRING(__VA_ARGS__)}\par
2899 {\cf21 #define TEST_CASE_TEMPLATE(name, T, ...) DOCTEST_TEST_CASE_TEMPLATE(name, T, __VA_ARGS__)}\par
2900 {\cf21 #define TEST_CASE_TEMPLATE_DEFINE(name, T, id) DOCTEST_TEST_CASE_TEMPLATE_DEFINE(name, T, id)}\par
2901 {\cf21 #define TEST_CASE_TEMPLATE_INVOKE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INVOKE(id, __VA_ARGS__)}\par
2902 {\cf21 #define TEST_CASE_TEMPLATE_APPLY(id, ...) DOCTEST_TEST_CASE_TEMPLATE_APPLY(id, __VA_ARGS__)}\par
2903 {\cf21 #define SUBCASE(name) DOCTEST_SUBCASE(name)}\par
2904 {\cf21 #define TEST_SUITE(decorators) DOCTEST_TEST_SUITE(decorators)}\par
2905 {\cf21 #define TEST_SUITE_BEGIN(name) DOCTEST_TEST_SUITE_BEGIN(name)}\par
2906 {\cf21 #define TEST_SUITE_END DOCTEST_TEST_SUITE_END}\par
2907 {\cf21 #define REGISTER_EXCEPTION_TRANSLATOR(signature) DOCTEST_REGISTER_EXCEPTION_TRANSLATOR(signature)}\par
2908 {\cf21 #define REGISTER_REPORTER(name, priority, reporter) DOCTEST_REGISTER_REPORTER(name, priority, reporter)}\par
2909 {\cf21 #define REGISTER_LISTENER(name, priority, reporter) DOCTEST_REGISTER_LISTENER(name, priority, reporter)}\par
2910 {\cf21 #define INFO(...) DOCTEST_INFO(__VA_ARGS__)}\par
2911 {\cf21 #define CAPTURE(x) DOCTEST_CAPTURE(x)}\par
2912 {\cf21 #define ADD_MESSAGE_AT(file, line, ...) DOCTEST_ADD_MESSAGE_AT(file, line, __VA_ARGS__)}\par
2913 {\cf21 #define ADD_FAIL_CHECK_AT(file, line, ...) DOCTEST_ADD_FAIL_CHECK_AT(file, line, __VA_ARGS__)}\par
2914 {\cf21 #define ADD_FAIL_AT(file, line, ...) DOCTEST_ADD_FAIL_AT(file, line, __VA_ARGS__)}\par
2915 {\cf21 #define MESSAGE(...) DOCTEST_MESSAGE(__VA_ARGS__)}\par
2916 {\cf21 #define FAIL_CHECK(...) DOCTEST_FAIL_CHECK(__VA_ARGS__)}\par
2917 {\cf21 #define FAIL(...) DOCTEST_FAIL(__VA_ARGS__)}\par
2918 {\cf21 #define TO_LVALUE(...) DOCTEST_TO_LVALUE(__VA_ARGS__)}\par
2919 \par
2920 {\cf21 #define WARN(...) DOCTEST_WARN(__VA_ARGS__)}\par
2921 {\cf21 #define WARN_FALSE(...) DOCTEST_WARN_FALSE(__VA_ARGS__)}\par
2922 {\cf21 #define WARN_THROWS(...) DOCTEST_WARN_THROWS(__VA_ARGS__)}\par
2923 {\cf21 #define WARN_THROWS_AS(expr, ...) DOCTEST_WARN_THROWS_AS(expr, __VA_ARGS__)}\par
2924 {\cf21 #define WARN_THROWS_WITH(expr, ...) DOCTEST_WARN_THROWS_WITH(expr, __VA_ARGS__)}\par
2925 {\cf21 #define WARN_THROWS_WITH_AS(expr, with, ...) DOCTEST_WARN_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2926 {\cf21 #define WARN_NOTHROW(...) DOCTEST_WARN_NOTHROW(__VA_ARGS__)}\par
2927 {\cf21 #define CHECK(...) DOCTEST_CHECK(__VA_ARGS__)}\par
2928 {\cf21 #define CHECK_FALSE(...) DOCTEST_CHECK_FALSE(__VA_ARGS__)}\par
2929 {\cf21 #define CHECK_THROWS(...) DOCTEST_CHECK_THROWS(__VA_ARGS__)}\par
2930 {\cf21 #define CHECK_THROWS_AS(expr, ...) DOCTEST_CHECK_THROWS_AS(expr, __VA_ARGS__)}\par
2931 {\cf21 #define CHECK_THROWS_WITH(expr, ...) DOCTEST_CHECK_THROWS_WITH(expr, __VA_ARGS__)}\par
2932 {\cf21 #define CHECK_THROWS_WITH_AS(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2933 {\cf21 #define CHECK_NOTHROW(...) DOCTEST_CHECK_NOTHROW(__VA_ARGS__)}\par
2934 {\cf21 #define REQUIRE(...) DOCTEST_REQUIRE(__VA_ARGS__)}\par
2935 {\cf21 #define REQUIRE_FALSE(...) DOCTEST_REQUIRE_FALSE(__VA_ARGS__)}\par
2936 {\cf21 #define REQUIRE_THROWS(...) DOCTEST_REQUIRE_THROWS(__VA_ARGS__)}\par
2937 {\cf21 #define REQUIRE_THROWS_AS(expr, ...) DOCTEST_REQUIRE_THROWS_AS(expr, __VA_ARGS__)}\par
2938 {\cf21 #define REQUIRE_THROWS_WITH(expr, ...) DOCTEST_REQUIRE_THROWS_WITH(expr, __VA_ARGS__)}\par
2939 {\cf21 #define REQUIRE_THROWS_WITH_AS(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_AS(expr, with, __VA_ARGS__)}\par
2940 {\cf21 #define REQUIRE_NOTHROW(...) DOCTEST_REQUIRE_NOTHROW(__VA_ARGS__)}\par
2941 \par
2942 {\cf21 #define WARN_MESSAGE(cond, ...) DOCTEST_WARN_MESSAGE(cond, __VA_ARGS__)}\par
2943 {\cf21 #define WARN_FALSE_MESSAGE(cond, ...) DOCTEST_WARN_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2944 {\cf21 #define WARN_THROWS_MESSAGE(expr, ...) DOCTEST_WARN_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2945 {\cf21 #define WARN_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_WARN_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2946 {\cf21 #define WARN_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_WARN_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2947 {\cf21 #define WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_WARN_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2948 {\cf21 #define WARN_NOTHROW_MESSAGE(expr, ...) DOCTEST_WARN_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2949 {\cf21 #define CHECK_MESSAGE(cond, ...) DOCTEST_CHECK_MESSAGE(cond, __VA_ARGS__)}\par
2950 {\cf21 #define CHECK_FALSE_MESSAGE(cond, ...) DOCTEST_CHECK_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2951 {\cf21 #define CHECK_THROWS_MESSAGE(expr, ...) DOCTEST_CHECK_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2952 {\cf21 #define CHECK_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_CHECK_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2953 {\cf21 #define CHECK_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_CHECK_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2954 {\cf21 #define CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_CHECK_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2955 {\cf21 #define CHECK_NOTHROW_MESSAGE(expr, ...) DOCTEST_CHECK_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2956 {\cf21 #define REQUIRE_MESSAGE(cond, ...) DOCTEST_REQUIRE_MESSAGE(cond, __VA_ARGS__)}\par
2957 {\cf21 #define REQUIRE_FALSE_MESSAGE(cond, ...) DOCTEST_REQUIRE_FALSE_MESSAGE(cond, __VA_ARGS__)}\par
2958 {\cf21 #define REQUIRE_THROWS_MESSAGE(expr, ...) DOCTEST_REQUIRE_THROWS_MESSAGE(expr, __VA_ARGS__)}\par
2959 {\cf21 #define REQUIRE_THROWS_AS_MESSAGE(expr, ex, ...) DOCTEST_REQUIRE_THROWS_AS_MESSAGE(expr, ex, __VA_ARGS__)}\par
2960 {\cf21 #define REQUIRE_THROWS_WITH_MESSAGE(expr, with, ...) DOCTEST_REQUIRE_THROWS_WITH_MESSAGE(expr, with, __VA_ARGS__)}\par
2961 {\cf21 #define REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, ...) DOCTEST_REQUIRE_THROWS_WITH_AS_MESSAGE(expr, with, ex, __VA_ARGS__)}\par
2962 {\cf21 #define REQUIRE_NOTHROW_MESSAGE(expr, ...) DOCTEST_REQUIRE_NOTHROW_MESSAGE(expr, __VA_ARGS__)}\par
2963 \par
2964 {\cf21 #define SCENARIO(name) DOCTEST_SCENARIO(name)}\par
2965 {\cf21 #define SCENARIO_CLASS(name) DOCTEST_SCENARIO_CLASS(name)}\par
2966 {\cf21 #define SCENARIO_TEMPLATE(name, T, ...) DOCTEST_SCENARIO_TEMPLATE(name, T, __VA_ARGS__)}\par
2967 {\cf21 #define SCENARIO_TEMPLATE_DEFINE(name, T, id) DOCTEST_SCENARIO_TEMPLATE_DEFINE(name, T, id)}\par
2968 {\cf21 #define GIVEN(name) DOCTEST_GIVEN(name)}\par
2969 {\cf21 #define WHEN(name) DOCTEST_WHEN(name)}\par
2970 {\cf21 #define AND_WHEN(name) DOCTEST_AND_WHEN(name)}\par
2971 {\cf21 #define THEN(name) DOCTEST_THEN(name)}\par
2972 {\cf21 #define AND_THEN(name) DOCTEST_AND_THEN(name)}\par
2973 \par
2974 {\cf21 #define WARN_EQ(...) DOCTEST_WARN_EQ(__VA_ARGS__)}\par
2975 {\cf21 #define CHECK_EQ(...) DOCTEST_CHECK_EQ(__VA_ARGS__)}\par
2976 {\cf21 #define REQUIRE_EQ(...) DOCTEST_REQUIRE_EQ(__VA_ARGS__)}\par
2977 {\cf21 #define WARN_NE(...) DOCTEST_WARN_NE(__VA_ARGS__)}\par
2978 {\cf21 #define CHECK_NE(...) DOCTEST_CHECK_NE(__VA_ARGS__)}\par
2979 {\cf21 #define REQUIRE_NE(...) DOCTEST_REQUIRE_NE(__VA_ARGS__)}\par
2980 {\cf21 #define WARN_GT(...) DOCTEST_WARN_GT(__VA_ARGS__)}\par
2981 {\cf21 #define CHECK_GT(...) DOCTEST_CHECK_GT(__VA_ARGS__)}\par
2982 {\cf21 #define REQUIRE_GT(...) DOCTEST_REQUIRE_GT(__VA_ARGS__)}\par
2983 {\cf21 #define WARN_LT(...) DOCTEST_WARN_LT(__VA_ARGS__)}\par
2984 {\cf21 #define CHECK_LT(...) DOCTEST_CHECK_LT(__VA_ARGS__)}\par
2985 {\cf21 #define REQUIRE_LT(...) DOCTEST_REQUIRE_LT(__VA_ARGS__)}\par
2986 {\cf21 #define WARN_GE(...) DOCTEST_WARN_GE(__VA_ARGS__)}\par
2987 {\cf21 #define CHECK_GE(...) DOCTEST_CHECK_GE(__VA_ARGS__)}\par
2988 {\cf21 #define REQUIRE_GE(...) DOCTEST_REQUIRE_GE(__VA_ARGS__)}\par
2989 {\cf21 #define WARN_LE(...) DOCTEST_WARN_LE(__VA_ARGS__)}\par
2990 {\cf21 #define CHECK_LE(...) DOCTEST_CHECK_LE(__VA_ARGS__)}\par
2991 {\cf21 #define REQUIRE_LE(...) DOCTEST_REQUIRE_LE(__VA_ARGS__)}\par
2992 {\cf21 #define WARN_UNARY(...) DOCTEST_WARN_UNARY(__VA_ARGS__)}\par
2993 {\cf21 #define CHECK_UNARY(...) DOCTEST_CHECK_UNARY(__VA_ARGS__)}\par
2994 {\cf21 #define REQUIRE_UNARY(...) DOCTEST_REQUIRE_UNARY(__VA_ARGS__)}\par
2995 {\cf21 #define WARN_UNARY_FALSE(...) DOCTEST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
2996 {\cf21 #define CHECK_UNARY_FALSE(...) DOCTEST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
2997 {\cf21 #define REQUIRE_UNARY_FALSE(...) DOCTEST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
2998 \par
2999 {\cf20 // KEPT FOR BACKWARDS COMPATIBILITY}\par
3000 {\cf21 #define FAST_WARN_EQ(...) DOCTEST_FAST_WARN_EQ(__VA_ARGS__)}\par
3001 {\cf21 #define FAST_CHECK_EQ(...) DOCTEST_FAST_CHECK_EQ(__VA_ARGS__)}\par
3002 {\cf21 #define FAST_REQUIRE_EQ(...) DOCTEST_FAST_REQUIRE_EQ(__VA_ARGS__)}\par
3003 {\cf21 #define FAST_WARN_NE(...) DOCTEST_FAST_WARN_NE(__VA_ARGS__)}\par
3004 {\cf21 #define FAST_CHECK_NE(...) DOCTEST_FAST_CHECK_NE(__VA_ARGS__)}\par
3005 {\cf21 #define FAST_REQUIRE_NE(...) DOCTEST_FAST_REQUIRE_NE(__VA_ARGS__)}\par
3006 {\cf21 #define FAST_WARN_GT(...) DOCTEST_FAST_WARN_GT(__VA_ARGS__)}\par
3007 {\cf21 #define FAST_CHECK_GT(...) DOCTEST_FAST_CHECK_GT(__VA_ARGS__)}\par
3008 {\cf21 #define FAST_REQUIRE_GT(...) DOCTEST_FAST_REQUIRE_GT(__VA_ARGS__)}\par
3009 {\cf21 #define FAST_WARN_LT(...) DOCTEST_FAST_WARN_LT(__VA_ARGS__)}\par
3010 {\cf21 #define FAST_CHECK_LT(...) DOCTEST_FAST_CHECK_LT(__VA_ARGS__)}\par
3011 {\cf21 #define FAST_REQUIRE_LT(...) DOCTEST_FAST_REQUIRE_LT(__VA_ARGS__)}\par
3012 {\cf21 #define FAST_WARN_GE(...) DOCTEST_FAST_WARN_GE(__VA_ARGS__)}\par
3013 {\cf21 #define FAST_CHECK_GE(...) DOCTEST_FAST_CHECK_GE(__VA_ARGS__)}\par
3014 {\cf21 #define FAST_REQUIRE_GE(...) DOCTEST_FAST_REQUIRE_GE(__VA_ARGS__)}\par
3015 {\cf21 #define FAST_WARN_LE(...) DOCTEST_FAST_WARN_LE(__VA_ARGS__)}\par
3016 {\cf21 #define FAST_CHECK_LE(...) DOCTEST_FAST_CHECK_LE(__VA_ARGS__)}\par
3017 {\cf21 #define FAST_REQUIRE_LE(...) DOCTEST_FAST_REQUIRE_LE(__VA_ARGS__)}\par
3018 \par
3019 {\cf21 #define FAST_WARN_UNARY(...) DOCTEST_FAST_WARN_UNARY(__VA_ARGS__)}\par
3020 {\cf21 #define FAST_CHECK_UNARY(...) DOCTEST_FAST_CHECK_UNARY(__VA_ARGS__)}\par
3021 {\cf21 #define FAST_REQUIRE_UNARY(...) DOCTEST_FAST_REQUIRE_UNARY(__VA_ARGS__)}\par
3022 {\cf21 #define FAST_WARN_UNARY_FALSE(...) DOCTEST_FAST_WARN_UNARY_FALSE(__VA_ARGS__)}\par
3023 {\cf21 #define FAST_CHECK_UNARY_FALSE(...) DOCTEST_FAST_CHECK_UNARY_FALSE(__VA_ARGS__)}\par
3024 {\cf21 #define FAST_REQUIRE_UNARY_FALSE(...) DOCTEST_FAST_REQUIRE_UNARY_FALSE(__VA_ARGS__)}\par
3025 \par
3026 {\cf21 #define TEST_CASE_TEMPLATE_INSTANTIATE(id, ...) DOCTEST_TEST_CASE_TEMPLATE_INSTANTIATE(id, __VA_ARGS__)}\par
3027 \par
3028 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_SHORT_MACRO_NAMES}\par
3029 \par
3030 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3031 \par
3032 {\cf20 // this is here to clear the 'current test suite' for the current translation unit - at the top}\par
3033 DOCTEST_TEST_SUITE_END();\par
3034 \par
3035 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3036 \par
3037 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3038 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3039 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3040 \par
3041 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
3042 \par
3043 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_INCLUDED}\par
3044 \par
3045 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3046 {\cf21 #define DOCTEST_SINGLE_HEADER}\par
3047 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3048 \par
3049 {\cf21 #if defined(DOCTEST_CONFIG_IMPLEMENT) || !defined(DOCTEST_SINGLE_HEADER)}\par
3050 \par
3051 {\cf21 #ifndef DOCTEST_SINGLE_HEADER}\par
3052 {\cf21 #include "doctest_fwd.h"}\par
3053 {\cf21 #endif }{\cf20 // DOCTEST_SINGLE_HEADER}\par
3054 \par
3055 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wunused-macros"})\par
3056 \par
3057 {\cf21 #ifndef DOCTEST_LIBRARY_IMPLEMENTATION}\par
3058 {\cf21 #define DOCTEST_LIBRARY_IMPLEMENTATION}\par
3059 \par
3060 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3061 \par
3062 DOCTEST_SUPPRESS_COMMON_WARNINGS_PUSH\par
3063 \par
3064 DOCTEST_CLANG_SUPPRESS_WARNING_PUSH\par
3065 DOCTEST_CLANG_SUPPRESS_WARNING({\cf22 "-Wglobal-constructors"})\par
3066 DOCTEST_CLANG_SUPPRESS_WARNING("-Wexit-time-destructors")\par
3067 DOCTEST_CLANG_SUPPRESS_WARNING("-Wsign-conversion")\par
3068 DOCTEST_CLANG_SUPPRESS_WARNING("-Wshorten-64-to-32")\par
3069 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-variable-declarations")\par
3070 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch")\par
3071 DOCTEST_CLANG_SUPPRESS_WARNING("-Wswitch-enum")\par
3072 DOCTEST_CLANG_SUPPRESS_WARNING("-Wcovered-switch-default")\par
3073 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-noreturn")\par
3074 DOCTEST_CLANG_SUPPRESS_WARNING("-Wdisabled-macro-expansion")\par
3075 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-braces")\par
3076 DOCTEST_CLANG_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3077 DOCTEST_CLANG_SUPPRESS_WARNING("-Wunused-member-function")\par
3078 DOCTEST_CLANG_SUPPRESS_WARNING("-Wnonportable-system-include-path")\par
3079 \par
3080 DOCTEST_GCC_SUPPRESS_WARNING_PUSH\par
3081 DOCTEST_GCC_SUPPRESS_WARNING("-Wconversion")\par
3082 DOCTEST_GCC_SUPPRESS_WARNING("-Wsign-conversion")\par
3083 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-field-initializers")\par
3084 DOCTEST_GCC_SUPPRESS_WARNING("-Wmissing-braces")\par
3085 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch")\par
3086 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-enum")\par
3087 DOCTEST_GCC_SUPPRESS_WARNING("-Wswitch-default")\par
3088 DOCTEST_GCC_SUPPRESS_WARNING("-Wunsafe-loop-optimizations")\par
3089 DOCTEST_GCC_SUPPRESS_WARNING("-Wold-style-cast")\par
3090 DOCTEST_GCC_SUPPRESS_WARNING("-Wunused-function")\par
3091 DOCTEST_GCC_SUPPRESS_WARNING("-Wmultiple-inheritance")\par
3092 DOCTEST_GCC_SUPPRESS_WARNING("-Wsuggest-attribute")\par
3093 \par
3094 DOCTEST_MSVC_SUPPRESS_WARNING_PUSH\par
3095 DOCTEST_MSVC_SUPPRESS_WARNING(4267) {\cf20 // 'var' : conversion from 'x' to 'y', possible loss of data}\par
3096 DOCTEST_MSVC_SUPPRESS_WARNING(4530) {\cf20 // C++ exception handler used, but unwind semantics not enabled}\par
3097 DOCTEST_MSVC_SUPPRESS_WARNING(4577) {\cf20 // 'noexcept' used with no exception handling mode specified}\par
3098 DOCTEST_MSVC_SUPPRESS_WARNING(4774) {\cf20 // format string expected in argument is not a string literal}\par
3099 DOCTEST_MSVC_SUPPRESS_WARNING(4365) {\cf20 // conversion from 'int' to 'unsigned', signed/unsigned mismatch}\par
3100 DOCTEST_MSVC_SUPPRESS_WARNING(5039) {\cf20 // pointer to potentially throwing function passed to extern C}\par
3101 DOCTEST_MSVC_SUPPRESS_WARNING(4800) {\cf20 // forcing value to bool 'true' or 'false' (performance warning)}\par
3102 DOCTEST_MSVC_SUPPRESS_WARNING(5245) {\cf20 // unreferenced function with internal linkage has been removed}\par
3103 \par
3104 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_BEGIN\par
3105 \par
3106 {\cf20 // required includes - will go only in one translation unit!}\par
3107 {\cf21 #include <ctime>}\par
3108 {\cf21 #include <cmath>}\par
3109 {\cf21 #include <climits>}\par
3110 {\cf20 // borland (Embarcadero) compiler requires math.h and not cmath - https://github.com/doctest/doctest/pull/37}\par
3111 {\cf21 #ifdef __BORLANDC__}\par
3112 {\cf21 #include <math.h>}\par
3113 {\cf21 #endif }{\cf20 // __BORLANDC__}\par
3114 {\cf21 #include <new>}\par
3115 {\cf21 #include <cstdio>}\par
3116 {\cf21 #include <cstdlib>}\par
3117 {\cf21 #include <cstring>}\par
3118 {\cf21 #include <limits>}\par
3119 {\cf21 #include <utility>}\par
3120 {\cf21 #include <fstream>}\par
3121 {\cf21 #include <sstream>}\par
3122 {\cf21 #include <iostream>}\par
3123 {\cf21 #include <algorithm>}\par
3124 {\cf21 #include <iomanip>}\par
3125 {\cf21 #include <vector>}\par
3126 {\cf21 #ifndef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3127 {\cf21 #include <atomic>}\par
3128 {\cf21 #include <mutex>}\par
3129 {\cf21 #define DOCTEST_DECLARE_MUTEX(name) std::mutex name;}\par
3130 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name) static DOCTEST_DECLARE_MUTEX(name)}\par
3131 {\cf21 #define DOCTEST_LOCK_MUTEX(name) std::lock_guard<std::mutex> DOCTEST_ANONYMOUS(DOCTEST_ANON_LOCK_)(name);}\par
3132 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3133 {\cf21 #define DOCTEST_DECLARE_MUTEX(name)}\par
3134 {\cf21 #define DOCTEST_DECLARE_STATIC_MUTEX(name)}\par
3135 {\cf21 #define DOCTEST_LOCK_MUTEX(name)}\par
3136 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3137 {\cf21 #include <set>}\par
3138 {\cf21 #include <map>}\par
3139 {\cf21 #include <unordered_set>}\par
3140 {\cf21 #include <exception>}\par
3141 {\cf21 #include <stdexcept>}\par
3142 {\cf21 #include <csignal>}\par
3143 {\cf21 #include <cfloat>}\par
3144 {\cf21 #include <cctype>}\par
3145 {\cf21 #include <cstdint>}\par
3146 {\cf21 #include <string>}\par
3147 \par
3148 {\cf21 #ifdef DOCTEST_PLATFORM_MAC}\par
3149 {\cf21 #include <sys/types.h>}\par
3150 {\cf21 #include <unistd.h>}\par
3151 {\cf21 #include <sys/sysctl.h>}\par
3152 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_MAC}\par
3153 \par
3154 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3155 \par
3156 {\cf20 // defines for a leaner windows.h}\par
3157 {\cf21 #ifndef WIN32_LEAN_AND_MEAN}\par
3158 {\cf21 #define WIN32_LEAN_AND_MEAN}\par
3159 {\cf21 #endif }{\cf20 // WIN32_LEAN_AND_MEAN}\par
3160 {\cf21 #ifndef NOMINMAX}\par
3161 {\cf21 #define NOMINMAX}\par
3162 {\cf21 #endif }{\cf20 // NOMINMAX}\par
3163 \par
3164 {\cf20 // not sure what AfxWin.h is for - here I do what Catch does}\par
3165 {\cf21 #ifdef __AFXDLL}\par
3166 {\cf21 #include <AfxWin.h>}\par
3167 {\cf21 #else}\par
3168 {\cf21 #include <windows.h>}\par
3169 {\cf21 #endif}\par
3170 {\cf21 #include <io.h>}\par
3171 \par
3172 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3173 \par
3174 {\cf21 #include <sys/time.h>}\par
3175 {\cf21 #include <unistd.h>}\par
3176 \par
3177 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3178 \par
3179 {\cf20 // this is a fix for https://github.com/doctest/doctest/issues/348}\par
3180 {\cf20 // https://mail.gnome.org/archives/xml/2012-January/msg00000.html}\par
3181 {\cf21 #if !defined(HAVE_UNISTD_H) && !defined(STDOUT_FILENO)}\par
3182 {\cf21 #define STDOUT_FILENO fileno(stdout)}\par
3183 {\cf21 #endif }{\cf20 // HAVE_UNISTD_H}\par
3184 \par
3185 DOCTEST_MAKE_STD_HEADERS_CLEAN_FROM_WARNINGS_ON_WALL_END\par
3186 \par
3187 {\cf20 // counts the number of elements in a C array}\par
3188 {\cf21 #define DOCTEST_COUNTOF(x) (sizeof(x) / sizeof(x[0]))}\par
3189 \par
3190 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3191 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_disabled}\par
3192 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3193 {\cf21 #define DOCTEST_BRANCH_ON_DISABLED(if_disabled, if_not_disabled) if_not_disabled}\par
3194 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3195 \par
3196 {\cf21 #ifndef DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3197 {\cf21 #define DOCTEST_CONFIG_OPTIONS_PREFIX "dt-"}\par
3198 {\cf21 #endif}\par
3199 \par
3200 {\cf21 #ifndef DOCTEST_THREAD_LOCAL}\par
3201 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTITHREADING) || DOCTEST_MSVC && (DOCTEST_MSVC < DOCTEST_COMPILER(19, 0, 0))}\par
3202 {\cf21 #define DOCTEST_THREAD_LOCAL}\par
3203 {\cf21 #else }{\cf20 // DOCTEST_MSVC}\par
3204 {\cf21 #define DOCTEST_THREAD_LOCAL thread_local}\par
3205 {\cf21 #endif }{\cf20 // DOCTEST_MSVC}\par
3206 {\cf21 #endif }{\cf20 // DOCTEST_THREAD_LOCAL}\par
3207 \par
3208 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES}\par
3209 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES 32}\par
3210 {\cf21 #endif}\par
3211 \par
3212 {\cf21 #ifndef DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE}\par
3213 {\cf21 #define DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE 64}\par
3214 {\cf21 #endif}\par
3215 \par
3216 {\cf21 #ifdef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
3217 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY DOCTEST_CONFIG_OPTIONS_PREFIX}\par
3218 {\cf21 #else}\par
3219 {\cf21 #define DOCTEST_OPTIONS_PREFIX_DISPLAY ""}\par
3220 {\cf21 #endif}\par
3221 \par
3222 {\cf21 #if defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_APP)}\par
3223 {\cf21 #define DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3224 {\cf21 #endif}\par
3225 \par
3226 {\cf21 #ifndef DOCTEST_CDECL}\par
3227 {\cf21 #define DOCTEST_CDECL __cdecl}\par
3228 {\cf21 #endif}\par
3229 \par
3230 {\cf17 namespace }doctest \{\par
3231 \par
3232 {\cf18 bool} is_running_in_test = {\cf17 false};\par
3233 \par
3234 {\cf17 namespace }\{\par
3235     {\cf17 using namespace }detail;\par
3236 \par
3237     {\cf17 template} <{\cf17 typename} Ex>\par
3238     DOCTEST_NORETURN {\cf18 void} throw_exception(Ex {\cf17 const}& e) \{\par
3239 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3240         {\cf19 throw} e;\par
3241 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3242         std::cerr << {\cf22 "doctest will terminate because it needed to throw an exception.\\n"}\par
3243                   << {\cf22 "The message was: "} << e.what() << {\cf23 '\\n'};\par
3244         std::terminate();\par
3245 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
3246     \}\par
3247 \par
3248 {\cf21 #ifndef DOCTEST_INTERNAL_ERROR}\par
3249 {\cf21 #define DOCTEST_INTERNAL_ERROR(msg)                                                                \\}\par
3250 {\cf21     throw_exception(std::logic_error(                                                              \\}\par
3251 {\cf21             __FILE__ ":" DOCTEST_TOSTR(__LINE__) ": Internal doctest error: " msg))}\par
3252 {\cf21 #endif }{\cf20 // DOCTEST_INTERNAL_ERROR}\par
3253 \par
3254     {\cf20 // case insensitive strcmp}\par
3255     {\cf18 int} stricmp({\cf17 const} {\cf18 char}* a, {\cf17 const} {\cf18 char}* b) \{\par
3256         {\cf19 for}(;; a++, b++) \{\par
3257             {\cf17 const} {\cf18 int} d = tolower(*a) - tolower(*b);\par
3258             {\cf19 if}(d != 0 || !*a)\par
3259                 {\cf19 return} d;\par
3260         \}\par
3261     \}\par
3262 \par
3263     {\cf17 struct }Endianness\par
3264     \{\par
3265         {\cf17 enum} Arch\par
3266         \{\par
3267             Big,\par
3268             Little\par
3269         \};\par
3270 \par
3271         {\cf17 static} Arch which() \{\par
3272             {\cf18 int} x = 1;\par
3273             {\cf20 // casting any data pointer to char* is allowed}\par
3274             {\cf17 auto} ptr = {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(&x);\par
3275             {\cf19 if}(*ptr)\par
3276                 {\cf19 return} Little;\par
3277             {\cf19 return} Big;\par
3278         \}\par
3279     \};\par
3280 \} {\cf20 // namespace}\par
3281 \par
3282 {\cf17 namespace }detail \{\par
3283     DOCTEST_THREAD_LOCAL {\cf17 class}\par
3284     \{\par
3285         std::vector<std::streampos> stack;\par
3286         std::stringstream           ss;\par
3287 \par
3288     {\cf17 public}:\par
3289         std::ostream* push() \{\par
3290             stack.push_back(ss.tellp());\par
3291             {\cf19 return} &ss;\par
3292         \}\par
3293 \par
3294         String pop() \{\par
3295             {\cf19 if} (stack.empty())\par
3296                 DOCTEST_INTERNAL_ERROR({\cf22 "TLSS was empty when trying to pop!"});\par
3297 \par
3298             std::streampos pos = stack.back();\par
3299             stack.pop_back();\par
3300             {\cf18 unsigned} sz = {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(ss.tellp() - pos);\par
3301             ss.rdbuf()->pubseekpos(pos, std::ios::in | std::ios::out);\par
3302             {\cf19 return} String(ss, sz);\par
3303         \}\par
3304     \} g_oss;\par
3305 \par
3306     std::ostream* tlssPush() \{\par
3307         {\cf19 return} g_oss.push();\par
3308     \}\par
3309 \par
3310     String tlssPop() \{\par
3311         {\cf19 return} g_oss.pop();\par
3312     \}\par
3313 \par
3314 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3315 \par
3316 {\cf17 namespace }timer_large_integer\par
3317 \{\par
3318     \par
3319 {\cf21 #if defined(DOCTEST_PLATFORM_WINDOWS)}\par
3320     {\cf17 using }type = ULONGLONG;\par
3321 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3322     {\cf17 using }type = std::uint64_t;\par
3323 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3324 \}\par
3325 \par
3326 {\cf17 using }ticks_t = timer_large_integer::type;\par
3327 \par
3328 {\cf21 #ifdef DOCTEST_CONFIG_GETCURRENTTICKS}\par
3329     ticks_t getCurrentTicks() \{ {\cf19 return} DOCTEST_CONFIG_GETCURRENTTICKS(); \}\par
3330 {\cf21 #elif defined(DOCTEST_PLATFORM_WINDOWS)}\par
3331     ticks_t getCurrentTicks() \{\par
3332         {\cf17 static} LARGE_INTEGER hz = \{ \{0\} \}, hzo = \{ \{0\} \};\par
3333         {\cf19 if}(!hz.QuadPart) \{\par
3334             QueryPerformanceFrequency(&hz);\par
3335             QueryPerformanceCounter(&hzo);\par
3336         \}\par
3337         LARGE_INTEGER t;\par
3338         QueryPerformanceCounter(&t);\par
3339         {\cf19 return} ((t.QuadPart - hzo.QuadPart) * LONGLONG(1000000)) / hz.QuadPart;\par
3340     \}\par
3341 {\cf21 #else  }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3342     ticks_t getCurrentTicks() \{\par
3343         timeval t;\par
3344         gettimeofday(&t, {\cf17 nullptr});\par
3345         {\cf19 return} {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_sec) * 1000000 + {\cf17 static_cast<}ticks_t{\cf17 >}(t.tv_usec);\par
3346     \}\par
3347 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
3348 \par
3349     {\cf17 struct }Timer\par
3350     \{\par
3351         {\cf18 void}         start() \{ m_ticks = getCurrentTicks(); \}\par
3352         {\cf18 unsigned} {\cf18 int} getElapsedMicroseconds(){\cf17  const }\{\par
3353             {\cf19 return} {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(getCurrentTicks() - m_ticks);\par
3354         \}\par
3355         {\cf20 //unsigned int getElapsedMilliseconds() const \{}\par
3356         {\cf20 //    return static_cast<unsigned int>(getElapsedMicroseconds() / 1000);}\par
3357         {\cf20 //\}}\par
3358         {\cf18 double} getElapsedSeconds(){\cf17  const }\{ {\cf19 return} {\cf17 static_cast<}{\cf18 double}{\cf17 >}(getCurrentTicks() - m_ticks) / 1000000.0; \}\par
3359 \par
3360     {\cf17 private}:\par
3361         ticks_t m_ticks = 0;\par
3362     \};\par
3363 \par
3364 {\cf21 #ifdef DOCTEST_CONFIG_NO_MULTITHREADING}\par
3365     {\cf17 template} <{\cf17 typename} T>\par
3366     {\cf17 using }Atomic = T;\par
3367 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3368     {\cf17 template} <{\cf17 typename} T>\par
3369     {\cf17 using }Atomic = std::atomic<T>;\par
3370 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTITHREADING}\par
3371 \par
3372 {\cf21 #if defined(DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS) || defined(DOCTEST_CONFIG_NO_MULTITHREADING)}\par
3373     {\cf17 template} <{\cf17 typename} T>\par
3374     {\cf17 using }MultiLaneAtomic = Atomic<T>;\par
3375 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3376     {\cf20 // Provides a multilane implementation of an atomic variable that supports add, sub, load,}\par
3377     {\cf20 // store. Instead of using a single atomic variable, this splits up into multiple ones,}\par
3378     {\cf20 // each sitting on a separate cache line. The goal is to provide a speedup when most}\par
3379     {\cf20 // operations are modifying. It achieves this with two properties:}\par
3380     {\cf20 //}\par
3381     {\cf20 // * Multiple atomics are used, so chance of congestion from the same atomic is reduced.}\par
3382     {\cf20 // * Each atomic sits on a separate cache line, so false sharing is reduced.}\par
3383     {\cf20 //}\par
3384     {\cf20 // The disadvantage is that there is a small overhead due to the use of TLS, and load/store}\par
3385     {\cf20 // is slower because all atomics have to be accessed.}\par
3386     {\cf17 template} <{\cf17 typename} T>\par
3387     {\cf17 class }MultiLaneAtomic\par
3388     \{\par
3389         {\cf17 struct }CacheLineAlignedAtomic\par
3390         \{\par
3391             Atomic<T> atomic\{\};\par
3392             {\cf18 char} padding[DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE - {\cf17 sizeof}(Atomic<T>)];\par
3393         \};\par
3394         CacheLineAlignedAtomic m_atomics[DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES];\par
3395 \par
3396         {\cf17 static_assert}({\cf17 sizeof}(CacheLineAlignedAtomic) == DOCTEST_MULTI_LANE_ATOMICS_CACHE_LINE_SIZE,\par
3397                       {\cf22 "guarantee one atomic takes exactly one cache line"});\par
3398 \par
3399     {\cf17 public}:\par
3400         T operator++() DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1) + 1; \}\par
3401 \par
3402         T operator++({\cf18 int}) DOCTEST_NOEXCEPT \{ {\cf19 return} fetch_add(1); \}\par
3403 \par
3404         T fetch_add(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3405             {\cf19 return} myAtomic().fetch_add(arg, order);\par
3406         \}\par
3407 \par
3408         T fetch_sub(T arg, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3409             {\cf19 return} myAtomic().fetch_sub(arg, order);\par
3410         \}\par
3411 \par
3412         {\cf17 operator} T() {\cf17 const} DOCTEST_NOEXCEPT \{ {\cf19 return} load(); \}\par
3413 \par
3414         T load(std::memory_order order = std::memory_order_seq_cst) {\cf17 const} DOCTEST_NOEXCEPT \{\par
3415             {\cf17 auto} result = T();\par
3416             {\cf19 for}({\cf17 auto} {\cf17 const}& c : m_atomics) \{\par
3417                 result += c.atomic.load(order);\par
3418             \}\par
3419             {\cf19 return} result;\par
3420         \}\par
3421 \par
3422         T operator=(T desired) DOCTEST_NOEXCEPT \{ {\cf20 // lgtm [cpp/assignment-does-not-return-this]}\par
3423             store(desired);\par
3424             {\cf19 return} desired;\par
3425         \}\par
3426 \par
3427         {\cf18 void} store(T desired, std::memory_order order = std::memory_order_seq_cst) DOCTEST_NOEXCEPT \{\par
3428             {\cf20 // first value becomes desired", all others become 0.}\par
3429             {\cf19 for}({\cf17 auto}& c : m_atomics) \{\par
3430                 c.atomic.store(desired, order);\par
3431                 desired = \{\};\par
3432             \}\par
3433         \}\par
3434 \par
3435     {\cf17 private}:\par
3436         {\cf20 // Each thread has a different atomic that it operates on. If more than NumLanes threads}\par
3437         {\cf20 // use this, some will use the same atomic. So performance will degrade a bit, but still}\par
3438         {\cf20 // everything will work.}\par
3439         {\cf20 //}\par
3440         {\cf20 // The logic here is a bit tricky. The call should be as fast as possible, so that there}\par
3441         {\cf20 // is minimal to no overhead in determining the correct atomic for the current thread.}\par
3442         {\cf20 //}\par
3443         {\cf20 // 1. A global static counter laneCounter counts continuously up.}\par
3444         {\cf20 // 2. Each successive thread will use modulo operation of that counter so it gets an atomic}\par
3445         {\cf20 //    assigned in a round-robin fashion.}\par
3446         {\cf20 // 3. This tlsLaneIdx is stored in the thread local data, so it is directly available with}\par
3447         {\cf20 //    little overhead.}\par
3448         Atomic<T>& myAtomic() DOCTEST_NOEXCEPT \{\par
3449             {\cf17 static} Atomic<size_t> laneCounter;\par
3450             DOCTEST_THREAD_LOCAL {\cf18 size_t} tlsLaneIdx =\par
3451                     laneCounter++ % DOCTEST_MULTI_LANE_ATOMICS_THREAD_LANES;\par
3452 \par
3453             {\cf19 return} m_atomics[tlsLaneIdx].atomic;\par
3454         \}\par
3455     \};\par
3456 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_MULTI_LANE_ATOMICS}\par
3457 \par
3458     {\cf20 // this holds both parameters from the command line and runtime data for tests}\par
3459     {\cf17 struct }ContextState : ContextOptions, TestRunStats, CurrentTestCaseStats\par
3460     \{\par
3461         MultiLaneAtomic<int> numAssertsCurrentTest_atomic;\par
3462         MultiLaneAtomic<int> numAssertsFailedCurrentTest_atomic;\par
3463 \par
3464         std::vector<std::vector<String>> filters = {\cf17 decltype}(filters)(9); {\cf20 // 9 different filters}\par
3465 \par
3466         std::vector<IReporter*> reporters_currently_used;\par
3467 \par
3468         assert_handler ah = {\cf17 nullptr};\par
3469 \par
3470         Timer timer;\par
3471 \par
3472         std::vector<String> stringifiedContexts; {\cf20 // logging from INFO() due to an exception}\par
3473 \par
3474         {\cf20 // stuff for subcases}\par
3475         {\cf18 bool} reachedLeaf;\par
3476         std::vector<SubcaseSignature> subcaseStack;\par
3477         std::vector<SubcaseSignature> nextSubcaseStack;\par
3478         std::unordered_set<unsigned long long> fullyTraversedSubcases;\par
3479         {\cf18 size_t} currentSubcaseDepth;\par
3480         Atomic<bool> shouldLogCurrentException;\par
3481 \par
3482         {\cf18 void} resetRunData() \{\par
3483             numTestCases                = 0;\par
3484             numTestCasesPassingFilters  = 0;\par
3485             numTestSuitesPassingFilters = 0;\par
3486             numTestCasesFailed          = 0;\par
3487             numAsserts                  = 0;\par
3488             numAssertsFailed            = 0;\par
3489             numAssertsCurrentTest       = 0;\par
3490             numAssertsFailedCurrentTest = 0;\par
3491         \}\par
3492 \par
3493         {\cf18 void} finalizeTestCaseData() \{\par
3494             seconds = timer.getElapsedSeconds();\par
3495 \par
3496             {\cf20 // update the non-atomic counters}\par
3497             numAsserts += numAssertsCurrentTest_atomic;\par
3498             numAssertsFailed += numAssertsFailedCurrentTest_atomic;\par
3499             numAssertsCurrentTest       = numAssertsCurrentTest_atomic;\par
3500             numAssertsFailedCurrentTest = numAssertsFailedCurrentTest_atomic;\par
3501 \par
3502             {\cf19 if}(numAssertsFailedCurrentTest)\par
3503                 failure_flags |= TestCaseFailureReason::AssertFailure;\par
3504 \par
3505             {\cf19 if}(Approx(currentTest->m_timeout).epsilon(DBL_EPSILON) != 0 &&\par
3506                Approx(seconds).epsilon(DBL_EPSILON) > currentTest->m_timeout)\par
3507                 failure_flags |= TestCaseFailureReason::Timeout;\par
3508 \par
3509             {\cf19 if}(currentTest->m_should_fail) \{\par
3510                 {\cf19 if}(failure_flags) \{\par
3511                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedAndDid;\par
3512                 \} {\cf19 else} \{\par
3513                     failure_flags |= TestCaseFailureReason::ShouldHaveFailedButDidnt;\par
3514                 \}\par
3515             \} {\cf19 else} {\cf19 if}(failure_flags && currentTest->m_may_fail) \{\par
3516                 failure_flags |= TestCaseFailureReason::CouldHaveFailedAndDid;\par
3517             \} {\cf19 else} {\cf19 if}(currentTest->m_expected_failures > 0) \{\par
3518                 {\cf19 if}(numAssertsFailedCurrentTest == currentTest->m_expected_failures) \{\par
3519                     failure_flags |= TestCaseFailureReason::FailedExactlyNumTimes;\par
3520                 \} {\cf19 else} \{\par
3521                     failure_flags |= TestCaseFailureReason::DidntFailExactlyNumTimes;\par
3522                 \}\par
3523             \}\par
3524 \par
3525             {\cf18 bool} ok_to_fail = (TestCaseFailureReason::ShouldHaveFailedAndDid & failure_flags) ||\par
3526                               (TestCaseFailureReason::CouldHaveFailedAndDid & failure_flags) ||\par
3527                               (TestCaseFailureReason::FailedExactlyNumTimes & failure_flags);\par
3528 \par
3529             {\cf20 // if any subcase has failed - the whole test case has failed}\par
3530             testCaseSuccess = !(failure_flags && !ok_to_fail);\par
3531             {\cf19 if}(!testCaseSuccess)\par
3532                 numTestCasesFailed++;\par
3533         \}\par
3534     \};\par
3535 \par
3536     ContextState* g_cs = {\cf17 nullptr};\par
3537 \par
3538     {\cf20 // used to avoid locks for the debug output}\par
3539     {\cf20 // TODO: figure out if this is indeed necessary/correct - seems like either there still}\par
3540     {\cf20 // could be a race or that there wouldn't be a race even if using the context directly}\par
3541     DOCTEST_THREAD_LOCAL {\cf18 bool} g_no_colors;\par
3542 \par
3543 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3544 \} {\cf20 // namespace detail}\par
3545 \par
3546 {\cf18 char}* String::allocate(size_type sz) \{\par
3547     {\cf19 if} (sz <= last) \{\par
3548         buf[sz] = {\cf23 '\\0'};\par
3549         setLast(last - sz);\par
3550         {\cf19 return} buf;\par
3551     \} {\cf19 else} \{\par
3552         setOnHeap();\par
3553         data.size = sz;\par
3554         data.capacity = data.size + 1;\par
3555         data.ptr = {\cf17 new} {\cf18 char}[data.capacity];\par
3556         data.ptr[sz] = {\cf23 '\\0'};\par
3557         {\cf19 return} data.ptr;\par
3558     \}\par
3559 \}\par
3560 \par
3561 {\cf18 void} String::setOnHeap() {\cf17 noexcept} \{ *{\cf17 reinterpret_cast<}{\cf18 unsigned} {\cf18 char}*{\cf17 >}(&buf[last]) = 128; \}\par
3562 {\cf18 void} String::setLast(size_type in) {\cf17 noexcept} \{ buf[last] = char(in); \}\par
3563 {\cf18 void} String::setSize(size_type sz) {\cf17 noexcept} \{\par
3564     {\cf19 if} (isOnStack()) \{ buf[sz] = {\cf23 '\\0'}; setLast(last - sz); \}\par
3565     {\cf19 else} \{ data.ptr[sz] = {\cf23 '\\0'}; data.size = sz; \}\par
3566 \}\par
3567 \par
3568 {\cf18 void} String::copy({\cf17 const} String& other) \{\par
3569     {\cf19 if}(other.isOnStack()) \{\par
3570         memcpy(buf, other.buf, len);\par
3571     \} {\cf19 else} \{\par
3572         memcpy(allocate(other.data.size), other.data.ptr, other.data.size);\par
3573     \}\par
3574 \}\par
3575 \par
3576 String::String() {\cf17 noexcept} \{\par
3577     buf[0] = {\cf23 '\\0'};\par
3578     setLast();\par
3579 \}\par
3580 \par
3581 String::~String() \{\par
3582     {\cf19 if}(!isOnStack())\par
3583         {\cf17 delete}[] data.ptr;\par
3584 \} {\cf20 // NOLINT(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3585 \par
3586 String::String({\cf17 const} {\cf18 char}* in)\par
3587         : String(in, strlen(in)) \{\}\par
3588 \par
3589 String::String({\cf17 const} {\cf18 char}* in, size_type in_size) \{\par
3590     memcpy(allocate(in_size), in, in_size);\par
3591 \}\par
3592 \par
3593 String::String(std::istream& in, size_type in_size) \{\par
3594     in.read(allocate(in_size), in_size);\par
3595 \}\par
3596 \par
3597 String::String({\cf17 const} String& other) \{ copy(other); \}\par
3598 \par
3599 String& String::operator=({\cf17 const} String& other) \{\par
3600     {\cf19 if}({\cf17 this} != &other) \{\par
3601         {\cf19 if}(!isOnStack())\par
3602             {\cf17 delete}[] data.ptr;\par
3603 \par
3604         copy(other);\par
3605     \}\par
3606 \par
3607     {\cf19 return} *{\cf17 this};\par
3608 \}\par
3609 \par
3610 String& String::operator+=({\cf17 const} String& other) \{\par
3611     {\cf17 const} size_type my_old_size = size();\par
3612     {\cf17 const} size_type other_size  = other.size();\par
3613     {\cf17 const} size_type total_size  = my_old_size + other_size;\par
3614     {\cf19 if}(isOnStack()) \{\par
3615         {\cf19 if}(total_size < len) \{\par
3616             {\cf20 // append to the current stack space}\par
3617             memcpy(buf + my_old_size, other.c_str(), other_size + 1);\par
3618             {\cf20 // NOLINTNEXTLINE(clang-analyzer-cplusplus.NewDeleteLeaks)}\par
3619             setLast(last - total_size);\par
3620         \} {\cf19 else} \{\par
3621             {\cf20 // alloc new chunk}\par
3622             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[total_size + 1];\par
3623             {\cf20 // copy current data to new location before writing in the union}\par
3624             memcpy(temp, buf, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3625             {\cf20 // update data in union}\par
3626             setOnHeap();\par
3627             data.size     = total_size;\par
3628             data.capacity = data.size + 1;\par
3629             data.ptr      = temp;\par
3630             {\cf20 // transfer the rest of the data}\par
3631             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3632         \}\par
3633     \} {\cf19 else} \{\par
3634         {\cf19 if}(data.capacity > total_size) \{\par
3635             {\cf20 // append to the current heap block}\par
3636             data.size = total_size;\par
3637             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3638         \} {\cf19 else} \{\par
3639             {\cf20 // resize}\par
3640             data.capacity *= 2;\par
3641             {\cf19 if}(data.capacity <= total_size)\par
3642                 data.capacity = total_size + 1;\par
3643             {\cf20 // alloc new chunk}\par
3644             {\cf18 char}* temp = {\cf17 new} {\cf18 char}[data.capacity];\par
3645             {\cf20 // copy current data to new location before releasing it}\par
3646             memcpy(temp, data.ptr, my_old_size); {\cf20 // skip the +1 ('\\0') for speed}\par
3647             {\cf20 // release old chunk}\par
3648             {\cf17 delete}[] data.ptr;\par
3649             {\cf20 // update the rest of the union members}\par
3650             data.size = total_size;\par
3651             data.ptr  = temp;\par
3652             {\cf20 // transfer the rest of the data}\par
3653             memcpy(data.ptr + my_old_size, other.c_str(), other_size + 1);\par
3654         \}\par
3655     \}\par
3656 \par
3657     {\cf19 return} *{\cf17 this};\par
3658 \}\par
3659 \par
3660 String::String(String&& other) {\cf17 noexcept} \{\par
3661     memcpy(buf, other.buf, len);\par
3662     other.buf[0] = {\cf23 '\\0'};\par
3663     other.setLast();\par
3664 \}\par
3665 \par
3666 String& String::operator=(String&& other) {\cf17 noexcept} \{\par
3667     {\cf19 if}({\cf17 this} != &other) \{\par
3668         {\cf19 if}(!isOnStack())\par
3669             {\cf17 delete}[] data.ptr;\par
3670         memcpy(buf, other.buf, len);\par
3671         other.buf[0] = {\cf23 '\\0'};\par
3672         other.setLast();\par
3673     \}\par
3674     {\cf19 return} *{\cf17 this};\par
3675 \}\par
3676 \par
3677 {\cf18 char} String::operator[](size_type i){\cf17  const }\{\par
3678     {\cf19 return} {\cf17 const_cast<}String*{\cf17 >}({\cf17 this})->{\cf17 operator}[](i);\par
3679 \}\par
3680 \par
3681 {\cf18 char}& String::operator[](size_type i) \{\par
3682     {\cf19 if}(isOnStack())\par
3683         {\cf19 return} {\cf17 reinterpret_cast<}{\cf18 char}*{\cf17 >}(buf)[i];\par
3684     {\cf19 return} data.ptr[i];\par
3685 \}\par
3686 \par
3687 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wmaybe-uninitialized"})\par
3688 String::size_type String::size(){\cf17  const }\{\par
3689     {\cf19 if}(isOnStack())\par
3690         {\cf19 return} last - (size_type(buf[last]) & 31); {\cf20 // using "last" would work only if "len" is 32}\par
3691     {\cf19 return} data.size;\par
3692 \}\par
3693 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3694 \par
3695 String::size_type String::capacity(){\cf17  const }\{\par
3696     {\cf19 if}(isOnStack())\par
3697         {\cf19 return} len;\par
3698     {\cf19 return} data.capacity;\par
3699 \}\par
3700 \par
3701 String String::substr(size_type pos, size_type cnt) && \{\par
3702     cnt = std::min(cnt, size() - 1 - pos);\par
3703     {\cf18 char}* cptr = c_str();\par
3704     memmove(cptr, cptr + pos, cnt);\par
3705     setSize(cnt);\par
3706     {\cf19 return} std::move(*{\cf17 this});\par
3707 \}\par
3708 \par
3709 String String::substr(size_type pos, size_type cnt) {\cf17 const} & \{\par
3710     cnt = std::min(cnt, size() - 1 - pos);\par
3711     {\cf19 return} String\{ c_str() + pos, cnt \};\par
3712 \}\par
3713 \par
3714 String::size_type String::find({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3715     {\cf17 const} {\cf18 char}* begin = c_str();\par
3716     {\cf17 const} {\cf18 char}* end = begin + size();\par
3717     {\cf17 const} {\cf18 char}* it = begin + pos;\par
3718     {\cf19 for} (; it < end && *it != ch; it++);\par
3719     {\cf19 if} (it < end) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3720     {\cf19 else} \{ {\cf19 return} npos; \}\par
3721 \}\par
3722 \par
3723 String::size_type String::rfind({\cf18 char} ch, size_type pos){\cf17  const }\{\par
3724     {\cf17 const} {\cf18 char}* begin = c_str();\par
3725     {\cf17 const} {\cf18 char}* it = begin + std::min(pos, size() - 1);\par
3726     {\cf19 for} (; it >= begin && *it != ch; it--);\par
3727     {\cf19 if} (it >= begin) \{ {\cf19 return} {\cf17 static_cast<}size_type{\cf17 >}(it - begin); \}\par
3728     {\cf19 else} \{ {\cf19 return} npos; \}\par
3729 \}\par
3730 \par
3731 {\cf18 int} String::compare({\cf17 const} {\cf18 char}* other, {\cf18 bool} no_case){\cf17  const }\{\par
3732     {\cf19 if}(no_case)\par
3733         {\cf19 return} doctest::stricmp(c_str(), other);\par
3734     {\cf19 return} std::strcmp(c_str(), other);\par
3735 \}\par
3736 \par
3737 {\cf18 int} String::compare({\cf17 const} String& other, {\cf18 bool} no_case){\cf17  const }\{\par
3738     {\cf19 return} compare(other.c_str(), no_case);\par
3739 \}\par
3740 \par
3741 String operator+({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return}  String(lhs) += rhs; \}\par
3742 \par
3743 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) == 0; \}\par
3744 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) != 0; \}\par
3745 {\cf18 bool} operator< ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) < 0; \}\par
3746 {\cf18 bool} operator> ({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.compare(rhs) > 0; \}\par
3747 {\cf18 bool} operator<=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) < 0 : {\cf17 true}; \}\par
3748 {\cf18 bool} operator>=({\cf17 const} String& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} (lhs != rhs) ? lhs.compare(rhs) > 0 : {\cf17 true}; \}\par
3749 \par
3750 std::ostream& operator<<(std::ostream& s, {\cf17 const} String& in) \{ {\cf19 return} s << in.c_str(); \}\par
3751 \par
3752 Contains::Contains({\cf17 const} String& str) : string(str) \{ \}\par
3753 \par
3754 {\cf18 bool} Contains::checkWith({\cf17 const} String& other){\cf17  const }\{\par
3755     {\cf19 return} strstr(other.c_str(), {\cf18 string}.c_str()) != {\cf17 nullptr};\par
3756 \}\par
3757 \par
3758 String toString({\cf17 const} Contains& in) \{\par
3759     {\cf19 return} {\cf22 "Contains( "} + in.string + {\cf22 " )"};\par
3760 \}\par
3761 \par
3762 {\cf18 bool} operator==({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} rhs.checkWith(lhs); \}\par
3763 {\cf18 bool} operator==({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} lhs.checkWith(rhs); \}\par
3764 {\cf18 bool} operator!=({\cf17 const} String& lhs, {\cf17 const} Contains& rhs) \{ {\cf19 return} !rhs.checkWith(lhs); \}\par
3765 {\cf18 bool} operator!=({\cf17 const} Contains& lhs, {\cf17 const} String& rhs) \{ {\cf19 return} !lhs.checkWith(rhs); \}\par
3766 \par
3767 {\cf17 namespace }\{\par
3768     {\cf18 void} color_to_stream(std::ostream&, Color::Enum) DOCTEST_BRANCH_ON_DISABLED(\{\}, ;)\par
3769 \} {\cf20 // namespace}\par
3770 \par
3771 {\cf17 namespace }Color \{\par
3772     std::ostream& operator<<(std::ostream& s, Color::Enum code) \{\par
3773         color_to_stream(s, code);\par
3774         {\cf19 return} s;\par
3775     \}\par
3776 \} {\cf20 // namespace Color}\par
3777 \par
3778 {\cf20 // clang-format off}\par
3779 {\cf17 const} {\cf18 char}* assertString(assertType::Enum at) \{\par
3780     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4061) {\cf20 // enum 'x' in switch of enum 'y' is not explicitely handled}\par
3781     {\cf21 #define DOCTEST_GENERATE_ASSERT_TYPE_CASE(assert_type) case assertType::DT_ ## assert_type: return #assert_type}\par
3782 {\cf21     #define DOCTEST_GENERATE_ASSERT_TYPE_CASES(assert_type) \\}\par
3783 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN_ ## assert_type); \\}\par
3784 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK_ ## assert_type); \\}\par
3785 {\cf21         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE_ ## assert_type)}\par
3786     {\cf19 switch}(at) \{\par
3787         DOCTEST_GENERATE_ASSERT_TYPE_CASE(WARN);\par
3788         DOCTEST_GENERATE_ASSERT_TYPE_CASE(CHECK);\par
3789         DOCTEST_GENERATE_ASSERT_TYPE_CASE(REQUIRE);\par
3790 \par
3791         DOCTEST_GENERATE_ASSERT_TYPE_CASES(FALSE);\par
3792 \par
3793         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS);\par
3794 \par
3795         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_AS);\par
3796 \par
3797         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH);\par
3798 \par
3799         DOCTEST_GENERATE_ASSERT_TYPE_CASES(THROWS_WITH_AS);\par
3800 \par
3801         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NOTHROW);\par
3802 \par
3803         DOCTEST_GENERATE_ASSERT_TYPE_CASES(EQ);\par
3804         DOCTEST_GENERATE_ASSERT_TYPE_CASES(NE);\par
3805         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GT);\par
3806         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LT);\par
3807         DOCTEST_GENERATE_ASSERT_TYPE_CASES(GE);\par
3808         DOCTEST_GENERATE_ASSERT_TYPE_CASES(LE);\par
3809 \par
3810         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY);\par
3811         DOCTEST_GENERATE_ASSERT_TYPE_CASES(UNARY_FALSE);\par
3812 \par
3813         {\cf19 default}: DOCTEST_INTERNAL_ERROR({\cf22 "Tried stringifying invalid assert type!"});\par
3814     \}\par
3815     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3816 \}\par
3817 {\cf20 // clang-format on}\par
3818 \par
3819 {\cf17 const} {\cf18 char}* failureString(assertType::Enum at) \{\par
3820     {\cf19 if}(at & assertType::is_warn) \par
3821         {\cf19 return} {\cf22 "WARNING"};\par
3822     {\cf19 if}(at & assertType::is_check) \par
3823         {\cf19 return} {\cf22 "ERROR"};\par
3824     {\cf19 if}(at & assertType::is_require) \par
3825         {\cf19 return} {\cf22 "FATAL ERROR"};\par
3826     {\cf19 return} {\cf22 ""};\par
3827 \}\par
3828 \par
3829 DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3830 DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wnull-dereference"})\par
3831 {\cf20 // depending on the current options this will remove the path of filenames}\par
3832 {\cf17 const} {\cf18 char}* skipPathFromFilename({\cf17 const} {\cf18 char}* file) \{\par
3833 {\cf21 #ifndef DOCTEST_CONFIG_DISABLE}\par
3834     {\cf19 if}(getContextOptions()->no_path_in_filenames) \{\par
3835         {\cf17 auto} back    = std::strrchr(file, {\cf23 '\\\\'});\par
3836         {\cf17 auto} forward = std::strrchr(file, {\cf23 '/'});\par
3837         {\cf19 if}(back || forward) \{\par
3838             {\cf19 if}(back > forward)\par
3839                 forward = back;\par
3840             {\cf19 return} forward + 1;\par
3841         \}\par
3842     \}\par
3843 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3844     {\cf19 return} file;\par
3845 \}\par
3846 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
3847 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
3848 \par
3849 {\cf18 bool} SubcaseSignature::operator==({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3850     {\cf19 return} m_line == other.m_line\par
3851         && std::strcmp(m_file, other.m_file) == 0\par
3852         && m_name == other.m_name;\par
3853 \}\par
3854 \par
3855 {\cf18 bool} SubcaseSignature::operator<({\cf17 const} SubcaseSignature& other){\cf17  const }\{\par
3856     {\cf19 if}(m_line != other.m_line)\par
3857         {\cf19 return} m_line < other.m_line;\par
3858     {\cf19 if}(std::strcmp(m_file, other.m_file) != 0)\par
3859         {\cf19 return} std::strcmp(m_file, other.m_file) < 0;\par
3860     {\cf19 return} m_name.compare(other.m_name) < 0;\par
3861 \}\par
3862 \par
3863 DOCTEST_DEFINE_INTERFACE(IContextScope)\par
3864 \par
3865 {\cf17 namespace }detail \{\par
3866     {\cf18 void} filldata<const void*>::fill(std::ostream* stream, {\cf17 const} {\cf18 void}* in) \{\par
3867         {\cf19 if} (in) \{ *stream << in; \}\par
3868         {\cf19 else} \{ *stream << {\cf22 "nullptr"}; \}\par
3869     \}\par
3870 \par
3871     {\cf17 template} <{\cf17 typename} T>\par
3872     String toStreamLit(T t) \{\par
3873         std::ostream* os = tlssPush();\par
3874         os->operator<<(t);\par
3875         {\cf19 return} tlssPop();\par
3876     \}\par
3877 \}\par
3878 \par
3879 {\cf21 #ifdef DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3880 String toString({\cf17 const} {\cf18 char}* in) \{ {\cf19 return} String({\cf22 "\\""}) + (in ? in : {\cf22 "\{null string\}"}) + {\cf22 "\\""}; \}\par
3881 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_TREAT_CHAR_STAR_AS_STRING}\par
3882 \par
3883 {\cf21 #if DOCTEST_MSVC >= DOCTEST_COMPILER(19, 20, 0)}\par
3884 {\cf20 // see this issue on why this is needed: https://github.com/doctest/doctest/issues/183}\par
3885 String toString({\cf17 const} std::string& in) \{ {\cf19 return} in.c_str(); \}\par
3886 {\cf21 #endif }{\cf20 // VS 2019}\par
3887 \par
3888 String toString(String in) \{ {\cf19 return} in; \}\par
3889 \par
3890 String toString(std::nullptr_t) \{ {\cf19 return} {\cf22 "nullptr"}; \}\par
3891 \par
3892 String toString({\cf18 bool} in) \{ {\cf19 return} in ? {\cf22 "true"} : {\cf22 "false"}; \}\par
3893 \par
3894 String toString({\cf18 float} in) \{ {\cf19 return} toStreamLit(in); \}\par
3895 String toString({\cf18 double} in) \{ {\cf19 return} toStreamLit(in); \}\par
3896 String toString({\cf18 double} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3897 \par
3898 String toString({\cf18 char} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3899 String toString({\cf18 char} {\cf18 signed} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 signed}{\cf17 >}(in)); \}\par
3900 String toString({\cf18 char} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit({\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(in)); \}\par
3901 String toString({\cf18 short} in) \{ {\cf19 return} toStreamLit(in); \}\par
3902 String toString({\cf18 short} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3903 String toString({\cf18 signed} in) \{ {\cf19 return} toStreamLit(in); \}\par
3904 String toString({\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3905 String toString({\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3906 String toString({\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3907 String toString({\cf18 long} {\cf18 long} in) \{ {\cf19 return} toStreamLit(in); \}\par
3908 String toString({\cf18 long} {\cf18 long} {\cf18 unsigned} in) \{ {\cf19 return} toStreamLit(in); \}\par
3909 \par
3910 Approx::Approx({\cf18 double} value)\par
3911         : m_epsilon({\cf17 static_cast<}{\cf18 double}{\cf17 >}(std::numeric_limits<float>::epsilon()) * 100)\par
3912         , m_scale(1.0)\par
3913         , m_value(value) \{\}\par
3914 \par
3915 Approx Approx::operator()({\cf18 double} value){\cf17  const }\{\par
3916     Approx approx(value);\par
3917     approx.epsilon(m_epsilon);\par
3918     approx.scale(m_scale);\par
3919     {\cf19 return} approx;\par
3920 \}\par
3921 \par
3922 Approx& Approx::epsilon({\cf18 double} newEpsilon) \{\par
3923     m_epsilon = newEpsilon;\par
3924     {\cf19 return} *{\cf17 this};\par
3925 \}\par
3926 Approx& Approx::scale({\cf18 double} newScale) \{\par
3927     m_scale = newScale;\par
3928     {\cf19 return} *{\cf17 this};\par
3929 \}\par
3930 \par
3931 {\cf18 bool} operator==({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{\par
3932     {\cf20 // Thanks to Richard Harris for his help refining this formula}\par
3933     {\cf19 return} std::fabs(lhs - rhs.m_value) <\par
3934            rhs.m_epsilon * (rhs.m_scale + std::max<double>(std::fabs(lhs), std::fabs(rhs.m_value)));\par
3935 \}\par
3936 {\cf18 bool} operator==({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} operator==(rhs, lhs); \}\par
3937 {\cf18 bool} operator!=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} !operator==(lhs, rhs); \}\par
3938 {\cf18 bool} operator!=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} !operator==(rhs, lhs); \}\par
3939 {\cf18 bool} operator<=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value || lhs == rhs; \}\par
3940 {\cf18 bool} operator<=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs || lhs == rhs; \}\par
3941 {\cf18 bool} operator>=({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value || lhs == rhs; \}\par
3942 {\cf18 bool} operator>=({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs || lhs == rhs; \}\par
3943 {\cf18 bool} operator<({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs < rhs.m_value && lhs != rhs; \}\par
3944 {\cf18 bool} operator<({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value < rhs && lhs != rhs; \}\par
3945 {\cf18 bool} operator>({\cf18 double} lhs, {\cf17 const} Approx& rhs) \{ {\cf19 return} lhs > rhs.m_value && lhs != rhs; \}\par
3946 {\cf18 bool} operator>({\cf17 const} Approx& lhs, {\cf18 double} rhs) \{ {\cf19 return} lhs.m_value > rhs && lhs != rhs; \}\par
3947 \par
3948 String toString({\cf17 const} Approx& in) \{\par
3949     {\cf19 return} {\cf22 "Approx( "} + doctest::toString(in.m_value) + {\cf22 " )"};\par
3950 \}\par
3951 {\cf17 const} ContextOptions* getContextOptions() \{ {\cf19 return} DOCTEST_BRANCH_ON_DISABLED({\cf17 nullptr}, g_cs); \}\par
3952 \par
3953 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4738)\par
3954 {\cf17 template} <{\cf17 typename} F>\par
3955 IsNaN<F>::operator bool(){\cf17  const }\{\par
3956     {\cf19 return} std::isnan(value) ^ flipped;\par
3957 \}\par
3958 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
3959 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<float>;\par
3960 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<double>;\par
3961 {\cf17 template} {\cf17 struct }DOCTEST_INTERFACE_DEF IsNaN<long double>;\par
3962 {\cf17 template} <{\cf17 typename} F>\par
3963 String toString(IsNaN<F> in) \{ {\cf19 return} String(in.flipped ? {\cf22 "! "} : {\cf22 ""}) + {\cf22 "IsNaN( "} + doctest::toString(in.value) + {\cf22 " )"}; \}\par
3964 String toString(IsNaN<float> in) \{ {\cf19 return} toString<float>(in); \}\par
3965 String toString(IsNaN<double> in) \{ {\cf19 return} toString<double>(in); \}\par
3966 String toString(IsNaN<double long> in) \{ {\cf19 return} toString<double long>(in); \}\par
3967 \par
3968 \} {\cf20 // namespace doctest}\par
3969 \par
3970 {\cf21 #ifdef DOCTEST_CONFIG_DISABLE}\par
3971 {\cf17 namespace }doctest \{\par
3972 Context::Context({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3973 Context::~Context() = {\cf19 default};\par
3974 {\cf18 void} Context::applyCommandLine({\cf18 int}, {\cf17 const} {\cf18 char}* {\cf17 const}*) \{\}\par
3975 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3976 {\cf18 void} Context::clearFilters() \{\}\par
3977 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 bool}) \{\}\par
3978 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf18 int}) \{\}\par
3979 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}*, {\cf17 const} {\cf18 char}*) \{\}\par
3980 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} {\cf17 false}; \}\par
3981 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{\}\par
3982 {\cf18 void} Context::setAssertHandler(detail::assert_handler) \{\}\par
3983 {\cf18 void} Context::setCout(std::ostream*) \{\}\par
3984 {\cf18 int}  Context::run() \{ {\cf19 return} 0; \}\par
3985 \par
3986 {\cf18 int}                         IReporter::get_num_active_contexts() \{ {\cf19 return} 0; \}\par
3987 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3988 {\cf18 int}                         IReporter::get_num_stringified_contexts() \{ {\cf19 return} 0; \}\par
3989 {\cf17 const} String*               IReporter::get_stringified_contexts() \{ {\cf19 return} {\cf17 nullptr}; \}\par
3990 \par
3991 {\cf18 int} registerReporter({\cf17 const} {\cf18 char}*, {\cf18 int}, IReporter*) \{ {\cf19 return} 0; \}\par
3992 \par
3993 \} {\cf20 // namespace doctest}\par
3994 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
3995 \par
3996 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_NONE)}\par
3997 {\cf21 #if !defined(DOCTEST_CONFIG_COLORS_WINDOWS) && !defined(DOCTEST_CONFIG_COLORS_ANSI)}\par
3998 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
3999 {\cf21 #define DOCTEST_CONFIG_COLORS_WINDOWS}\par
4000 {\cf21 #else }{\cf20 // linux}\par
4001 {\cf21 #define DOCTEST_CONFIG_COLORS_ANSI}\par
4002 {\cf21 #endif }{\cf20 // platform}\par
4003 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS && DOCTEST_CONFIG_COLORS_ANSI}\par
4004 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_NONE}\par
4005 \par
4006 {\cf17 namespace }doctest_detail_test_suite_ns \{\par
4007 {\cf20 // holds the current test suite}\par
4008 doctest::detail::TestSuite& getCurrentTestSuite() \{\par
4009     {\cf17 static} doctest::detail::TestSuite data\{\};\par
4010     {\cf19 return} data;\par
4011 \}\par
4012 \} {\cf20 // namespace doctest_detail_test_suite_ns}\par
4013 \par
4014 {\cf17 namespace }doctest \{\par
4015 {\cf17 namespace }\{\par
4016     {\cf20 // the int (priority) is part of the key for automatic sorting - sadly one can register a}\par
4017     {\cf20 // reporter with a duplicate name and a different priority but hopefully that won't happen often :|}\par
4018     {\cf17 using }reporterMap = std::map<std::pair<int, String>, reporterCreatorFunc>;\par
4019 \par
4020     reporterMap& getReporters() \{\par
4021         {\cf17 static} reporterMap data;\par
4022         {\cf19 return} data;\par
4023     \}\par
4024     reporterMap& getListeners() \{\par
4025         {\cf17 static} reporterMap data;\par
4026         {\cf19 return} data;\par
4027     \}\par
4028 \} {\cf20 // namespace}\par
4029 {\cf17 namespace }detail \{\par
4030 {\cf21 #define DOCTEST_ITERATE_THROUGH_REPORTERS(function, ...)                                           \\}\par
4031 {\cf21     for(auto& curr_rep : g_cs->reporters_currently_used)                                           \\}\par
4032 {\cf21     curr_rep->function(__VA_ARGS__)}\par
4033 \par
4034     {\cf18 bool} checkIfShouldThrow(assertType::Enum at) \{\par
4035         {\cf19 if}(at & assertType::is_require) \par
4036             {\cf19 return} {\cf17 true};\par
4037 \par
4038         {\cf19 if}((at & assertType::is_check) \par
4039            && getContextOptions()->abort_after > 0 &&\par
4040            (g_cs->numAssertsFailed + g_cs->numAssertsFailedCurrentTest_atomic) >=\par
4041                    getContextOptions()->abort_after)\par
4042             {\cf19 return} {\cf17 true};\par
4043 \par
4044         {\cf19 return} {\cf17 false};\par
4045     \}\par
4046 \par
4047 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4048     DOCTEST_NORETURN {\cf18 void} throwException() \{\par
4049         g_cs->shouldLogCurrentException = {\cf17 false};\par
4050         {\cf19 throw} TestFailureException(); {\cf20 // NOLINT(hicpp-exception-baseclass)}\par
4051     \}\par
4052 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4053     {\cf18 void} throwException() \{\}\par
4054 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4055 \} {\cf20 // namespace detail}\par
4056 \par
4057 {\cf17 namespace }\{\par
4058     {\cf17 using namespace }detail;\par
4059     {\cf20 // matching of a string against a wildcard mask (case sensitivity configurable) taken from}\par
4060     {\cf20 // https://www.codeproject.com/Articles/1088/Wildcard-string-compare-globbing}\par
4061     {\cf18 int} wildcmp({\cf17 const} {\cf18 char}* str, {\cf17 const} {\cf18 char}* wild, {\cf18 bool} caseSensitive) \{\par
4062         {\cf17 const} {\cf18 char}* cp = str;\par
4063         {\cf17 const} {\cf18 char}* mp = wild;\par
4064 \par
4065         {\cf19 while}((*str) && (*wild != {\cf23 '*'})) \{\par
4066             {\cf19 if}((caseSensitive ? (*wild != *str) : (tolower(*wild) != tolower(*str))) &&\par
4067                (*wild != {\cf22 '?'})) \{\par
4068                 {\cf19 return} 0;\par
4069             \}\par
4070             wild++;\par
4071             str++;\par
4072         \}\par
4073 \par
4074         {\cf19 while}(*str) \{\par
4075             {\cf19 if}(*wild == {\cf23 '*'}) \{\par
4076                 {\cf19 if}(!*++wild) \{\par
4077                     {\cf19 return} 1;\par
4078                 \}\par
4079                 mp = wild;\par
4080                 cp = str + 1;\par
4081             \} {\cf19 else} {\cf19 if}((caseSensitive ? (*wild == *str) : (tolower(*wild) == tolower(*str))) ||\par
4082                       (*wild == {\cf22 '?'})) \{\par
4083                 wild++;\par
4084                 str++;\par
4085             \} {\cf19 else} \{\par
4086                 wild = mp;   \par
4087                 str  = cp++; \par
4088             \}\par
4089         \}\par
4090 \par
4091         {\cf19 while}(*wild == {\cf23 '*'}) \{\par
4092             wild++;\par
4093         \}\par
4094         {\cf19 return} !*wild;\par
4095     \}\par
4096 \par
4097     {\cf20 // checks if the name matches any of the filters (and can be configured what to do when empty)}\par
4098     {\cf18 bool} matchesAny({\cf17 const} {\cf18 char}* name, {\cf17 const} std::vector<String>& filters, {\cf18 bool} matchEmpty,\par
4099         {\cf18 bool} caseSensitive) \{\par
4100         {\cf19 if} (filters.empty() && matchEmpty)\par
4101             {\cf19 return} {\cf17 true};\par
4102         {\cf19 for} ({\cf17 auto}& curr : filters)\par
4103             if (wildcmp(name, curr.c_str(), caseSensitive))\par
4104                 return true;\par
4105         {\cf19 return} {\cf17 false};\par
4106     \}\par
4107 \par
4108     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf18 unsigned} {\cf18 long} {\cf18 long} a, {\cf18 unsigned} {\cf18 long} {\cf18 long} b) \{\par
4109         {\cf19 return} (a << 5) + b;\par
4110     \}\par
4111 \par
4112     {\cf20 // C string hash function (djb2) - taken from http://www.cse.yorku.ca/~oz/hash.html}\par
4113     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} {\cf18 char}* str) \{\par
4114         {\cf18 unsigned} {\cf18 long} {\cf18 long} hash = 5381;\par
4115         {\cf18 char} c;\par
4116         {\cf19 while} ((c = *str++))\par
4117             hash = ((hash << 5) + hash) + c; {\cf20 // hash * 33 + c}\par
4118         {\cf19 return} hash;\par
4119     \}\par
4120 \par
4121     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} SubcaseSignature& sig) \{\par
4122         {\cf19 return} hash(hash(hash(sig.m_file), hash(sig.m_name.c_str())), sig.m_line);\par
4123     \}\par
4124 \par
4125     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs, {\cf18 size_t} count) \{\par
4126         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4127         {\cf17 auto} end = sigs.begin() + count;\par
4128         {\cf19 for} ({\cf17 auto} it = sigs.begin(); it != end; it++) \{\par
4129             running = hash(running, hash(*it));\par
4130         \}\par
4131         {\cf19 return} running;\par
4132     \}\par
4133 \par
4134     {\cf18 unsigned} {\cf18 long} {\cf18 long} hash({\cf17 const} std::vector<SubcaseSignature>& sigs) \{\par
4135         {\cf18 unsigned} {\cf18 long} {\cf18 long} running = 0;\par
4136         {\cf19 for} ({\cf17 const} SubcaseSignature& sig : sigs) \{\par
4137             running = hash(running, hash(sig));\par
4138         \}\par
4139         {\cf19 return} running;\par
4140     \}\par
4141 \} {\cf20 // namespace}\par
4142 {\cf17 namespace }detail \{\par
4143     {\cf18 bool} Subcase::checkFilters() \{\par
4144         {\cf19 if} (g_cs->subcaseStack.size() < {\cf18 size_t}(g_cs->subcase_filter_levels)) \{\par
4145             {\cf19 if} (!matchesAny(m_signature.m_name.c_str(), g_cs->filters[6], {\cf17 true}, g_cs->case_sensitive))\par
4146                 {\cf19 return} {\cf17 true};\par
4147             {\cf19 if} (matchesAny(m_signature.m_name.c_str(), g_cs->filters[7], {\cf17 false}, g_cs->case_sensitive))\par
4148                 {\cf19 return} {\cf17 true};\par
4149         \}\par
4150         {\cf19 return} {\cf17 false};\par
4151     \}\par
4152 \par
4153     Subcase::Subcase({\cf17 const} String& name, {\cf17 const} {\cf18 char}* file, {\cf18 int} line)\par
4154             : m_signature(\{name, file, line\}) \{\par
4155         {\cf19 if} (!g_cs->reachedLeaf) \{\par
4156             {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->subcaseStack.size()\par
4157                 || g_cs->nextSubcaseStack[g_cs->subcaseStack.size()] == m_signature) \{\par
4158                 {\cf20 // Going down.}\par
4159                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4160 \par
4161                 g_cs->subcaseStack.push_back(m_signature);\par
4162                 g_cs->currentSubcaseDepth++;\par
4163                 m_entered = {\cf17 true};\par
4164                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4165             \}\par
4166         \} {\cf19 else} \{\par
4167             {\cf19 if} (g_cs->subcaseStack[g_cs->currentSubcaseDepth] == m_signature) \{\par
4168                 {\cf20 // This subcase is reentered via control flow.}\par
4169                 g_cs->currentSubcaseDepth++;\par
4170                 m_entered = {\cf17 true};\par
4171                 DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_start, m_signature);\par
4172             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.size() <= g_cs->currentSubcaseDepth\par
4173                     && g_cs->fullyTraversedSubcases.find(hash(hash(g_cs->subcaseStack, g_cs->currentSubcaseDepth), hash(m_signature)))\par
4174                     == g_cs->fullyTraversedSubcases.end()) \{\par
4175                 {\cf19 if} (checkFilters()) \{ {\cf19 return}; \}\par
4176                 {\cf20 // This subcase is part of the one to be executed next.}\par
4177                 g_cs->nextSubcaseStack.clear();\par
4178                 g_cs->nextSubcaseStack.insert(g_cs->nextSubcaseStack.end(),\par
4179                     g_cs->subcaseStack.begin(), g_cs->subcaseStack.begin() + g_cs->currentSubcaseDepth);\par
4180                 g_cs->nextSubcaseStack.push_back(m_signature);\par
4181             \}\par
4182         \}\par
4183     \}\par
4184 \par
4185     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4186     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4187     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4188 \par
4189     Subcase::~Subcase() \{\par
4190         {\cf19 if} (m_entered) \{\par
4191             g_cs->currentSubcaseDepth--;\par
4192 \par
4193             {\cf19 if} (!g_cs->reachedLeaf) \{\par
4194                 {\cf20 // Leaf.}\par
4195                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4196                 g_cs->nextSubcaseStack.clear();\par
4197                 g_cs->reachedLeaf = {\cf17 true};\par
4198             \} {\cf19 else} {\cf19 if} (g_cs->nextSubcaseStack.empty()) \{\par
4199                 {\cf20 // All children are finished.}\par
4200                 g_cs->fullyTraversedSubcases.insert(hash(g_cs->subcaseStack));\par
4201             \}\par
4202 \par
4203 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4204             {\cf19 if}(std::uncaught_exceptions() > 0\par
4205 #{\cf19 else}\par
4206             {\cf19 if}(std::uncaught_exception()\par
4207 #endif\par
4208                 && g_cs->shouldLogCurrentException) \{\par
4209                 DOCTEST_ITERATE_THROUGH_REPORTERS(\par
4210                         test_case_exception, \{{\cf22 "exception thrown in subcase - will translate later "}\par
4211                                                 {\cf22 "when the whole test case has been exited (cannot "}\par
4212                                                 {\cf22 "translate while there is an active exception)"},\par
4213                                                 false\});\par
4214                 g_cs->shouldLogCurrentException = {\cf17 false};\par
4215             \}\par
4216 \par
4217             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4218         \}\par
4219     \}\par
4220 \par
4221     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4222     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4223     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4224 \par
4225     Subcase::operator bool(){\cf17  const }\{ {\cf19 return} m_entered; \}\par
4226 \par
4227     Result::Result({\cf18 bool} passed, {\cf17 const} String& decomposition)\par
4228             : m_passed(passed)\par
4229             , m_decomp(decomposition) \{\}\par
4230 \par
4231     ExpressionDecomposer::ExpressionDecomposer(assertType::Enum at)\par
4232             : m_at(at) \{\}\par
4233 \par
4234     TestSuite& TestSuite::operator*({\cf17 const} {\cf18 char}* in) \{\par
4235         m_test_suite = in;\par
4236         {\cf19 return} *{\cf17 this};\par
4237     \}\par
4238 \par
4239     TestCase::TestCase(funcType test, {\cf17 const} {\cf18 char}* file, {\cf18 unsigned} line, {\cf17 const} TestSuite& test_suite,\par
4240                        {\cf17 const} String& type, {\cf18 int} template_id) \{\par
4241         m_file              = file;\par
4242         m_line              = line;\par
4243         m_name              = {\cf17 nullptr}; {\cf20 // will be later overridden in operator*}\par
4244         m_test_suite        = test_suite.m_test_suite;\par
4245         m_description       = test_suite.m_description;\par
4246         m_skip              = test_suite.m_skip;\par
4247         m_no_breaks         = test_suite.m_no_breaks;\par
4248         m_no_output         = test_suite.m_no_output;\par
4249         m_may_fail          = test_suite.m_may_fail;\par
4250         m_should_fail       = test_suite.m_should_fail;\par
4251         m_expected_failures = test_suite.m_expected_failures;\par
4252         m_timeout           = test_suite.m_timeout;\par
4253 \par
4254         m_test        = test;\par
4255         m_type        = type;\par
4256         m_template_id = template_id;\par
4257     \}\par
4258 \par
4259     TestCase::TestCase({\cf17 const} TestCase& other)\par
4260             : TestCaseData() \{\par
4261         *{\cf17 this} = other;\par
4262     \}\par
4263 \par
4264     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(26434) {\cf20 // hides a non-virtual function}\par
4265     TestCase& TestCase::operator=(const TestCase& other) \{\par
4266         TestCaseData::operator=(other);\par
4267         m_test        = other.m_test;\par
4268         m_type        = other.m_type;\par
4269         m_template_id = other.m_template_id;\par
4270         m_full_name   = other.m_full_name;\par
4271 \par
4272         {\cf19 if}(m_template_id != -1)\par
4273             m_name = m_full_name.c_str();\par
4274         {\cf19 return} *{\cf17 this};\par
4275     \}\par
4276     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4277 \par
4278     TestCase& TestCase::operator*({\cf17 const} {\cf18 char}* in) \{\par
4279         m_name = in;\par
4280         {\cf20 // make a new name with an appended type for templated test case}\par
4281         {\cf19 if}(m_template_id != -1) \{\par
4282             m_full_name = String(m_name) + {\cf22 "<"} + m_type + {\cf22 ">"};\par
4283             {\cf20 // redirect the name to point to the newly constructed full name}\par
4284             m_name = m_full_name.c_str();\par
4285         \}\par
4286         {\cf19 return} *{\cf17 this};\par
4287     \}\par
4288 \par
4289     {\cf18 bool} TestCase::operator<({\cf17 const} TestCase& other){\cf17  const }\{\par
4290         {\cf20 // this will be used only to differentiate between test cases - not relevant for sorting}\par
4291         {\cf19 if}(m_line != other.m_line)\par
4292             {\cf19 return} m_line < other.m_line;\par
4293         {\cf17 const} {\cf18 int} name_cmp = strcmp(m_name, other.m_name);\par
4294         {\cf19 if}(name_cmp != 0)\par
4295             {\cf19 return} name_cmp < 0;\par
4296         {\cf17 const} {\cf18 int} file_cmp = m_file.compare(other.m_file);\par
4297         {\cf19 if}(file_cmp != 0)\par
4298             {\cf19 return} file_cmp < 0;\par
4299         {\cf19 return} m_template_id < other.m_template_id;\par
4300     \}\par
4301 \par
4302     {\cf20 // all the registered tests}\par
4303     std::set<TestCase>& getRegisteredTests() \{\par
4304         {\cf17 static} std::set<TestCase> data;\par
4305         {\cf19 return} data;\par
4306     \}\par
4307 \} {\cf20 // namespace detail}\par
4308 {\cf17 namespace }\{\par
4309     {\cf17 using namespace }detail;\par
4310     {\cf20 // for sorting tests by file/line}\par
4311     {\cf18 bool} fileOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4312         {\cf20 // this is needed because MSVC gives different case for drive letters}\par
4313         {\cf20 // for __FILE__ when evaluated in a header and a source file}\par
4314         {\cf17 const} {\cf18 int} res = lhs->m_file.compare(rhs->m_file, {\cf18 bool}(DOCTEST_MSVC));\par
4315         {\cf19 if}(res != 0)\par
4316             {\cf19 return} res < 0;\par
4317         {\cf19 if}(lhs->m_line != rhs->m_line)\par
4318             {\cf19 return} lhs->m_line < rhs->m_line;\par
4319         {\cf19 return} lhs->m_template_id < rhs->m_template_id;\par
4320     \}\par
4321 \par
4322     {\cf20 // for sorting tests by suite/file/line}\par
4323     {\cf18 bool} suiteOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4324         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_test_suite, rhs->m_test_suite);\par
4325         {\cf19 if}(res != 0)\par
4326             {\cf19 return} res < 0;\par
4327         {\cf19 return} fileOrderComparator(lhs, rhs);\par
4328     \}\par
4329 \par
4330     {\cf20 // for sorting tests by name/suite/file/line}\par
4331     {\cf18 bool} nameOrderComparator({\cf17 const} TestCase* lhs, {\cf17 const} TestCase* rhs) \{\par
4332         {\cf17 const} {\cf18 int} res = std::strcmp(lhs->m_name, rhs->m_name);\par
4333         {\cf19 if}(res != 0)\par
4334             {\cf19 return} res < 0;\par
4335         {\cf19 return} suiteOrderComparator(lhs, rhs);\par
4336     \}\par
4337 \par
4338     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wdeprecated-declarations"})\par
4339     void color_to_stream(std::ostream& s, Color::Enum code) \{\par
4340         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(s);    {\cf20 // for DOCTEST_CONFIG_COLORS_NONE or DOCTEST_CONFIG_COLORS_WINDOWS}\par
4341         {\cf17 static_cast<}{\cf18 void}{\cf17 >}(code); {\cf20 // for DOCTEST_CONFIG_COLORS_NONE}\par
4342 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_ANSI}\par
4343         {\cf19 if}(g_no_colors ||\par
4344            (isatty(STDOUT_FILENO) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4345             {\cf19 return};\par
4346 \par
4347         {\cf17 auto} col = {\cf22 ""};\par
4348         {\cf20 // clang-format off}\par
4349             {\cf19 switch}(code) \{ \par
4350                 {\cf19 case} Color::Red:         col = {\cf22 "[0;31m"}; {\cf19 break};\par
4351                 {\cf19 case} Color::Green:       col = {\cf22 "[0;32m"}; {\cf19 break};\par
4352                 {\cf19 case} Color::Blue:        col = {\cf22 "[0;34m"}; {\cf19 break};\par
4353                 {\cf19 case} Color::Cyan:        col = {\cf22 "[0;36m"}; {\cf19 break};\par
4354                 {\cf19 case} Color::Yellow:      col = {\cf22 "[0;33m"}; {\cf19 break};\par
4355                 {\cf19 case} Color::Grey:        col = {\cf22 "[1;30m"}; {\cf19 break};\par
4356                 {\cf19 case} Color::LightGrey:   col = {\cf22 "[0;37m"}; {\cf19 break};\par
4357                 {\cf19 case} Color::BrightRed:   col = {\cf22 "[1;31m"}; {\cf19 break};\par
4358                 {\cf19 case} Color::BrightGreen: col = {\cf22 "[1;32m"}; {\cf19 break};\par
4359                 {\cf19 case} Color::BrightWhite: col = {\cf22 "[1;37m"}; {\cf19 break};\par
4360                 {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4361                 {\cf19 case} Color::None:\par
4362                 {\cf19 case} Color::White:\par
4363                 {\cf19 default}:                 col = {\cf22 "[0m"};\par
4364             \}\par
4365         {\cf20 // clang-format on}\par
4366         s << {\cf22 "\\033"} << col;\par
4367 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_ANSI}\par
4368 \par
4369 {\cf21 #ifdef DOCTEST_CONFIG_COLORS_WINDOWS}\par
4370         {\cf19 if}(g_no_colors ||\par
4371            (_isatty(_fileno(stdout)) == {\cf17 false} && getContextOptions()->force_colors == {\cf17 false}))\par
4372             {\cf19 return};\par
4373 \par
4374         {\cf17 static} {\cf17 struct }ConsoleHelper \{\par
4375             HANDLE stdoutHandle;\par
4376             WORD   origFgAttrs;\par
4377             WORD   origBgAttrs;\par
4378 \par
4379             ConsoleHelper() \{\par
4380                 stdoutHandle = GetStdHandle(STD_OUTPUT_HANDLE);\par
4381                 CONSOLE_SCREEN_BUFFER_INFO csbiInfo;\par
4382                 GetConsoleScreenBufferInfo(stdoutHandle, &csbiInfo);\par
4383                 origFgAttrs = csbiInfo.wAttributes & ~(BACKGROUND_GREEN | BACKGROUND_RED |\par
4384                     BACKGROUND_BLUE | BACKGROUND_INTENSITY);\par
4385                 origBgAttrs = csbiInfo.wAttributes & ~(FOREGROUND_GREEN | FOREGROUND_RED |\par
4386                     FOREGROUND_BLUE | FOREGROUND_INTENSITY);\par
4387             \}\par
4388         \} ch;\par
4389 \par
4390 {\cf21 #define DOCTEST_SET_ATTR(x) SetConsoleTextAttribute(ch.stdoutHandle, x | ch.origBgAttrs)}\par
4391 \par
4392         {\cf20 // clang-format off}\par
4393         {\cf19 switch} (code) \{\par
4394             {\cf19 case} Color::White:       DOCTEST_SET_ATTR(FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4395             {\cf19 case} Color::Red:         DOCTEST_SET_ATTR(FOREGROUND_RED);                                      {\cf19 break};\par
4396             {\cf19 case} Color::Green:       DOCTEST_SET_ATTR(FOREGROUND_GREEN);                                    {\cf19 break};\par
4397             {\cf19 case} Color::Blue:        DOCTEST_SET_ATTR(FOREGROUND_BLUE);                                     {\cf19 break};\par
4398             {\cf19 case} Color::Cyan:        DOCTEST_SET_ATTR(FOREGROUND_BLUE | FOREGROUND_GREEN);                  {\cf19 break};\par
4399             {\cf19 case} Color::Yellow:      DOCTEST_SET_ATTR(FOREGROUND_RED | FOREGROUND_GREEN);                   {\cf19 break};\par
4400             {\cf19 case} Color::Grey:        DOCTEST_SET_ATTR(0);                                                   {\cf19 break};\par
4401             {\cf19 case} Color::LightGrey:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY);                                {\cf19 break};\par
4402             {\cf19 case} Color::BrightRed:   DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_RED);               {\cf19 break};\par
4403             {\cf19 case} Color::BrightGreen: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN);             {\cf19 break};\par
4404             {\cf19 case} Color::BrightWhite: DOCTEST_SET_ATTR(FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE); {\cf19 break};\par
4405             {\cf19 case} Color::None:\par
4406             {\cf19 case} Color::Bright: {\cf20 // invalid}\par
4407             {\cf19 default}:                 DOCTEST_SET_ATTR(ch.origFgAttrs);\par
4408         \}\par
4409             {\cf20 // clang-format on}\par
4410 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_COLORS_WINDOWS}\par
4411     \}\par
4412     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4413 \par
4414     std::vector<const IExceptionTranslator*>& getExceptionTranslators() \{\par
4415         {\cf17 static} std::vector<const IExceptionTranslator*> data;\par
4416         {\cf19 return} data;\par
4417     \}\par
4418 \par
4419     String translateActiveException() \{\par
4420 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4421         String res;\par
4422         {\cf17 auto}&  translators = getExceptionTranslators();\par
4423         {\cf19 for}({\cf17 auto}& curr : translators)\par
4424             if(curr->translate(res))\par
4425                 return res;\par
4426         {\cf20 // clang-format off}\par
4427         DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH({\cf22 "-Wcatch-value"})\par
4428         {\cf17 try} \{\par
4429             {\cf19 throw};\par
4430         \} {\cf19 catch}(std::exception& ex) \{\par
4431             {\cf19 return} ex.what();\par
4432         \} {\cf19 catch}(std::string& msg) \{\par
4433             {\cf19 return} msg.c_str();\par
4434         \} {\cf19 catch}({\cf17 const} {\cf18 char}* msg) \{\par
4435             {\cf19 return} msg;\par
4436         \} {\cf19 catch}(...) \{\par
4437             {\cf19 return} {\cf22 "unknown exception"};\par
4438         \}\par
4439         DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4440 {\cf20 // clang-format on}\par
4441 {\cf21 #else  }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4442         {\cf19 return} {\cf22 ""};\par
4443 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
4444     \}\par
4445 \} {\cf20 // namespace}\par
4446 \par
4447 {\cf17 namespace }detail \{\par
4448     {\cf20 // used by the macros for registering tests}\par
4449     {\cf18 int} regTest({\cf17 const} TestCase& tc) \{\par
4450         getRegisteredTests().insert(tc);\par
4451         {\cf19 return} 0;\par
4452     \}\par
4453 \par
4454     {\cf20 // sets the current test suite}\par
4455     {\cf18 int} setTestSuite({\cf17 const} TestSuite& ts) \{\par
4456         doctest_detail_test_suite_ns::getCurrentTestSuite() = ts;\par
4457         {\cf19 return} 0;\par
4458     \}\par
4459 \par
4460 {\cf21 #ifdef DOCTEST_IS_DEBUGGER_ACTIVE}\par
4461     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} DOCTEST_IS_DEBUGGER_ACTIVE(); \}\par
4462 {\cf21 #else }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4463 {\cf21 #ifdef DOCTEST_PLATFORM_LINUX}\par
4464     {\cf17 class }ErrnoGuard \{\par
4465     {\cf17 public}:\par
4466         ErrnoGuard() : m_oldErrno(errno) \{\}\par
4467         ~ErrnoGuard() \{ errno = m_oldErrno; \}\par
4468     {\cf17 private}:\par
4469         {\cf18 int} m_oldErrno;\par
4470     \};\par
4471     {\cf20 // See the comments in Catch2 for the reasoning behind this implementation:}\par
4472     {\cf20 // https://github.com/catchorg/Catch2/blob/v2.13.1/include/internal/catch_debugger.cpp#L79-L102}\par
4473     {\cf18 bool} isDebuggerActive() \{\par
4474         ErrnoGuard guard;\par
4475         std::ifstream in({\cf22 "/proc/self/status"});\par
4476         {\cf19 for}(std::string line; std::getline(in, line);) \{\par
4477             {\cf17 static} {\cf17 const} {\cf18 int} PREFIX_LEN = 11;\par
4478             {\cf19 if}(line.compare(0, PREFIX_LEN, {\cf22 "TracerPid:\\t"}) == 0) \{\par
4479                 {\cf19 return} line.length() > PREFIX_LEN && line[PREFIX_LEN] != {\cf23 '0'};\par
4480             \}\par
4481         \}\par
4482         {\cf19 return} {\cf17 false};\par
4483     \}\par
4484 {\cf21 #elif defined(DOCTEST_PLATFORM_MAC)}\par
4485     {\cf20 // The following function is taken directly from the following technical note:}\par
4486     {\cf20 // https://developer.apple.com/library/archive/qa/qa1361/_index.html}\par
4487     {\cf20 // Returns true if the current process is being debugged (either}\par
4488     {\cf20 // running under the debugger or has a debugger attached post facto).}\par
4489     {\cf18 bool} isDebuggerActive() \{\par
4490         {\cf18 int}        mib[4];\par
4491         kinfo_proc info;\par
4492         {\cf18 size_t}     size;\par
4493         {\cf20 // Initialize the flags so that, if sysctl fails for some bizarre}\par
4494         {\cf20 // reason, we get a predictable result.}\par
4495         info.kp_proc.p_flag = 0;\par
4496         {\cf20 // Initialize mib, which tells sysctl the info we want, in this case}\par
4497         {\cf20 // we're looking for information about a specific process ID.}\par
4498         mib[0] = CTL_KERN;\par
4499         mib[1] = KERN_PROC;\par
4500         mib[2] = KERN_PROC_PID;\par
4501         mib[3] = getpid();\par
4502         {\cf20 // Call sysctl.}\par
4503         size = {\cf17 sizeof}(info);\par
4504         {\cf19 if}(sysctl(mib, DOCTEST_COUNTOF(mib), &info, &size, 0, 0) != 0) \{\par
4505             std::cerr << {\cf22 "\\nCall to sysctl failed - unable to determine if debugger is active **\\n"};\par
4506             {\cf19 return} {\cf17 false};\par
4507         \}\par
4508         {\cf20 // We're being debugged if the P_TRACED flag is set.}\par
4509         {\cf19 return} ((info.kp_proc.p_flag & P_TRACED) != 0);\par
4510     \}\par
4511 {\cf21 #elif DOCTEST_MSVC || defined(__MINGW32__) || defined(__MINGW64__)}\par
4512     {\cf18 bool} isDebuggerActive() \{ return ::IsDebuggerPresent() != 0; \}\par
4513 {\cf21 #else}\par
4514     {\cf18 bool} isDebuggerActive() \{ {\cf19 return} {\cf17 false}; \}\par
4515 {\cf21 #endif }{\cf20 // Platform}\par
4516 {\cf21 #endif }{\cf20 // DOCTEST_IS_DEBUGGER_ACTIVE}\par
4517 \par
4518     {\cf18 void} registerExceptionTranslatorImpl({\cf17 const} IExceptionTranslator* et) \{\par
4519         {\cf19 if}(std::find(getExceptionTranslators().begin(), getExceptionTranslators().end(), et) ==\par
4520            getExceptionTranslators().end())\par
4521             getExceptionTranslators().push_back(et);\par
4522     \}\par
4523 \par
4524     DOCTEST_THREAD_LOCAL std::vector<IContextScope*> g_infoContexts; {\cf20 // for logging with INFO()}\par
4525 \par
4526     ContextScopeBase::ContextScopeBase() \{\par
4527         g_infoContexts.push_back({\cf17 this});\par
4528     \}\par
4529 \par
4530     ContextScopeBase::ContextScopeBase(ContextScopeBase&& other) {\cf17 noexcept} \{\par
4531         {\cf19 if} (other.need_to_destroy) \{\par
4532             other.destroy();\par
4533         \}\par
4534         other.need_to_destroy = {\cf17 false};\par
4535         g_infoContexts.push_back({\cf17 this});\par
4536     \}\par
4537 \par
4538     DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4996) {\cf20 // std::uncaught_exception is deprecated in C++17}\par
4539     DOCTEST_GCC_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4540     DOCTEST_CLANG_SUPPRESS_WARNING_WITH_PUSH("-Wdeprecated-declarations")\par
4541 \par
4542     {\cf20 // destroy cannot be inlined into the destructor because that would mean calling stringify after}\par
4543     {\cf20 // ContextScope has been destroyed (base class destructors run after derived class destructors).}\par
4544     {\cf20 // Instead, ContextScope calls this method directly from its destructor.}\par
4545     {\cf18 void} ContextScopeBase::destroy() \{\par
4546 {\cf21 #if defined(__cpp_lib_uncaught_exceptions) && __cpp_lib_uncaught_exceptions >= 201411L && (!defined(__MAC_OS_X_VERSION_MIN_REQUIRED) || __MAC_OS_X_VERSION_MIN_REQUIRED >= 101200)}\par
4547         {\cf19 if}(std::uncaught_exceptions() > 0) \{\par
4548 {\cf21 #else}\par
4549         {\cf19 if}(std::uncaught_exception()) \{\par
4550 {\cf21 #endif}\par
4551             std::ostringstream s;\par
4552             this->stringify(&s);\par
4553             g_cs->stringifiedContexts.push_back(s.str().c_str());\par
4554         \}\par
4555         g_infoContexts.pop_back();\par
4556     \}\par
4557 \par
4558     DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
4559     DOCTEST_GCC_SUPPRESS_WARNING_POP\par
4560     DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
4561 \} {\cf20 // namespace detail}\par
4562 {\cf17 namespace }\{\par
4563     {\cf17 using namespace }detail;\par
4564 \par
4565 {\cf21 #if !defined(DOCTEST_CONFIG_POSIX_SIGNALS) && !defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4566     {\cf17 struct }FatalConditionHandler\par
4567     \{\par
4568         {\cf17 static} {\cf18 void} reset() \{\}\par
4569         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4570         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4571     \};\par
4572 {\cf21 #else }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4573 \par
4574     {\cf18 void} reportFatal({\cf17 const} std::string&);\par
4575 \par
4576 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4577 \par
4578     {\cf17 struct }SignalDefs\par
4579     \{\par
4580         DWORD id;\par
4581         {\cf17 const} {\cf18 char}* name;\par
4582     \};\par
4583     {\cf20 // There is no 1-1 mapping between signals and windows exceptions.}\par
4584     {\cf20 // Windows can easily distinguish between SO and SigSegV,}\par
4585     {\cf20 // but SigInt, SigTerm, etc are handled differently.}\par
4586     SignalDefs signalDefs[] = \{\par
4587             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ILLEGAL_INSTRUCTION),\par
4588              {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4589             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_STACK_OVERFLOW), {\cf22 "SIGSEGV - Stack overflow"}\},\par
4590             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_ACCESS_VIOLATION),\par
4591              {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4592             \{{\cf17 static_cast<}DWORD{\cf17 >}(EXCEPTION_INT_DIVIDE_BY_ZERO), {\cf22 "Divide by zero error"}\},\par
4593     \};\par
4594 \par
4595     {\cf17 struct }FatalConditionHandler\par
4596     \{\par
4597         {\cf17 static} LONG CALLBACK handleException(PEXCEPTION_POINTERS ExceptionInfo) \{\par
4598             {\cf20 // Multiple threads may enter this filter/handler at once. We want the error message to be printed on the}\par
4599             {\cf20 // console just once no matter how many threads have crashed.}\par
4600             DOCTEST_DECLARE_STATIC_MUTEX(mutex)\par
4601             {\cf17 static} {\cf18 bool} execute = {\cf17 true};\par
4602             \{\par
4603                 DOCTEST_LOCK_MUTEX(mutex)\par
4604                 {\cf19 if}(execute) \{\par
4605                     {\cf18 bool} reported = {\cf17 false};\par
4606                     {\cf19 for}({\cf18 size_t} i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4607                         {\cf19 if}(ExceptionInfo->ExceptionRecord->ExceptionCode == signalDefs[i].id) \{\par
4608                             reportFatal(signalDefs[i].name);\par
4609                             reported = {\cf17 true};\par
4610                             {\cf19 break};\par
4611                         \}\par
4612                     \}\par
4613                     {\cf19 if}(reported == {\cf17 false})\par
4614                         reportFatal({\cf22 "Unhandled SEH exception caught"});\par
4615                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4616                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4617                 \}\par
4618                 execute = {\cf17 false};\par
4619             \}\par
4620             std::exit(EXIT_FAILURE);\par
4621         \}\par
4622 \par
4623         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\}\par
4624         {\cf17 static} {\cf18 void} freeAltStackMem() \{\}\par
4625 \par
4626         FatalConditionHandler() \{\par
4627             isSet = {\cf17 true};\par
4628             {\cf20 // 32k seems enough for doctest to handle stack overflow,}\par
4629             {\cf20 // but the value was found experimentally, so there is no strong guarantee}\par
4630             guaranteeSize = 32 * 1024;\par
4631             {\cf20 // Register an unhandled exception filter}\par
4632             previousTop = SetUnhandledExceptionFilter(handleException);\par
4633             {\cf20 // Pass in guarantee size to be filled}\par
4634             SetThreadStackGuarantee(&guaranteeSize);\par
4635 \par
4636             {\cf20 // On Windows uncaught exceptions from another thread, exceptions from}\par
4637             {\cf20 // destructors, or calls to std::terminate are not a SEH exception}\par
4638 \par
4639             {\cf20 // The terminal handler gets called when:}\par
4640             {\cf20 // - std::terminate is called FROM THE TEST RUNNER THREAD}\par
4641             {\cf20 // - an exception is thrown from a destructor FROM THE TEST RUNNER THREAD}\par
4642             original_terminate_handler = std::get_terminate();\par
4643             std::set_terminate([]() DOCTEST_NOEXCEPT \{\par
4644                 reportFatal({\cf22 "Terminate handler called"});\par
4645                 {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4646                     DOCTEST_BREAK_INTO_DEBUGGER();\par
4647                 std::exit(EXIT_FAILURE); {\cf20 // explicitly exit - otherwise the SIGABRT handler may be called as well}\par
4648             \});\par
4649 \par
4650             {\cf20 // SIGABRT is raised when:}\par
4651             {\cf20 // - std::terminate is called FROM A DIFFERENT THREAD}\par
4652             {\cf20 // - an exception is thrown from a destructor FROM A DIFFERENT THREAD}\par
4653             {\cf20 // - an uncaught exception is thrown FROM A DIFFERENT THREAD}\par
4654             prev_sigabrt_handler = std::signal(SIGABRT, []({\cf18 int} signal) DOCTEST_NOEXCEPT \{\par
4655                 {\cf19 if}(signal == SIGABRT) \{\par
4656                     reportFatal({\cf22 "SIGABRT - Abort (abnormal termination) signal"});\par
4657                     {\cf19 if}(isDebuggerActive() && !g_cs->no_breaks)\par
4658                         DOCTEST_BREAK_INTO_DEBUGGER();\par
4659                     std::exit(EXIT_FAILURE);\par
4660                 \}\par
4661             \});\par
4662 \par
4663             {\cf20 // The following settings are taken from google test, and more}\par
4664             {\cf20 // specifically from UnitTest::Run() inside of gtest.cc}\par
4665 \par
4666             {\cf20 // the user does not want to see pop-up dialogs about crashes}\par
4667             prev_error_mode_1 = SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |\par
4668                                              SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);\par
4669             {\cf20 // This forces the abort message to go to stderr in all circumstances.}\par
4670             prev_error_mode_2 = _set_error_mode(_OUT_TO_STDERR);\par
4671             {\cf20 // In the debug version, Visual Studio pops up a separate dialog}\par
4672             {\cf20 // offering a choice to debug the aborted program - we want to disable that.}\par
4673             prev_abort_behavior = _set_abort_behavior(0x0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4674             {\cf20 // In debug mode, the Windows CRT can crash with an assertion over invalid}\par
4675             {\cf20 // input (e.g. passing an invalid file descriptor). The default handling}\par
4676             {\cf20 // for these assertions is to pop up a dialog and wait for user input.}\par
4677             {\cf20 // Instead ask the CRT to dump such assertions to stderr non-interactively.}\par
4678             prev_report_mode = _CrtSetReportMode(_CRT_ASSERT, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);\par
4679             prev_report_file = _CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);\par
4680         \}\par
4681 \par
4682         {\cf17 static} {\cf18 void} reset() \{\par
4683             {\cf19 if}(isSet) \{\par
4684                 {\cf20 // Unregister handler and restore the old guarantee}\par
4685                 SetUnhandledExceptionFilter(previousTop);\par
4686                 SetThreadStackGuarantee(&guaranteeSize);\par
4687                 std::set_terminate(original_terminate_handler);\par
4688                 std::signal(SIGABRT, prev_sigabrt_handler);\par
4689                 SetErrorMode(prev_error_mode_1);\par
4690                 _set_error_mode(prev_error_mode_2);\par
4691                 _set_abort_behavior(prev_abort_behavior, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\par
4692                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportMode(_CRT_ASSERT, prev_report_mode));\par
4693                 {\cf17 static_cast<}{\cf18 void}{\cf17 >}(_CrtSetReportFile(_CRT_ASSERT, prev_report_file));\par
4694                 isSet = {\cf17 false};\par
4695             \}\par
4696         \}\par
4697 \par
4698         ~FatalConditionHandler() \{ reset(); \}\par
4699 \par
4700     {\cf17 private}:\par
4701         {\cf17 static} UINT         prev_error_mode_1;\par
4702         {\cf17 static} {\cf18 int}          prev_error_mode_2;\par
4703         {\cf17 static} {\cf18 unsigned} {\cf18 int} prev_abort_behavior;\par
4704         {\cf17 static} {\cf18 int}          prev_report_mode;\par
4705         {\cf17 static} _HFILE       prev_report_file;\par
4706         {\cf17 static} void (DOCTEST_CDECL *prev_sigabrt_handler)(int);\par
4707         {\cf17 static} std::terminate_handler original_terminate_handler;\par
4708         {\cf17 static} {\cf18 bool} isSet;\par
4709         {\cf17 static} ULONG guaranteeSize;\par
4710         {\cf17 static} LPTOP_LEVEL_EXCEPTION_FILTER previousTop;\par
4711     \};\par
4712 \par
4713     UINT         FatalConditionHandler::prev_error_mode_1;\par
4714     {\cf18 int}          FatalConditionHandler::prev_error_mode_2;\par
4715     {\cf18 unsigned} {\cf18 int} FatalConditionHandler::prev_abort_behavior;\par
4716     {\cf18 int}          FatalConditionHandler::prev_report_mode;\par
4717     _HFILE       FatalConditionHandler::prev_report_file;\par
4718     void (DOCTEST_CDECL *FatalConditionHandler::prev_sigabrt_handler)(int);\par
4719     std::terminate_handler FatalConditionHandler::original_terminate_handler;\par
4720     {\cf18 bool} FatalConditionHandler::isSet = {\cf17 false};\par
4721     ULONG FatalConditionHandler::guaranteeSize = 0;\par
4722     LPTOP_LEVEL_EXCEPTION_FILTER FatalConditionHandler::previousTop = {\cf17 nullptr};\par
4723 \par
4724 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4725 \par
4726     {\cf17 struct }SignalDefs\par
4727     \{\par
4728         {\cf18 int}         id;\par
4729         {\cf17 const} {\cf18 char}* name;\par
4730     \};\par
4731     SignalDefs signalDefs[] = \{\{SIGINT, {\cf22 "SIGINT - Terminal interrupt signal"}\},\par
4732                                \{SIGILL, {\cf22 "SIGILL - Illegal instruction signal"}\},\par
4733                                \{SIGFPE, {\cf22 "SIGFPE - Floating point error signal"}\},\par
4734                                \{SIGSEGV, {\cf22 "SIGSEGV - Segmentation violation signal"}\},\par
4735                                \{SIGTERM, {\cf22 "SIGTERM - Termination request signal"}\},\par
4736                                \{SIGABRT, {\cf22 "SIGABRT - Abort (abnormal termination) signal"}\}\};\par
4737 \par
4738     {\cf17 struct }FatalConditionHandler\par
4739     \{\par
4740         {\cf17 static} {\cf18 bool}             isSet;\par
4741         {\cf17 static} {\cf17 struct }sigaction oldSigActions[DOCTEST_COUNTOF(signalDefs)];\par
4742         {\cf17 static} stack_t          oldSigStack;\par
4743         {\cf17 static} {\cf18 size_t}           altStackSize;\par
4744         {\cf17 static} {\cf18 char}*            altStackMem;\par
4745 \par
4746         {\cf17 static} {\cf18 void} handleSignal({\cf18 int} sig) \{\par
4747             {\cf17 const} {\cf18 char}* name = {\cf22 "<unknown signal>"};\par
4748             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4749                 SignalDefs& def = signalDefs[i];\par
4750                 {\cf19 if}(sig == def.id) \{\par
4751                     name = def.name;\par
4752                     {\cf19 break};\par
4753                 \}\par
4754             \}\par
4755             reset();\par
4756             reportFatal(name);\par
4757             raise(sig);\par
4758         \}\par
4759 \par
4760         {\cf17 static} {\cf18 void} allocateAltStackMem() \{\par
4761             altStackMem = {\cf17 new} {\cf18 char}[altStackSize];\par
4762         \}\par
4763 \par
4764         {\cf17 static} {\cf18 void} freeAltStackMem() \{\par
4765             {\cf17 delete}[] altStackMem;\par
4766         \}\par
4767 \par
4768         FatalConditionHandler() \{\par
4769             isSet = {\cf17 true};\par
4770             stack_t sigStack;\par
4771             sigStack.ss_sp    = altStackMem;\par
4772             sigStack.ss_size  = altStackSize;\par
4773             sigStack.ss_flags = 0;\par
4774             sigaltstack(&sigStack, &oldSigStack);\par
4775             {\cf17 struct }sigaction sa = \{\};\par
4776             sa.sa_handler       = handleSignal;\par
4777             sa.sa_flags         = SA_ONSTACK;\par
4778             {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4779                 sigaction(signalDefs[i].{\cf18 id}, &sa, &oldSigActions[i]);\par
4780             \}\par
4781         \}\par
4782 \par
4783         ~FatalConditionHandler() \{ reset(); \}\par
4784         {\cf17 static} {\cf18 void} reset() \{\par
4785             {\cf19 if}(isSet) \{\par
4786                 {\cf20 // Set signals back to previous values -- hopefully nobody overwrote them in the meantime}\par
4787                 {\cf19 for}(std::size_t i = 0; i < DOCTEST_COUNTOF(signalDefs); ++i) \{\par
4788                     sigaction(signalDefs[i].{\cf18 id}, &oldSigActions[i], {\cf17 nullptr});\par
4789                 \}\par
4790                 {\cf20 // Return the old stack}\par
4791                 sigaltstack(&oldSigStack, {\cf17 nullptr});\par
4792                 isSet = {\cf17 false};\par
4793             \}\par
4794         \}\par
4795     \};\par
4796 \par
4797     {\cf18 bool}             FatalConditionHandler::isSet = {\cf17 false};\par
4798     {\cf17 struct }sigaction FatalConditionHandler::oldSigActions[DOCTEST_COUNTOF(signalDefs)] = \{\};\par
4799     stack_t          FatalConditionHandler::oldSigStack = \{\};\par
4800     {\cf18 size_t}           FatalConditionHandler::altStackSize = 4 * SIGSTKSZ;\par
4801     {\cf18 char}*            FatalConditionHandler::altStackMem = {\cf17 nullptr};\par
4802 \par
4803 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
4804 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4805 \par
4806 \} {\cf20 // namespace}\par
4807 \par
4808 {\cf17 namespace }\{\par
4809     {\cf17 using namespace }detail;\par
4810 \par
4811 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
4812 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text) ::OutputDebugStringA(text)}\par
4813 {\cf21 #else}\par
4814     {\cf20 // TODO: integration with XCode and other IDEs}\par
4815 {\cf21 #define DOCTEST_OUTPUT_DEBUG_STRING(text)}\par
4816 {\cf21 #endif }{\cf20 // Platform}\par
4817 \par
4818     {\cf18 void} addAssert(assertType::Enum at) \{\par
4819         {\cf19 if}((at & assertType::is_warn) == 0) \par
4820             g_cs->numAssertsCurrentTest_atomic++;\par
4821     \}\par
4822 \par
4823     {\cf18 void} addFailedAssert(assertType::Enum at) \{\par
4824         {\cf19 if}((at & assertType::is_warn) == 0) \par
4825             g_cs->numAssertsFailedCurrentTest_atomic++;\par
4826     \}\par
4827 \par
4828 {\cf21 #if defined(DOCTEST_CONFIG_POSIX_SIGNALS) || defined(DOCTEST_CONFIG_WINDOWS_SEH)}\par
4829     {\cf18 void} reportFatal({\cf17 const} std::string& message) \{\par
4830         g_cs->failure_flags |= TestCaseFailureReason::Crash;\par
4831 \par
4832         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception, \{message.c_str(), {\cf17 true}\});\par
4833 \par
4834         {\cf19 while} (g_cs->subcaseStack.size()) \{\par
4835             g_cs->subcaseStack.pop_back();\par
4836             DOCTEST_ITERATE_THROUGH_REPORTERS(subcase_end, DOCTEST_EMPTY);\par
4837         \}\par
4838 \par
4839         g_cs->finalizeTestCaseData();\par
4840 \par
4841         DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
4842 \par
4843         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
4844     \}\par
4845 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_POSIX_SIGNALS || DOCTEST_CONFIG_WINDOWS_SEH}\par
4846 \} {\cf20 // namespace}\par
4847 \par
4848 AssertData::AssertData(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4849     {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} StringContains& exception_string)\par
4850     : m_test_case(g_cs->currentTest), m_at(at), m_file(file), m_line(line), m_expr(expr),\par
4851     m_failed(true), m_threw(false), m_threw_as(false), m_exception_type(exception_type),\par
4852     m_exception_string(exception_string) \{\par
4853 {\cf21 #if DOCTEST_MSVC}\par
4854     {\cf19 if} (m_expr[0] == {\cf23 ' '}) {\cf20 // this happens when variadic macros are disabled under MSVC}\par
4855         ++m_expr;\par
4856 {\cf21 #endif }{\cf20 // MSVC}\par
4857 \}\par
4858 \par
4859 {\cf17 namespace }detail \{\par
4860     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4861                                  {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} String& exception_string)\par
4862         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4863 \par
4864     ResultBuilder::ResultBuilder(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4865         {\cf17 const} {\cf18 char}* exception_type, {\cf17 const} Contains& exception_string)\par
4866         : AssertData(at, file, line, expr, exception_type, exception_string) \{ \}\par
4867 \par
4868     {\cf18 void} ResultBuilder::setResult({\cf17 const} Result& res) \{\par
4869         m_decomp = res.m_decomp;\par
4870         m_failed = !res.m_passed;\par
4871     \}\par
4872 \par
4873     {\cf18 void} ResultBuilder::translateException() \{\par
4874         m_threw     = {\cf17 true};\par
4875         m_exception = translateActiveException();\par
4876     \}\par
4877 \par
4878     {\cf18 bool} ResultBuilder::log() \{\par
4879         {\cf19 if}(m_at & assertType::is_throws) \{ \par
4880             m_failed = !m_threw;\par
4881         \} {\cf19 else} {\cf19 if}((m_at & assertType::is_throws_as) && (m_at & assertType::is_throws_with)) \{ \par
4882             m_failed = !m_threw_as || !m_exception_string.check(m_exception);\par
4883         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_as) \{ \par
4884             m_failed = !m_threw_as;\par
4885         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_throws_with) \{ \par
4886             m_failed = !m_exception_string.check(m_exception);\par
4887         \} {\cf19 else} {\cf19 if}(m_at & assertType::is_nothrow) \{ \par
4888             m_failed = m_threw;\par
4889         \}\par
4890 \par
4891         {\cf19 if}(m_exception.size())\par
4892             m_exception = {\cf22 "\\""} + m_exception + {\cf22 "\\""};\par
4893 \par
4894         {\cf19 if}(is_running_in_test) \{\par
4895             addAssert(m_at);\par
4896             DOCTEST_ITERATE_THROUGH_REPORTERS(log_assert, *{\cf17 this});\par
4897 \par
4898             {\cf19 if}(m_failed)\par
4899                 addFailedAssert(m_at);\par
4900         \} {\cf19 else} {\cf19 if}(m_failed) \{\par
4901             failed_out_of_a_testing_context(*{\cf17 this});\par
4902         \}\par
4903 \par
4904         {\cf19 return} m_failed && isDebuggerActive() && !getContextOptions()->no_breaks &&\par
4905             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
4906     \}\par
4907 \par
4908     {\cf18 void} ResultBuilder::react(){\cf17  const }\{\par
4909         {\cf19 if}(m_failed && checkIfShouldThrow(m_at))\par
4910             throwException();\par
4911     \}\par
4912 \par
4913     {\cf18 void} failed_out_of_a_testing_context({\cf17 const} AssertData& ad) \{\par
4914         {\cf19 if}(g_cs->ah)\par
4915             g_cs->ah(ad);\par
4916         {\cf19 else}\par
4917             std::abort();\par
4918     \}\par
4919 \par
4920     {\cf18 bool} decomp_assert(assertType::Enum at, {\cf17 const} {\cf18 char}* file, {\cf18 int} line, {\cf17 const} {\cf18 char}* expr,\par
4921                        {\cf17 const} Result& result) \{\par
4922         {\cf18 bool} failed = !result.m_passed;\par
4923 \par
4924         {\cf20 // ###################################################################################}\par
4925         {\cf20 // IF THE DEBUGGER BREAKS HERE - GO 1 LEVEL UP IN THE CALLSTACK FOR THE FAILING ASSERT}\par
4926         {\cf20 // THIS IS THE EFFECT OF HAVING 'DOCTEST_CONFIG_SUPER_FAST_ASSERTS' DEFINED}\par
4927         {\cf20 // ###################################################################################}\par
4928         DOCTEST_ASSERT_OUT_OF_TESTS(result.m_decomp);\par
4929         DOCTEST_ASSERT_IN_TESTS(result.m_decomp);\par
4930         {\cf19 return} !failed;\par
4931     \}\par
4932 \par
4933     MessageBuilder::MessageBuilder({\cf17 const} {\cf18 char}* file, {\cf18 int} line, assertType::Enum severity) \{\par
4934         m_stream   = tlssPush();\par
4935         m_file     = file;\par
4936         m_line     = line;\par
4937         m_severity = severity;\par
4938     \}\par
4939 \par
4940     MessageBuilder::~MessageBuilder() \{\par
4941         {\cf19 if} (!logged)\par
4942             tlssPop();\par
4943     \}\par
4944 \par
4945     DOCTEST_DEFINE_INTERFACE(IExceptionTranslator)\par
4946 \par
4947     {\cf18 bool} MessageBuilder::log() \{\par
4948         {\cf19 if} (!logged) \{\par
4949             m_string = tlssPop();\par
4950             logged = {\cf17 true};\par
4951         \}\par
4952         \par
4953         DOCTEST_ITERATE_THROUGH_REPORTERS(log_message, *{\cf17 this});\par
4954 \par
4955         {\cf17 const} {\cf18 bool} isWarn = m_severity & assertType::is_warn;\par
4956 \par
4957         {\cf20 // warn is just a message in this context so we don't treat it as an assert}\par
4958         {\cf19 if}(!isWarn) \{\par
4959             addAssert(m_severity);\par
4960             addFailedAssert(m_severity);\par
4961         \}\par
4962 \par
4963         {\cf19 return} isDebuggerActive() && !getContextOptions()->no_breaks && !isWarn &&\par
4964             (g_cs->currentTest == {\cf17 nullptr} || !g_cs->currentTest->m_no_breaks); {\cf20 // break into debugger}\par
4965     \}\par
4966 \par
4967     {\cf18 void} MessageBuilder::react() \{\par
4968         {\cf19 if}(m_severity & assertType::is_require) \par
4969             throwException();\par
4970     \}\par
4971 \} {\cf20 // namespace detail}\par
4972 {\cf17 namespace }\{\par
4973     {\cf17 using namespace }detail;\par
4974 \par
4975     {\cf20 // clang-format off}\par
4976 \par
4977 {\cf20 // =================================================================================================}\par
4978 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
4979 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
4980 {\cf20 // =================================================================================================}\par
4981 \par
4982     {\cf17 class }XmlEncode \{\par
4983     {\cf17 public}:\par
4984         {\cf17 enum} ForWhat \{ ForTextNodes, ForAttributes \};\par
4985 \par
4986         XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat = ForTextNodes );\par
4987 \par
4988         {\cf18 void} encodeTo( std::ostream& os ) {\cf17 const};\par
4989 \par
4990         {\cf17 friend} std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode );\par
4991 \par
4992     {\cf17 private}:\par
4993         std::string m_str;\par
4994         ForWhat m_forWhat;\par
4995     \};\par
4996 \par
4997     {\cf17 class }XmlWriter \{\par
4998     {\cf17 public}:\par
4999 \par
5000         {\cf17 class }ScopedElement \{\par
5001         {\cf17 public}:\par
5002             ScopedElement( XmlWriter* writer );\par
5003 \par
5004             ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5005             ScopedElement& operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT;\par
5006 \par
5007             ~ScopedElement();\par
5008 \par
5009             ScopedElement& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5010 \par
5011             {\cf17 template}<{\cf17 typename} T>\par
5012             ScopedElement& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5013                 m_writer->writeAttribute( name, attribute );\par
5014                 {\cf19 return} *{\cf17 this};\par
5015             \}\par
5016 \par
5017         {\cf17 private}:\par
5018             {\cf17 mutable} XmlWriter* m_writer = {\cf17 nullptr};\par
5019         \};\par
5020 \par
5021         XmlWriter( std::ostream& os = std::cout );\par
5022         ~XmlWriter();\par
5023 \par
5024         XmlWriter( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5025         XmlWriter& operator=( XmlWriter {\cf17 const}& ) = {\cf17 delete};\par
5026 \par
5027         XmlWriter& startElement( std::string {\cf17 const}& name );\par
5028 \par
5029         ScopedElement scopedElement( std::string {\cf17 const}& name );\par
5030 \par
5031         XmlWriter& endElement();\par
5032 \par
5033         XmlWriter& writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute );\par
5034 \par
5035         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute );\par
5036 \par
5037         XmlWriter& writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute );\par
5038 \par
5039         {\cf17 template}<{\cf17 typename} T>\par
5040         XmlWriter& writeAttribute( std::string {\cf17 const}& name, T {\cf17 const}& attribute ) \{\par
5041         std::stringstream rss;\par
5042             rss << attribute;\par
5043             {\cf19 return} writeAttribute( name, rss.str() );\par
5044         \}\par
5045 \par
5046         XmlWriter& writeText( std::string {\cf17 const}& text, {\cf18 bool} indent = {\cf17 true} );\par
5047 \par
5048         {\cf20 //XmlWriter& writeComment( std::string const& text );}\par
5049 \par
5050         {\cf20 //void writeStylesheetRef( std::string const& url );}\par
5051 \par
5052         {\cf20 //XmlWriter& writeBlankLine();}\par
5053 \par
5054         {\cf18 void} ensureTagClosed();\par
5055 \par
5056         {\cf18 void} writeDeclaration();\par
5057 \par
5058     {\cf17 private}:\par
5059 \par
5060         {\cf18 void} newlineIfNecessary();\par
5061 \par
5062         {\cf18 bool} m_tagIsOpen = {\cf17 false};\par
5063         {\cf18 bool} m_needsNewline = {\cf17 false};\par
5064         std::vector<std::string> m_tags;\par
5065         std::string m_indent;\par
5066         std::ostream& m_os;\par
5067     \};\par
5068 \par
5069 {\cf20 // =================================================================================================}\par
5070 {\cf20 // The following code has been taken verbatim from Catch2/include/internal/catch_xmlwriter.h/cpp}\par
5071 {\cf20 // This is done so cherry-picking bug fixes is trivial - even the style/formatting is untouched.}\par
5072 {\cf20 // =================================================================================================}\par
5073 \par
5074 {\cf17 using }uchar = {\cf18 unsigned} char;\par
5075 \par
5076 {\cf17 namespace }\{\par
5077 \par
5078     {\cf18 size_t} trailingBytes({\cf18 unsigned} {\cf18 char} c) \{\par
5079         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5080             {\cf19 return} 2;\par
5081         \}\par
5082         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5083             {\cf19 return} 3;\par
5084         \}\par
5085         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5086             {\cf19 return} 4;\par
5087         \}\par
5088         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5089     \}\par
5090 \par
5091     uint32_t headerValue({\cf18 unsigned} {\cf18 char} c) \{\par
5092         {\cf19 if} ((c & 0xE0) == 0xC0) \{\par
5093             {\cf19 return} c & 0x1F;\par
5094         \}\par
5095         {\cf19 if} ((c & 0xF0) == 0xE0) \{\par
5096             {\cf19 return} c & 0x0F;\par
5097         \}\par
5098         {\cf19 if} ((c & 0xF8) == 0xF0) \{\par
5099             {\cf19 return} c & 0x07;\par
5100         \}\par
5101         DOCTEST_INTERNAL_ERROR({\cf22 "Invalid multibyte utf-8 start byte encountered"});\par
5102     \}\par
5103 \par
5104     {\cf18 void} hexEscapeChar(std::ostream& os, {\cf18 unsigned} {\cf18 char} c) \{\par
5105         std::ios_base::fmtflags f(os.flags());\par
5106         os << {\cf22 "\\\\x"}\par
5107             << std::uppercase << std::hex << std::setfill({\cf23 '0'}) << std::setw(2)\par
5108             << {\cf17 static_cast<}{\cf18 int}{\cf17 >}(c);\par
5109         os.flags(f);\par
5110     \}\par
5111 \par
5112 \} {\cf20 // anonymous namespace}\par
5113 \par
5114     XmlEncode::XmlEncode( std::string {\cf17 const}& str, ForWhat forWhat )\par
5115     :   m_str( str ),\par
5116         m_forWhat( forWhat )\par
5117     \{\}\par
5118 \par
5119     {\cf18 void} XmlEncode::encodeTo( std::ostream& os ){\cf17  const }\{\par
5120         {\cf20 // Apostrophe escaping not necessary if we always use " to write attributes}\par
5121         {\cf20 // (see: https://www.w3.org/TR/xml/#syntax)}\par
5122 \par
5123         {\cf19 for}( std::size_t idx = 0; idx < m_str.size(); ++ idx ) \{\par
5124             uchar c = m_str[idx];\par
5125             {\cf19 switch} (c) \{\par
5126             {\cf19 case} {\cf23 '<'}:   os << {\cf22 "&lt;"}; {\cf19 break};\par
5127             {\cf19 case} {\cf23 '&'}:   os << {\cf22 "&amp;"}; {\cf19 break};\par
5128 \par
5129             {\cf19 case} {\cf23 '>'}:\par
5130                 {\cf20 // See: https://www.w3.org/TR/xml/#syntax}\par
5131                 {\cf19 if} (idx > 2 && m_str[idx - 1] == {\cf23 ']'} && m_str[idx - 2] == {\cf23 ']'})\par
5132                     os << {\cf22 "&gt;"};\par
5133                 {\cf19 else}\par
5134                     os << c;\par
5135                 {\cf19 break};\par
5136 \par
5137             {\cf19 case} {\cf23 '\\"'}:\par
5138                 {\cf19 if} (m_forWhat == ForAttributes)\par
5139                     os << {\cf22 "&quot;"};\par
5140                 {\cf19 else}\par
5141                     os << c;\par
5142                 {\cf19 break};\par
5143 \par
5144             {\cf19 default}:\par
5145                 {\cf20 // Check for control characters and invalid utf-8}\par
5146 \par
5147                 {\cf20 // Escape control characters in standard ascii}\par
5148                 {\cf20 // see https://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0}\par
5149                 {\cf19 if} (c < 0x09 || (c > 0x0D && c < 0x20) || c == 0x7F) \{\par
5150                     hexEscapeChar(os, c);\par
5151                     {\cf19 break};\par
5152                 \}\par
5153 \par
5154                 {\cf20 // Plain ASCII: Write it to stream}\par
5155                 {\cf19 if} (c < 0x7F) \{\par
5156                     os << c;\par
5157                     {\cf19 break};\par
5158                 \}\par
5159 \par
5160                 {\cf20 // UTF-8 territory}\par
5161                 {\cf20 // Check if the encoding is valid and if it is not, hex escape bytes.}\par
5162                 {\cf20 // Important: We do not check the exact decoded values for validity, only the encoding format}\par
5163                 {\cf20 // First check that this bytes is a valid lead byte:}\par
5164                 {\cf20 // This means that it is not encoded as 1111 1XXX}\par
5165                 {\cf20 // Or as 10XX XXXX}\par
5166                 {\cf19 if} (c <  0xC0 ||\par
5167                     c >= 0xF8) \{\par
5168                     hexEscapeChar(os, c);\par
5169                     {\cf19 break};\par
5170                 \}\par
5171 \par
5172                 {\cf17 auto} encBytes = trailingBytes(c);\par
5173                 {\cf20 // Are there enough bytes left to avoid accessing out-of-bounds memory?}\par
5174                 {\cf19 if} (idx + encBytes - 1 >= m_str.size()) \{\par
5175                     hexEscapeChar(os, c);\par
5176                     {\cf19 break};\par
5177                 \}\par
5178                 {\cf20 // The header is valid, check data}\par
5179                 {\cf20 // The next encBytes bytes must together be a valid utf-8}\par
5180                 {\cf20 // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)}\par
5181                 {\cf18 bool} valid = {\cf17 true};\par
5182                 uint32_t value = headerValue(c);\par
5183                 {\cf19 for} (std::size_t n = 1; n < encBytes; ++n) \{\par
5184                     uchar nc = m_str[idx + n];\par
5185                     valid &= ((nc & 0xC0) == 0x80);\par
5186                     value = (value << 6) | (nc & 0x3F);\par
5187                 \}\par
5188 \par
5189                 {\cf19 if} (\par
5190                     {\cf20 // Wrong bit pattern of following bytes}\par
5191                     (!valid) ||\par
5192                     {\cf20 // Overlong encodings}\par
5193                     (value < 0x80) ||\par
5194                     (                 value < 0x800   && encBytes > 2) || {\cf20 // removed "0x80 <= value &&" because redundant}\par
5195                     (0x800 < value && value < 0x10000 && encBytes > 3) ||\par
5196                     {\cf20 // Encoded value out of range}\par
5197                     (value >= 0x110000)\par
5198                     ) \{\par
5199                     hexEscapeChar(os, c);\par
5200                     {\cf19 break};\par
5201                 \}\par
5202 \par
5203                 {\cf20 // If we got here, this is in fact a valid(ish) utf-8 sequence}\par
5204                 {\cf19 for} (std::size_t n = 0; n < encBytes; ++n) \{\par
5205                     os << m_str[idx + n];\par
5206                 \}\par
5207                 idx += encBytes - 1;\par
5208                 {\cf19 break};\par
5209             \}\par
5210         \}\par
5211     \}\par
5212 \par
5213     std::ostream& operator << ( std::ostream& os, XmlEncode {\cf17 const}& xmlEncode ) \{\par
5214         xmlEncode.encodeTo( os );\par
5215         {\cf19 return} os;\par
5216     \}\par
5217 \par
5218     XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer )\par
5219     :   m_writer( writer )\par
5220     \{\}\par
5221 \par
5222     XmlWriter::ScopedElement::ScopedElement( ScopedElement&& other ) DOCTEST_NOEXCEPT\par
5223     :   m_writer( other.m_writer )\{\par
5224         other.m_writer = {\cf17 nullptr};\par
5225     \}\par
5226     XmlWriter::ScopedElement& XmlWriter::ScopedElement::operator=( ScopedElement&& other ) DOCTEST_NOEXCEPT \{\par
5227         {\cf19 if} ( m_writer ) \{\par
5228             m_writer->endElement();\par
5229         \}\par
5230         m_writer = other.m_writer;\par
5231         other.m_writer = {\cf17 nullptr};\par
5232         {\cf19 return} *{\cf17 this};\par
5233     \}\par
5234 \par
5235 \par
5236     XmlWriter::ScopedElement::~ScopedElement() \{\par
5237         {\cf19 if}( m_writer )\par
5238             m_writer->endElement();\par
5239     \}\par
5240 \par
5241     XmlWriter::ScopedElement& XmlWriter::ScopedElement::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5242         m_writer->writeText( text, indent );\par
5243         {\cf19 return} *{\cf17 this};\par
5244     \}\par
5245 \par
5246     XmlWriter::XmlWriter( std::ostream& os ) : m_os( os )\par
5247     \{\par
5248         {\cf20 // writeDeclaration(); // called explicitly by the reporters that use the writer class - see issue #627}\par
5249     \}\par
5250 \par
5251     XmlWriter::~XmlWriter() \{\par
5252         {\cf19 while}( !m_tags.empty() )\par
5253             endElement();\par
5254     \}\par
5255 \par
5256     XmlWriter& XmlWriter::startElement( std::string {\cf17 const}& name ) \{\par
5257         ensureTagClosed();\par
5258         newlineIfNecessary();\par
5259         m_os << m_indent << {\cf23 '<'} << name;\par
5260         m_tags.push_back( name );\par
5261         m_indent += {\cf22 "  "};\par
5262         m_tagIsOpen = {\cf17 true};\par
5263         {\cf19 return} *{\cf17 this};\par
5264     \}\par
5265 \par
5266     XmlWriter::ScopedElement XmlWriter::scopedElement( std::string {\cf17 const}& name ) \{\par
5267         ScopedElement scoped( {\cf17 this} );\par
5268         startElement( name );\par
5269         {\cf19 return} scoped;\par
5270     \}\par
5271 \par
5272     XmlWriter& XmlWriter::endElement() \{\par
5273         newlineIfNecessary();\par
5274         m_indent = m_indent.substr( 0, m_indent.size()-2 );\par
5275         {\cf19 if}( m_tagIsOpen ) \{\par
5276             m_os << {\cf22 "/>"};\par
5277             m_tagIsOpen = {\cf17 false};\par
5278         \}\par
5279         {\cf19 else} \{\par
5280             m_os << m_indent << {\cf22 "</"} << m_tags.back() << {\cf22 ">"};\par
5281         \}\par
5282         m_os << std::endl;\par
5283         m_tags.pop_back();\par
5284         {\cf19 return} *{\cf17 this};\par
5285     \}\par
5286 \par
5287     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, std::string {\cf17 const}& attribute ) \{\par
5288         {\cf19 if}( !name.empty() && !attribute.empty() )\par
5289             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5290         {\cf19 return} *{\cf17 this};\par
5291     \}\par
5292 \par
5293     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf17 const} {\cf18 char}* attribute ) \{\par
5294         {\cf19 if}( !name.empty() && attribute && attribute[0] != {\cf23 '\\0'} )\par
5295             m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << XmlEncode( attribute, XmlEncode::ForAttributes ) << {\cf23 '"'};\par
5296         {\cf19 return} *{\cf17 this};\par
5297     \}\par
5298 \par
5299     XmlWriter& XmlWriter::writeAttribute( std::string {\cf17 const}& name, {\cf18 bool} attribute ) \{\par
5300         m_os << {\cf23 ' '} << name << {\cf22 "=\\""} << ( attribute ? {\cf22 "true"} : {\cf22 "false"} ) << {\cf23 '"'};\par
5301         {\cf19 return} *{\cf17 this};\par
5302     \}\par
5303 \par
5304     XmlWriter& XmlWriter::writeText( std::string {\cf17 const}& text, {\cf18 bool} indent ) \{\par
5305         {\cf19 if}( !text.empty() )\{\par
5306             {\cf18 bool} tagWasOpen = m_tagIsOpen;\par
5307             ensureTagClosed();\par
5308             {\cf19 if}( tagWasOpen && indent )\par
5309                 m_os << m_indent;\par
5310             m_os << XmlEncode( text );\par
5311             m_needsNewline = {\cf17 true};\par
5312         \}\par
5313         {\cf19 return} *{\cf17 this};\par
5314     \}\par
5315 \par
5316     {\cf20 //XmlWriter& XmlWriter::writeComment( std::string const& text ) \{}\par
5317     {\cf20 //    ensureTagClosed();}\par
5318     {\cf20 //    m_os << m_indent << "<!--" << text << "-->";}\par
5319     {\cf20 //    m_needsNewline = true;}\par
5320     {\cf20 //    return *this;}\par
5321     {\cf20 //\}}\par
5322 \par
5323     {\cf20 //void XmlWriter::writeStylesheetRef( std::string const& url ) \{}\par
5324     {\cf20 //    m_os << "<?xml-stylesheet type=\\"text/xsl\\" href=\\"" << url << "\\"?>\\n";}\par
5325     {\cf20 //\}}\par
5326 \par
5327     {\cf20 //XmlWriter& XmlWriter::writeBlankLine() \{}\par
5328     {\cf20 //    ensureTagClosed();}\par
5329     {\cf20 //    m_os << '\\n';}\par
5330     {\cf20 //    return *this;}\par
5331     {\cf20 //\}}\par
5332 \par
5333     {\cf18 void} XmlWriter::ensureTagClosed() \{\par
5334         {\cf19 if}( m_tagIsOpen ) \{\par
5335             m_os << {\cf22 ">"} << std::endl;\par
5336             m_tagIsOpen = {\cf17 false};\par
5337         \}\par
5338     \}\par
5339 \par
5340     {\cf18 void} XmlWriter::writeDeclaration() \{\par
5341         m_os << {\cf22 "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n"};\par
5342     \}\par
5343 \par
5344     {\cf18 void} XmlWriter::newlineIfNecessary() \{\par
5345         {\cf19 if}( m_needsNewline ) \{\par
5346             m_os << std::endl;\par
5347             m_needsNewline = {\cf17 false};\par
5348         \}\par
5349     \}\par
5350 \par
5351 {\cf20 // =================================================================================================}\par
5352 {\cf20 // End of copy-pasted code from Catch}\par
5353 {\cf20 // =================================================================================================}\par
5354 \par
5355     {\cf20 // clang-format on}\par
5356 \par
5357     {\cf17 struct }XmlReporter : {\cf17 public} IReporter\par
5358     \{\par
5359         XmlWriter xml;\par
5360         DOCTEST_DECLARE_MUTEX(mutex)\par
5361 \par
5362         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5363         {\cf17 const} ContextOptions& opt;\par
5364         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5365 \par
5366         XmlReporter({\cf17 const} ContextOptions& co)\par
5367                 : xml(*co.cout)\par
5368                 , opt(co) \{\}\par
5369 \par
5370         {\cf18 void} log_contexts() \{\par
5371             {\cf18 int} num_contexts = get_num_active_contexts();\par
5372             {\cf19 if}(num_contexts) \{\par
5373                 {\cf17 auto}              contexts = get_active_contexts();\par
5374                 std::stringstream ss;\par
5375                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5376                     contexts[i]->stringify(&ss);\par
5377                     xml.scopedElement({\cf22 "Info"}).writeText(ss.str());\par
5378                     ss.str({\cf22 ""});\par
5379                 \}\par
5380             \}\par
5381         \}\par
5382 \par
5383         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5384 \par
5385         {\cf18 void} test_case_start_impl({\cf17 const} TestCaseData& in) \{\par
5386             {\cf18 bool} open_ts_tag = {\cf17 false};\par
5387             {\cf19 if}(tc != {\cf17 nullptr}) \{ {\cf20 // we have already opened a test suite}\par
5388                 {\cf19 if}(std::strcmp(tc->m_test_suite, in.m_test_suite) != 0) \{\par
5389                     xml.endElement();\par
5390                     open_ts_tag = {\cf17 true};\par
5391                 \}\par
5392             \}\par
5393             {\cf19 else} \{\par
5394                 open_ts_tag = {\cf17 true}; {\cf20 // first test case ==> first test suite}\par
5395             \}\par
5396 \par
5397             {\cf19 if}(open_ts_tag) \{\par
5398                 xml.startElement({\cf22 "TestSuite"});\par
5399                 xml.writeAttribute({\cf22 "name"}, in.m_test_suite);\par
5400             \}\par
5401 \par
5402             tc = &in;\par
5403             xml.startElement({\cf22 "TestCase"})\par
5404                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5405                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file.c_str()))\par
5406                     .writeAttribute({\cf22 "line"}, line(in.m_line))\par
5407                     .writeAttribute({\cf22 "description"}, in.m_description);\par
5408 \par
5409             {\cf19 if}(Approx(in.m_timeout) != 0)\par
5410                 xml.writeAttribute({\cf22 "timeout"}, in.m_timeout);\par
5411             {\cf19 if}(in.m_may_fail)\par
5412                 xml.writeAttribute({\cf22 "may_fail"}, {\cf17 true});\par
5413             {\cf19 if}(in.m_should_fail)\par
5414                 xml.writeAttribute({\cf22 "should_fail"}, {\cf17 true});\par
5415         \}\par
5416 \par
5417         {\cf20 // =========================================================================================}\par
5418         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5419         {\cf20 // =========================================================================================}\par
5420 \par
5421         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
5422             test_run_start();\par
5423             {\cf19 if}(opt.list_reporters) \{\par
5424                 {\cf19 for}({\cf17 auto}& curr : getListeners())\par
5425                     xml.scopedElement({\cf22 "Listener"})\par
5426                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5427                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5428                 {\cf19 for}({\cf17 auto}& curr : getReporters())\par
5429                     xml.scopedElement({\cf22 "Reporter"})\par
5430                             .writeAttribute({\cf22 "priority"}, curr.first.first)\par
5431                             .writeAttribute({\cf22 "name"}, curr.first.second);\par
5432             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
5433                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i) \{\par
5434                     xml.scopedElement({\cf22 "TestCase"}).writeAttribute({\cf22 "name"}, in.data[i]->m_name)\par
5435                         .writeAttribute({\cf22 "testsuite"}, in.data[i]->m_test_suite)\par
5436                         .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.data[i]->m_file.c_str()))\par
5437                         .writeAttribute({\cf22 "line"}, line(in.data[i]->m_line))\par
5438                         .writeAttribute({\cf22 "skipped"}, in.data[i]->m_skip);\par
5439                 \}\par
5440                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5441                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5442             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
5443                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
5444                     xml.scopedElement({\cf22 "TestSuite"}).writeAttribute({\cf22 "name"}, in.data[i]->m_test_suite);\par
5445                 xml.scopedElement({\cf22 "OverallResultsTestCases"})\par
5446                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestCasesPassingFilters);\par
5447                 xml.scopedElement({\cf22 "OverallResultsTestSuites"})\par
5448                         .writeAttribute({\cf22 "unskipped"}, in.run_stats->numTestSuitesPassingFilters);\par
5449             \}\par
5450             xml.endElement();\par
5451         \}\par
5452 \par
5453         {\cf18 void} test_run_start(){\cf17  override }\{\par
5454             xml.writeDeclaration();\par
5455 \par
5456             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5457             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5458 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5459             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5460                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5461 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5462 \par
5463             xml.startElement({\cf22 "doctest"}).writeAttribute({\cf22 "binary"}, binary_name);\par
5464             {\cf19 if}(opt.no_version == {\cf17 false})\par
5465                 xml.writeAttribute({\cf22 "version"}, DOCTEST_VERSION_STR);\par
5466 \par
5467             {\cf20 // only the consequential ones (TODO: filters)}\par
5468             xml.scopedElement({\cf22 "Options"})\par
5469                     .writeAttribute({\cf22 "order_by"}, opt.order_by.c_str())\par
5470                     .writeAttribute({\cf22 "rand_seed"}, opt.rand_seed)\par
5471                     .writeAttribute({\cf22 "first"}, opt.first)\par
5472                     .writeAttribute({\cf22 "last"}, opt.last)\par
5473                     .writeAttribute({\cf22 "abort_after"}, opt.abort_after)\par
5474                     .writeAttribute({\cf22 "subcase_filter_levels"}, opt.subcase_filter_levels)\par
5475                     .writeAttribute({\cf22 "case_sensitive"}, opt.case_sensitive)\par
5476                     .writeAttribute({\cf22 "no_throw"}, opt.no_throw)\par
5477                     .writeAttribute({\cf22 "no_skip"}, opt.no_skip);\par
5478         \}\par
5479 \par
5480         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5481             {\cf19 if}(tc) {\cf20 // the TestSuite tag - only if there has been at least 1 test case}\par
5482                 xml.endElement();\par
5483 \par
5484             xml.scopedElement({\cf22 "OverallResultsAsserts"})\par
5485                     .writeAttribute({\cf22 "successes"}, p.numAsserts - p.numAssertsFailed)\par
5486                     .writeAttribute({\cf22 "failures"}, p.numAssertsFailed);\par
5487 \par
5488             xml.startElement({\cf22 "OverallResultsTestCases"})\par
5489                     .writeAttribute({\cf22 "successes"},\par
5490                                     p.numTestCasesPassingFilters - p.numTestCasesFailed)\par
5491                     .writeAttribute({\cf22 "failures"}, p.numTestCasesFailed);\par
5492             {\cf19 if}(opt.no_skipped_summary == {\cf17 false})\par
5493                 xml.writeAttribute({\cf22 "skipped"}, p.numTestCases - p.numTestCasesPassingFilters);\par
5494             xml.endElement();\par
5495 \par
5496             xml.endElement();\par
5497         \}\par
5498 \par
5499         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5500             test_case_start_impl(in);\par
5501             xml.ensureTagClosed();\par
5502         \}\par
5503         \par
5504         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5505 \par
5506         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
5507             xml.startElement({\cf22 "OverallResultsAsserts"})\par
5508                     .writeAttribute({\cf22 "successes"},\par
5509                                     st.numAssertsCurrentTest - st.numAssertsFailedCurrentTest)\par
5510                     .writeAttribute({\cf22 "failures"}, st.numAssertsFailedCurrentTest)\par
5511                     .writeAttribute({\cf22 "test_case_success"}, st.testCaseSuccess);\par
5512             {\cf19 if}(opt.duration)\par
5513                 xml.writeAttribute({\cf22 "duration"}, st.seconds);\par
5514             {\cf19 if}(tc->m_expected_failures)\par
5515                 xml.writeAttribute({\cf22 "expected_failures"}, tc->m_expected_failures);\par
5516             xml.endElement();\par
5517 \par
5518             xml.endElement();\par
5519         \}\par
5520 \par
5521         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5522             DOCTEST_LOCK_MUTEX(mutex)\par
5523 \par
5524             xml.scopedElement({\cf22 "Exception"})\par
5525                     .writeAttribute({\cf22 "crash"}, e.is_crash)\par
5526                     .writeText(e.error_string.c_str());\par
5527         \}\par
5528 \par
5529         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5530             xml.startElement({\cf22 "SubCase"})\par
5531                     .writeAttribute({\cf22 "name"}, in.m_name)\par
5532                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(in.m_file))\par
5533                     .writeAttribute({\cf22 "line"}, line(in.m_line));\par
5534             xml.ensureTagClosed();\par
5535         \}\par
5536 \par
5537         {\cf18 void} subcase_end(){\cf17  override }\{ xml.endElement(); \}\par
5538 \par
5539         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5540             {\cf19 if}(!rb.m_failed && !opt.success)\par
5541                 {\cf19 return};\par
5542 \par
5543             DOCTEST_LOCK_MUTEX(mutex)\par
5544 \par
5545             xml.startElement({\cf22 "Expression"})\par
5546                     .writeAttribute({\cf22 "success"}, !rb.m_failed)\par
5547                     .writeAttribute({\cf22 "type"}, assertString(rb.m_at))\par
5548                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(rb.m_file))\par
5549                     .writeAttribute({\cf22 "line"}, line(rb.m_line));\par
5550 \par
5551             xml.scopedElement({\cf22 "Original"}).writeText(rb.m_expr);\par
5552 \par
5553             {\cf19 if}(rb.m_threw)\par
5554                 xml.scopedElement({\cf22 "Exception"}).writeText(rb.m_exception.c_str());\par
5555 \par
5556             {\cf19 if}(rb.m_at & assertType::is_throws_as)\par
5557                 xml.scopedElement({\cf22 "ExpectedException"}).writeText(rb.m_exception_type);\par
5558             {\cf19 if}(rb.m_at & assertType::is_throws_with)\par
5559                 xml.scopedElement({\cf22 "ExpectedExceptionString"}).writeText(rb.m_exception_string.c_str());\par
5560             {\cf19 if}((rb.m_at & assertType::is_normal) && !rb.m_threw)\par
5561                 xml.scopedElement({\cf22 "Expanded"}).writeText(rb.m_decomp.c_str());\par
5562 \par
5563             log_contexts();\par
5564 \par
5565             xml.endElement();\par
5566         \}\par
5567 \par
5568         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
5569             DOCTEST_LOCK_MUTEX(mutex)\par
5570 \par
5571             xml.startElement({\cf22 "Message"})\par
5572                     .writeAttribute({\cf22 "type"}, failureString(mb.m_severity))\par
5573                     .writeAttribute({\cf22 "filename"}, skipPathFromFilename(mb.m_file))\par
5574                     .writeAttribute({\cf22 "line"}, line(mb.m_line));\par
5575 \par
5576             xml.scopedElement({\cf22 "Text"}).writeText(mb.m_string.c_str());\par
5577 \par
5578             log_contexts();\par
5579 \par
5580             xml.endElement();\par
5581         \}\par
5582 \par
5583         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5584             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
5585                 test_case_start_impl(in);\par
5586                 xml.writeAttribute({\cf22 "skipped"}, {\cf22 "true"});\par
5587                 xml.endElement();\par
5588             \}\par
5589         \}\par
5590     \};\par
5591 \par
5592     DOCTEST_REGISTER_REPORTER({\cf22 "xml"}, 0, XmlReporter);\par
5593 \par
5594     {\cf18 void} fulltext_log_assert_to_stream(std::ostream& s, {\cf17 const} AssertData& rb) \{\par
5595         {\cf19 if}((rb.m_at & (assertType::is_throws_as | assertType::is_throws_with)) ==\par
5596             0) \par
5597             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 " ) "}\par
5598                 << Color::None;\par
5599 \par
5600         {\cf19 if}(rb.m_at & assertType::is_throws) \{ \par
5601             s << (rb.m_threw ? {\cf22 "threw as expected!"} : {\cf22 "did NOT throw at all!"}) << {\cf22 "\\n"};\par
5602         \} {\cf19 else} {\cf19 if}((rb.m_at & assertType::is_throws_as) &&\par
5603                     (rb.m_at & assertType::is_throws_with)) \{ \par
5604             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5605                 << rb.m_exception_string.c_str()\par
5606                 << {\cf22 "\\", "} << rb.m_exception_type << {\cf22 " ) "} << Color::None;\par
5607             {\cf19 if}(rb.m_threw) \{\par
5608                 {\cf19 if}(!rb.m_failed) \{\par
5609                     s << {\cf22 "threw as expected!\\n"};\par
5610                 \} {\cf19 else} \{\par
5611                     s << {\cf22 "threw a DIFFERENT exception! (contents: "} << rb.m_exception << {\cf22 ")\\n"};\par
5612                 \}\par
5613             \} {\cf19 else} \{\par
5614                 s << {\cf22 "did NOT throw at all!\\n"};\par
5615             \}\par
5616         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5617                     assertType::is_throws_as) \{ \par
5618             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", "}\par
5619                 << rb.m_exception_type << {\cf22 " ) "} << Color::None\par
5620                 << (rb.m_threw ? (rb.m_threw_as ? {\cf22 "threw as expected!"} :\par
5621                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5622                                 {\cf22 "did NOT throw at all!"})\par
5623                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5624         \} {\cf19 else} {\cf19 if}(rb.m_at &\par
5625                     assertType::is_throws_with) \{ \par
5626             s << Color::Cyan << assertString(rb.m_at) << {\cf22 "( "} << rb.m_expr << {\cf22 ", \\""}\par
5627                 << rb.m_exception_string.c_str()\par
5628                 << {\cf22 "\\" ) "} << Color::None\par
5629                 << (rb.m_threw ? (!rb.m_failed ? {\cf22 "threw as expected!"} :\par
5630                                                 {\cf22 "threw a DIFFERENT exception: "}) :\par
5631                                 {\cf22 "did NOT throw at all!"})\par
5632                 << Color::Cyan << rb.m_exception << {\cf22 "\\n"};\par
5633         \} {\cf19 else} {\cf19 if}(rb.m_at & assertType::is_nothrow) \{ \par
5634             s << (rb.m_threw ? {\cf22 "THREW exception: "} : {\cf22 "didn't throw!"}) << Color::Cyan\par
5635                 << rb.m_exception << {\cf22 "\\n"};\par
5636         \} {\cf19 else} \{\par
5637             s << (rb.m_threw ? {\cf22 "THREW exception: "} :\par
5638                                 (!rb.m_failed ? {\cf22 "is correct!\\n"} : {\cf22 "is NOT correct!\\n"}));\par
5639             {\cf19 if}(rb.m_threw)\par
5640                 s << rb.m_exception << {\cf22 "\\n"};\par
5641             {\cf19 else}\par
5642                 s << {\cf22 "  values: "} << assertString(rb.m_at) << {\cf22 "( "} << rb.m_decomp << {\cf22 " )\\n"};\par
5643         \}\par
5644     \}\par
5645 \par
5646     {\cf20 // TODO:}\par
5647     {\cf20 // - log_message()}\par
5648     {\cf20 // - respond to queries}\par
5649     {\cf20 // - honor remaining options}\par
5650     {\cf20 // - more attributes in tags}\par
5651     {\cf17 struct }JUnitReporter : {\cf17 public} IReporter\par
5652     \{\par
5653         XmlWriter xml;\par
5654         DOCTEST_DECLARE_MUTEX(mutex)\par
5655         Timer timer;\par
5656         std::vector<String> deepestSubcaseStackNames;\par
5657 \par
5658         {\cf17 struct }JUnitTestCaseData\par
5659         \{\par
5660             {\cf17 static} std::string getCurrentTimestamp() \{\par
5661                 {\cf20 // Beware, this is not reentrant because of backward compatibility issues}\par
5662                 {\cf20 // Also, UTC only, again because of backward compatibility (%z is C++11)}\par
5663                 time_t rawtime;\par
5664                 std::time(&rawtime);\par
5665                 {\cf17 auto} {\cf17 const} timeStampSize = {\cf17 sizeof}({\cf22 "2017-01-16T17:06:45Z"});\par
5666 \par
5667                 std::tm timeInfo;\par
5668 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5669                 gmtime_s(&timeInfo, &rawtime);\par
5670 {\cf21 #else }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5671                 gmtime_r(&rawtime, &timeInfo);\par
5672 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5673 \par
5674                 {\cf18 char} timeStamp[timeStampSize];\par
5675                 {\cf17 const} {\cf18 char}* {\cf17 const} fmt = {\cf22 "%Y-%m-%dT%H:%M:%SZ"};\par
5676 \par
5677                 std::strftime(timeStamp, timeStampSize, fmt, &timeInfo);\par
5678                 {\cf19 return} std::string(timeStamp);\par
5679             \}\par
5680 \par
5681             {\cf17 struct }JUnitTestMessage\par
5682             \{\par
5683                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _type, {\cf17 const} std::string& _details)\par
5684                     : message(_message), type(_type), details(_details) \{\}\par
5685 \par
5686                 JUnitTestMessage({\cf17 const} std::string& _message, {\cf17 const} std::string& _details)\par
5687                     : message(_message), type(), details(_details) \{\}\par
5688 \par
5689                 std::string message, type, details;\par
5690             \};\par
5691 \par
5692             {\cf17 struct }JUnitTestCase\par
5693             \{\par
5694                 JUnitTestCase({\cf17 const} std::string& _classname, {\cf17 const} std::string& _name)\par
5695                     : classname(_classname), name(_name), time(0), failures() \{\}\par
5696 \par
5697                 std::string classname, name;\par
5698                 {\cf18 double} time;\par
5699                 std::vector<JUnitTestMessage> failures, errors;\par
5700             \};\par
5701 \par
5702             {\cf18 void} add({\cf17 const} std::string& classname, {\cf17 const} std::string& name) \{\par
5703                 testcases.emplace_back(classname, name);\par
5704             \}\par
5705 \par
5706             {\cf18 void} appendSubcaseNamesToLastTestcase(std::vector<String> nameStack) \{\par
5707                 {\cf19 for}({\cf17 auto}& curr: nameStack)\par
5708                     if(curr.size())\par
5709                         testcases.back().name += std::string({\cf22 "/"}) + curr.c_str();\par
5710             \}\par
5711 \par
5712             {\cf18 void} addTime({\cf18 double} time) \{\par
5713                 {\cf19 if}(time < 1e-4)\par
5714                     time = 0;\par
5715                 testcases.back().time = time;\par
5716                 totalSeconds += time;\par
5717             \}\par
5718 \par
5719             {\cf18 void} addFailure({\cf17 const} std::string& message, {\cf17 const} std::string& type, {\cf17 const} std::string& details) \{\par
5720                 testcases.back().failures.emplace_back(message, type, details);\par
5721                 ++totalFailures;\par
5722             \}\par
5723 \par
5724             {\cf18 void} addError({\cf17 const} std::string& message, {\cf17 const} std::string& details) \{\par
5725                 testcases.back().errors.emplace_back(message, details);\par
5726                 ++totalErrors;\par
5727             \}\par
5728 \par
5729             std::vector<JUnitTestCase> testcases;\par
5730             {\cf18 double} totalSeconds = 0;\par
5731             {\cf18 int} totalErrors = 0, totalFailures = 0;\par
5732         \};\par
5733 \par
5734         JUnitTestCaseData testCaseData;\par
5735 \par
5736         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5737         {\cf17 const} ContextOptions& opt;\par
5738         {\cf17 const} TestCaseData*   tc = {\cf17 nullptr};\par
5739 \par
5740         JUnitReporter({\cf17 const} ContextOptions& co)\par
5741                 : xml(*co.cout)\par
5742                 , opt(co) \{\}\par
5743 \par
5744         {\cf18 unsigned} line({\cf18 unsigned} l){\cf17  const }\{ {\cf19 return} opt.no_line_numbers ? 0 : l; \}\par
5745 \par
5746         {\cf20 // =========================================================================================}\par
5747         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
5748         {\cf20 // =========================================================================================}\par
5749 \par
5750         {\cf18 void} report_query({\cf17 const} QueryData&){\cf17  override }\{\par
5751             xml.writeDeclaration();\par
5752         \}\par
5753 \par
5754         {\cf18 void} test_run_start(){\cf17  override }\{\par
5755             xml.writeDeclaration();\par
5756         \}\par
5757 \par
5758         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
5759             {\cf20 // remove .exe extension - mainly to have the same output on UNIX and Windows}\par
5760             std::string binary_name = skipPathFromFilename(opt.binary_name.c_str());\par
5761 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
5762             {\cf19 if}(binary_name.rfind({\cf22 ".exe"}) != std::string::npos)\par
5763                 binary_name = binary_name.substr(0, binary_name.length() - 4);\par
5764 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
5765             xml.startElement({\cf22 "testsuites"});\par
5766             xml.startElement({\cf22 "testsuite"}).writeAttribute({\cf22 "name"}, binary_name)\par
5767                     .writeAttribute({\cf22 "errors"}, testCaseData.totalErrors)\par
5768                     .writeAttribute({\cf22 "failures"}, testCaseData.totalFailures)\par
5769                     .writeAttribute({\cf22 "tests"}, p.numAsserts);\par
5770             {\cf19 if}(opt.no_time_in_output == {\cf17 false}) \{\par
5771                 xml.writeAttribute({\cf22 "time"}, testCaseData.totalSeconds);\par
5772                 xml.writeAttribute({\cf22 "timestamp"}, JUnitTestCaseData::getCurrentTimestamp());\par
5773             \}\par
5774             {\cf19 if}(opt.no_version == {\cf17 false})\par
5775                 xml.writeAttribute({\cf22 "doctest_version"}, DOCTEST_VERSION_STR);\par
5776 \par
5777             {\cf19 for}({\cf17 const} {\cf17 auto}& testCase : testCaseData.testcases) \{\par
5778                 xml.startElement({\cf22 "testcase"})\par
5779                     .writeAttribute({\cf22 "classname"}, testCase.classname)\par
5780                     .writeAttribute({\cf22 "name"}, testCase.name);\par
5781                 {\cf19 if}(opt.no_time_in_output == {\cf17 false})\par
5782                     xml.writeAttribute({\cf22 "time"}, testCase.time);\par
5783                 {\cf20 // This is not ideal, but it should be enough to mimic gtest's junit output.}\par
5784                 xml.writeAttribute({\cf22 "status"}, {\cf22 "run"});\par
5785 \par
5786                 {\cf19 for}({\cf17 const} {\cf17 auto}& failure : testCase.failures) \{\par
5787                     xml.scopedElement({\cf22 "failure"})\par
5788                         .writeAttribute({\cf22 "message"}, failure.message)\par
5789                         .writeAttribute({\cf22 "type"}, failure.type)\par
5790                         .writeText(failure.details, {\cf17 false});\par
5791                 \}\par
5792 \par
5793                 {\cf19 for}({\cf17 const} {\cf17 auto}& error : testCase.errors) \{\par
5794                     xml.scopedElement({\cf22 "error"})\par
5795                         .writeAttribute({\cf22 "message"}, error.message)\par
5796                         .writeText(error.details);\par
5797                 \}\par
5798 \par
5799                 xml.endElement();\par
5800             \}\par
5801             xml.endElement();\par
5802             xml.endElement();\par
5803         \}\par
5804 \par
5805         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5806             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5807             timer.start();\par
5808         \}\par
5809 \par
5810         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData& in){\cf17  override }\{\par
5811             testCaseData.addTime(timer.getElapsedSeconds());\par
5812             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5813             deepestSubcaseStackNames.clear();\par
5814 \par
5815             timer.start();\par
5816             testCaseData.add(skipPathFromFilename(in.m_file.c_str()), in.m_name);\par
5817         \}\par
5818 \par
5819         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats&){\cf17  override }\{\par
5820             testCaseData.addTime(timer.getElapsedSeconds());\par
5821             testCaseData.appendSubcaseNamesToLastTestcase(deepestSubcaseStackNames);\par
5822             deepestSubcaseStackNames.clear();\par
5823         \}\par
5824 \par
5825         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
5826             DOCTEST_LOCK_MUTEX(mutex)\par
5827             testCaseData.addError({\cf22 "exception"}, e.error_string.c_str());\par
5828         \}\par
5829 \par
5830         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& in){\cf17  override }\{\par
5831             deepestSubcaseStackNames.push_back(in.m_name);\par
5832         \}\par
5833 \par
5834         {\cf18 void} subcase_end(){\cf17  override }\{\}\par
5835 \par
5836         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
5837             {\cf19 if}(!rb.m_failed) {\cf20 // report only failures & ignore the `success` option}\par
5838                 {\cf19 return};\par
5839 \par
5840             DOCTEST_LOCK_MUTEX(mutex)\par
5841 \par
5842             std::ostringstream os;\par
5843             os << skipPathFromFilename(rb.m_file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5844               << line(rb.m_line) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << std::endl;\par
5845 \par
5846             fulltext_log_assert_to_stream(os, rb);\par
5847             log_contexts(os);\par
5848             testCaseData.addFailure(rb.m_decomp.c_str(), assertString(rb.m_at), os.str());\par
5849         \}\par
5850 \par
5851         {\cf18 void} log_message({\cf17 const} MessageData&){\cf17  override }\{\}\par
5852 \par
5853         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
5854 \par
5855         {\cf18 void} log_contexts(std::ostringstream& s) \{\par
5856             {\cf18 int} num_contexts = get_num_active_contexts();\par
5857             {\cf19 if}(num_contexts) \{\par
5858                 {\cf17 auto} contexts = get_active_contexts();\par
5859 \par
5860                 s << {\cf22 "  logged: "};\par
5861                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5862                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5863                     contexts[i]->stringify(&s);\par
5864                     s << std::endl;\par
5865                 \}\par
5866             \}\par
5867         \}\par
5868     \};\par
5869 \par
5870     DOCTEST_REGISTER_REPORTER({\cf22 "junit"}, 0, JUnitReporter);\par
5871 \par
5872     {\cf17 struct }Whitespace\par
5873     \{\par
5874         {\cf18 int} nrSpaces;\par
5875         {\cf17 explicit} Whitespace({\cf18 int} nr)\par
5876                 : nrSpaces(nr) \{\}\par
5877     \};\par
5878 \par
5879     std::ostream& operator<<(std::ostream& out, {\cf17 const} Whitespace& ws) \{\par
5880         {\cf19 if}(ws.nrSpaces != 0)\par
5881             out << std::setw(ws.nrSpaces) << {\cf23 ' '};\par
5882         {\cf19 return} out;\par
5883     \}\par
5884 \par
5885     {\cf17 struct }ConsoleReporter : {\cf17 public} IReporter\par
5886     \{\par
5887         std::ostream&                 s;\par
5888         {\cf18 bool}                          hasLoggedCurrentTestStart;\par
5889         std::vector<SubcaseSignature> subcasesStack;\par
5890         {\cf18 size_t}                        currentSubcaseLevel;\par
5891         DOCTEST_DECLARE_MUTEX(mutex)\par
5892 \par
5893         {\cf20 // caching pointers/references to objects of these types - safe to do}\par
5894         {\cf17 const} ContextOptions& opt;\par
5895         {\cf17 const} TestCaseData*   tc;\par
5896 \par
5897         ConsoleReporter({\cf17 const} ContextOptions& co)\par
5898                 : s(*co.cout)\par
5899                 , opt(co) \{\}\par
5900 \par
5901         ConsoleReporter({\cf17 const} ContextOptions& co, std::ostream& ostr)\par
5902                 : s(ostr)\par
5903                 , opt(co) \{\}\par
5904 \par
5905         {\cf20 // =========================================================================================}\par
5906         {\cf20 // WHAT FOLLOWS ARE HELPERS USED BY THE OVERRIDES OF THE VIRTUAL METHODS OF THE INTERFACE}\par
5907         {\cf20 // =========================================================================================}\par
5908 \par
5909         {\cf18 void} separator_to_stream() \{\par
5910             s << Color::Yellow\par
5911               << {\cf22 "==============================================================================="}\par
5912                  {\cf22 "\\n"};\par
5913         \}\par
5914 \par
5915         {\cf17 const} {\cf18 char}* getSuccessOrFailString({\cf18 bool} success, assertType::Enum at,\par
5916                                            {\cf17 const} {\cf18 char}* success_str) \{\par
5917             {\cf19 if}(success)\par
5918                 {\cf19 return} success_str;\par
5919             {\cf19 return} failureString(at);\par
5920         \}\par
5921 \par
5922         Color::Enum getSuccessOrFailColor({\cf18 bool} success, assertType::Enum at) \{\par
5923             {\cf19 return} success ? Color::BrightGreen :\par
5924                              (at & assertType::is_warn) ? Color::Yellow : Color::Red;\par
5925         \}\par
5926 \par
5927         {\cf18 void} successOrFailColoredStringToStream({\cf18 bool} success, assertType::Enum at,\par
5928                                                 {\cf17 const} {\cf18 char}* success_str = {\cf22 "SUCCESS"}) \{\par
5929             s << getSuccessOrFailColor(success, at)\par
5930               << getSuccessOrFailString(success, at, success_str) << {\cf22 ": "};\par
5931         \}\par
5932 \par
5933         {\cf18 void} log_contexts() \{\par
5934             {\cf18 int} num_contexts = get_num_active_contexts();\par
5935             {\cf19 if}(num_contexts) \{\par
5936                 {\cf17 auto} contexts = get_active_contexts();\par
5937 \par
5938                 s << Color::None << {\cf22 "  logged: "};\par
5939                 {\cf19 for}({\cf18 int} i = 0; i < num_contexts; ++i) \{\par
5940                     s << (i == 0 ? {\cf22 ""} : {\cf22 "          "});\par
5941                     contexts[i]->stringify(&s);\par
5942                     s << {\cf22 "\\n"};\par
5943                 \}\par
5944             \}\par
5945 \par
5946             s << {\cf22 "\\n"};\par
5947         \}\par
5948 \par
5949         {\cf20 // this was requested to be made virtual so users could override it}\par
5950         {\cf17 virtual} {\cf18 void} file_line_to_stream({\cf17 const} {\cf18 char}* file, {\cf18 int} line,\par
5951                                         {\cf17 const} {\cf18 char}* tail = {\cf22 ""}) \{\par
5952             s << Color::LightGrey << skipPathFromFilename(file) << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "("})\par
5953             << (opt.no_line_numbers ? 0 : line) {\cf20 // 0 or the real num depending on the option}\par
5954             << (opt.gnu_file_line ? {\cf22 ":"} : {\cf22 "):"}) << tail;\par
5955         \}\par
5956 \par
5957         {\cf18 void} logTestStart() \{\par
5958             {\cf19 if}(hasLoggedCurrentTestStart)\par
5959                 {\cf19 return};\par
5960 \par
5961             separator_to_stream();\par
5962             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 "\\n"});\par
5963             {\cf19 if}(tc->m_description)\par
5964                 s << Color::Yellow << {\cf22 "DESCRIPTION: "} << Color::None << tc->m_description << {\cf22 "\\n"};\par
5965             {\cf19 if}(tc->m_test_suite && tc->m_test_suite[0] != {\cf23 '\\0'})\par
5966                 s << Color::Yellow << {\cf22 "TEST SUITE: "} << Color::None << tc->m_test_suite << {\cf22 "\\n"};\par
5967             {\cf19 if}(strncmp(tc->m_name, {\cf22 "  Scenario:"}, 11) != 0)\par
5968                 s << Color::Yellow << {\cf22 "TEST CASE:  "};\par
5969             s << Color::None << tc->m_name << {\cf22 "\\n"};\par
5970 \par
5971             {\cf19 for}({\cf18 size_t} i = 0; i < currentSubcaseLevel; ++i) \{\par
5972                 {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5973                     s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5974             \}\par
5975 \par
5976             {\cf19 if}(currentSubcaseLevel != subcasesStack.size()) \{\par
5977                 s << Color::Yellow << {\cf22 "\\nDEEPEST SUBCASE STACK REACHED (DIFFERENT FROM THE CURRENT ONE):\\n"} << Color::None;\par
5978                 {\cf19 for}({\cf18 size_t} i = 0; i < subcasesStack.size(); ++i) \{\par
5979                     {\cf19 if}(subcasesStack[i].m_name[0] != {\cf23 '\\0'})\par
5980                         s << {\cf22 "  "} << subcasesStack[i].m_name << {\cf22 "\\n"};\par
5981                 \}\par
5982             \}\par
5983 \par
5984             s << {\cf22 "\\n"};\par
5985 \par
5986             hasLoggedCurrentTestStart = {\cf17 true};\par
5987         \}\par
5988 \par
5989         {\cf18 void} printVersion() \{\par
5990             {\cf19 if}(opt.no_version == {\cf17 false})\par
5991                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "doctest version is \\""}\par
5992                   << DOCTEST_VERSION_STR << {\cf22 "\\"\\n"};\par
5993         \}\par
5994 \par
5995         {\cf18 void} printIntro() \{\par
5996             {\cf19 if}(opt.no_intro == {\cf17 false}) \{\par
5997                 printVersion();\par
5998                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
5999                   << {\cf22 "run with \\"--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help\\" for options\\n"};\par
6000             \}\par
6001         \}\par
6002 \par
6003         {\cf18 void} printHelp() \{\par
6004             {\cf18 int} sizePrefixDisplay = {\cf17 static_cast<}{\cf18 int}{\cf17 >}(strlen(DOCTEST_OPTIONS_PREFIX_DISPLAY));\par
6005             printVersion();\par
6006             {\cf20 // clang-format off}\par
6007             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6008             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6009             s << {\cf22 "boolean values: \\"1/on/yes/true\\" or \\"0/off/no/false\\"\\n"};\par
6010             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6011             s << {\cf22 "filter  values: \\"str1,str2,str3\\" (comma separated strings)\\n"};\par
6012             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6013             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6014             s << {\cf22 "filters use wildcards for matching strings\\n"};\par
6015             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6016             s << {\cf22 "something passes a filter if any of the strings in a filter matches\\n"};\par
6017 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6018             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6019             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6020             s << {\cf22 "ALL FLAGS, OPTIONS AND FILTERS ALSO AVAILABLE WITH A \\""} DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "\\" PREFIX!!!\\n"};\par
6021 {\cf21 #endif}\par
6022             s << Color::Cyan << {\cf22 "[doctest]\\n"} << Color::None;\par
6023             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6024             s << {\cf22 "Query flags - the program quits after them. Available:\\n\\n"};\par
6025             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "?,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "help, -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "h                      "}\par
6026               << Whitespace(sizePrefixDisplay*0) <<  {\cf22 "prints this message\\n"};\par
6027             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "v,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "version                       "}\par
6028               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the version\\n"};\par
6029             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "c,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "count                         "}\par
6030               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the number of matching tests\\n"};\par
6031             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ltc, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-cases               "}\par
6032               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching tests by name\\n"};\par
6033             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lts, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-test-suites              "}\par
6034               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all matching test suites\\n"};\par
6035             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "lr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "list-reporters                "}\par
6036               << Whitespace(sizePrefixDisplay*1) << {\cf22 "lists all registered reporters\\n\\n"};\par
6037             {\cf20 // ================================================================================== << 79}\par
6038             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None;\par
6039             s << {\cf22 "The available <int>/<string> options/filters are:\\n\\n"};\par
6040             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case=<filters>           "}\par
6041               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their name\\n"};\par
6042             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-case-exclude=<filters>   "}\par
6043               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their name\\n"};\par
6044             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sf,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file=<filters>         "}\par
6045               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their file\\n"};\par
6046             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sfe, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "source-file-exclude=<filters> "}\par
6047               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their file\\n"};\par
6048             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ts,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite=<filters>          "}\par
6049               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     tests by their test suite\\n"};\par
6050             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "tse, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "test-suite-exclude=<filters>  "}\par
6051               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT tests by their test suite\\n"};\par
6052             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase=<filters>             "}\par
6053               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters     subcases by their name\\n"};\par
6054             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "sce, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-exclude=<filters>     "}\par
6055               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters OUT subcases by their name\\n"};\par
6056             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "r,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "reporters=<filters>           "}\par
6057               << Whitespace(sizePrefixDisplay*1) << {\cf22 "reporters to use (console is default)\\n"};\par
6058             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "o,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "out=<string>                  "}\par
6059               << Whitespace(sizePrefixDisplay*1) << {\cf22 "output filename\\n"};\par
6060             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ob,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "order-by=<string>             "}\par
6061               << Whitespace(sizePrefixDisplay*1) << {\cf22 "how the tests should be ordered\\n"};\par
6062             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       <string> - [file/suite/name/rand/none]\\n"};\par
6063             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "rand-seed=<int>               "}\par
6064               << Whitespace(sizePrefixDisplay*1) << {\cf22 "seed for random ordering\\n"};\par
6065             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "f,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "first=<int>                   "}\par
6066               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the first test passing the filters to\\n"};\par
6067             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6068             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "l,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "last=<int>                    "}\par
6069               << Whitespace(sizePrefixDisplay*1) << {\cf22 "the last test passing the filters to\\n"};\par
6070             s << Whitespace(sizePrefixDisplay*3) << {\cf22 "                                       execute - for range-based execution\\n"};\par
6071             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "aa,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "abort-after=<int>             "}\par
6072               << Whitespace(sizePrefixDisplay*1) << {\cf22 "stop after <int> failed assertions\\n"};\par
6073             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "scfl,--"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "subcase-filter-levels=<int>   "}\par
6074               << Whitespace(sizePrefixDisplay*1) << {\cf22 "apply filters for the first <int> levels\\n"};\par
6075             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6076             s << {\cf22 "Bool options - can be used like flags and true is assumed. Available:\\n\\n"};\par
6077             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "s,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "success=<bool>                "}\par
6078               << Whitespace(sizePrefixDisplay*1) << {\cf22 "include successful assertions in output\\n"};\par
6079             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "cs,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "case-sensitive=<bool>         "}\par
6080               << Whitespace(sizePrefixDisplay*1) << {\cf22 "filters being treated as case sensitive\\n"};\par
6081             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "e,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "exit=<bool>                   "}\par
6082               << Whitespace(sizePrefixDisplay*1) << {\cf22 "exits after the tests finish\\n"};\par
6083             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "d,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "duration=<bool>               "}\par
6084               << Whitespace(sizePrefixDisplay*1) << {\cf22 "prints the time duration of each test\\n"};\par
6085             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "m,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "minimal=<bool>                "}\par
6086               << Whitespace(sizePrefixDisplay*1) << {\cf22 "minimal console output (only failures)\\n"};\par
6087             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "q,   --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "quiet=<bool>                  "}\par
6088               << Whitespace(sizePrefixDisplay*1) << {\cf22 "no console output\\n"};\par
6089             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nt,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-throw=<bool>               "}\par
6090               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips exceptions-related assert checks\\n"};\par
6091             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ne,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-exitcode=<bool>            "}\par
6092               << Whitespace(sizePrefixDisplay*1) << {\cf22 "returns (or exits) always with success\\n"};\par
6093             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nr,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-run=<bool>                 "}\par
6094               << Whitespace(sizePrefixDisplay*1) << {\cf22 "skips all runtime doctest operations\\n"};\par
6095             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ni,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-intro=<bool>               "}\par
6096               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework intro in the output\\n"};\par
6097             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nv,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-version=<bool>             "}\par
6098               << Whitespace(sizePrefixDisplay*1) << {\cf22 "omit the framework version in the output\\n"};\par
6099             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-colors=<bool>              "}\par
6100               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables colors in output\\n"};\par
6101             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "fc,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "force-colors=<bool>           "}\par
6102               << Whitespace(sizePrefixDisplay*1) << {\cf22 "use colors even when not in a tty\\n"};\par
6103             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nb,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-breaks=<bool>              "}\par
6104               << Whitespace(sizePrefixDisplay*1) << {\cf22 "disables breakpoints in debuggers\\n"};\par
6105             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "ns,  --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-skip=<bool>                "}\par
6106               << Whitespace(sizePrefixDisplay*1) << {\cf22 "don't skip test cases marked as skip\\n"};\par
6107             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gfl, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "gnu-file-line=<bool>          "}\par
6108               << Whitespace(sizePrefixDisplay*1) << {\cf22 ":n: vs (n): for line numbers in output\\n"};\par
6109             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "npf, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-path-filenames=<bool>      "}\par
6110               << Whitespace(sizePrefixDisplay*1) << {\cf22 "only filenames and no paths in output\\n"};\par
6111             s << {\cf22 " -"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "nln, --"} DOCTEST_OPTIONS_PREFIX_DISPLAY {\cf22 "no-line-numbers=<bool>        "}\par
6112               << Whitespace(sizePrefixDisplay*1) << {\cf22 "0 instead of real line numbers in output\\n"};\par
6113             {\cf20 // ================================================================================== << 79}\par
6114             {\cf20 // clang-format on}\par
6115 \par
6116             s << Color::Cyan << {\cf22 "\\n[doctest] "} << Color::None;\par
6117             s << {\cf22 "for more information visit the project documentation\\n\\n"};\par
6118         \}\par
6119 \par
6120         {\cf18 void} printRegisteredReporters() \{\par
6121             printVersion();\par
6122             {\cf17 auto} printReporters = [{\cf17 this}] ({\cf17 const} reporterMap& reporters, {\cf17 const} {\cf18 char}* type) \{\par
6123                 {\cf19 if}(reporters.size()) \{\par
6124                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all registered "} << type << {\cf22 "\\n"};\par
6125                     {\cf19 for}({\cf17 auto}& curr : reporters)\par
6126                         s << {\cf22 "priority: "} << std::setw(5) << curr.first.first\par
6127                           << {\cf22 " name: "} << curr.first.second << {\cf22 "\\n"};\par
6128                 \}\par
6129             \};\par
6130             printReporters(getListeners(), {\cf22 "listeners"});\par
6131             printReporters(getReporters(), {\cf22 "reporters"});\par
6132         \}\par
6133 \par
6134         {\cf20 // =========================================================================================}\par
6135         {\cf20 // WHAT FOLLOWS ARE OVERRIDES OF THE VIRTUAL METHODS OF THE REPORTER INTERFACE}\par
6136         {\cf20 // =========================================================================================}\par
6137 \par
6138         {\cf18 void} report_query({\cf17 const} QueryData& in){\cf17  override }\{\par
6139             {\cf19 if}(opt.version) \{\par
6140                 printVersion();\par
6141             \} {\cf19 else} {\cf19 if}(opt.help) \{\par
6142                 printHelp();\par
6143             \} {\cf19 else} {\cf19 if}(opt.list_reporters) \{\par
6144                 printRegisteredReporters();\par
6145             \} {\cf19 else} {\cf19 if}(opt.count || opt.list_test_cases) \{\par
6146                 {\cf19 if}(opt.list_test_cases) \{\par
6147                     s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6148                       << {\cf22 "listing all test case names\\n"};\par
6149                     separator_to_stream();\par
6150                 \}\par
6151 \par
6152                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6153                     s << Color::None << in.data[i]->m_name << {\cf22 "\\n"};\par
6154 \par
6155                 separator_to_stream();\par
6156 \par
6157                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6158                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6159                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6160 \par
6161             \} {\cf19 else} {\cf19 if}(opt.list_test_suites) \{\par
6162                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "listing all test suites\\n"};\par
6163                 separator_to_stream();\par
6164 \par
6165                 {\cf19 for}({\cf18 unsigned} i = 0; i < in.num_data; ++i)\par
6166                     s << Color::None << in.data[i]->m_test_suite << {\cf22 "\\n"};\par
6167 \par
6168                 separator_to_stream();\par
6169 \par
6170                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6171                   << {\cf22 "unskipped test cases passing the current filters: "}\par
6172                   << g_cs->numTestCasesPassingFilters << {\cf22 "\\n"};\par
6173                 s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6174                   << {\cf22 "test suites with unskipped test cases passing the current filters: "}\par
6175                   << g_cs->numTestSuitesPassingFilters << {\cf22 "\\n"};\par
6176             \}\par
6177         \}\par
6178 \par
6179         {\cf18 void} test_run_start(){\cf17  override }\{\par
6180             {\cf19 if}(!opt.minimal)\par
6181                 printIntro();\par
6182         \}\par
6183 \par
6184         {\cf18 void} test_run_end({\cf17 const} TestRunStats& p){\cf17  override }\{\par
6185             {\cf19 if}(opt.minimal && p.numTestCasesFailed == 0)\par
6186                 {\cf19 return};\par
6187 \par
6188             separator_to_stream();\par
6189             s << std::dec;\par
6190 \par
6191             {\cf17 auto} totwidth = int(std::ceil(log10((std::max(p.numTestCasesPassingFilters, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts))) + 1)));\par
6192             {\cf17 auto} passwidth = int(std::ceil(log10((std::max(p.numTestCasesPassingFilters - p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAsserts - p.numAssertsFailed))) + 1)));\par
6193             {\cf17 auto} failwidth = int(std::ceil(log10((std::max(p.numTestCasesFailed, {\cf17 static_cast<}{\cf18 unsigned}{\cf17 >}(p.numAssertsFailed))) + 1)));\par
6194             {\cf17 const} {\cf18 bool} anythingFailed = p.numTestCasesFailed > 0 || p.numAssertsFailed > 0;\par
6195             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "test cases: "} << std::setw(totwidth)\par
6196               << p.numTestCasesPassingFilters << {\cf22 " | "}\par
6197               << ((p.numTestCasesPassingFilters == 0 || anythingFailed) ? Color::None :\par
6198                                                                           Color::Green)\par
6199               << std::setw(passwidth) << p.numTestCasesPassingFilters - p.numTestCasesFailed << {\cf22 " passed"}\par
6200               << Color::None << {\cf22 " | "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::None)\par
6201               << std::setw(failwidth) << p.numTestCasesFailed << {\cf22 " failed"} << Color::None << {\cf22 " |"};\par
6202             {\cf19 if}(opt.no_skipped_summary == {\cf17 false}) \{\par
6203                 {\cf17 const} {\cf18 int} numSkipped = p.numTestCases - p.numTestCasesPassingFilters;\par
6204                 s << {\cf22 " "} << (numSkipped == 0 ? Color::None : Color::Yellow) << numSkipped\par
6205                   << {\cf22 " skipped"} << Color::None;\par
6206             \}\par
6207             s << {\cf22 "\\n"};\par
6208             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None << {\cf22 "assertions: "} << std::setw(totwidth)\par
6209               << p.numAsserts << {\cf22 " | "}\par
6210               << ((p.numAsserts == 0 || anythingFailed) ? Color::None : Color::Green)\par
6211               << std::setw(passwidth) << (p.numAsserts - p.numAssertsFailed) << {\cf22 " passed"} << Color::None\par
6212               << {\cf22 " | "} << (p.numAssertsFailed > 0 ? Color::Red : Color::None) << std::setw(failwidth)\par
6213               << p.numAssertsFailed << {\cf22 " failed"} << Color::None << {\cf22 " |\\n"};\par
6214             s << Color::Cyan << {\cf22 "[doctest] "} << Color::None\par
6215               << {\cf22 "Status: "} << (p.numTestCasesFailed > 0 ? Color::Red : Color::Green)\par
6216               << ((p.numTestCasesFailed > 0) ? {\cf22 "FAILURE!"} : {\cf22 "SUCCESS!"}) << Color::None << std::endl;\par
6217         \}\par
6218 \par
6219         {\cf18 void} test_case_start({\cf17 const} TestCaseData& in){\cf17  override }\{\par
6220             hasLoggedCurrentTestStart = {\cf17 false};\par
6221             tc                        = &in;\par
6222             subcasesStack.clear();\par
6223             currentSubcaseLevel = 0;\par
6224         \}\par
6225         \par
6226         {\cf18 void} test_case_reenter({\cf17 const} TestCaseData&){\cf17  override }\{\par
6227             subcasesStack.clear();\par
6228         \}\par
6229 \par
6230         {\cf18 void} test_case_end({\cf17 const} CurrentTestCaseStats& st){\cf17  override }\{\par
6231             {\cf19 if}(tc->m_no_output)\par
6232                 {\cf19 return};\par
6233 \par
6234             {\cf20 // log the preamble of the test case only if there is something}\par
6235             {\cf20 // else to print - something other than that an assert has failed}\par
6236             {\cf19 if}(opt.duration ||\par
6237                (st.failure_flags && st.failure_flags != {\cf17 static_cast<}{\cf18 int}{\cf17 >}(TestCaseFailureReason::AssertFailure)))\par
6238                 logTestStart();\par
6239 \par
6240             {\cf19 if}(opt.duration)\par
6241                 s << Color::None << std::setprecision(6) << std::fixed << st.seconds\par
6242                   << {\cf22 " s: "} << tc->m_name << {\cf22 "\\n"};\par
6243 \par
6244             {\cf19 if}(st.failure_flags & TestCaseFailureReason::Timeout)\par
6245                 s << Color::Red << {\cf22 "Test case exceeded time limit of "} << std::setprecision(6)\par
6246                   << std::fixed << tc->m_timeout << {\cf22 "!\\n"};\par
6247 \par
6248             {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedButDidnt) \{\par
6249                 s << Color::Red << {\cf22 "Should have failed but didn't! Marking it as failed!\\n"};\par
6250             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::ShouldHaveFailedAndDid) \{\par
6251                 s << Color::Yellow << {\cf22 "Failed as expected so marking it as not failed\\n"};\par
6252             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::CouldHaveFailedAndDid) \{\par
6253                 s << Color::Yellow << {\cf22 "Allowed to fail so marking it as not failed\\n"};\par
6254             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::DidntFailExactlyNumTimes) \{\par
6255                 s << Color::Red << {\cf22 "Didn't fail exactly "} << tc->m_expected_failures\par
6256                   << {\cf22 " times so marking it as failed!\\n"};\par
6257             \} {\cf19 else} {\cf19 if}(st.failure_flags & TestCaseFailureReason::FailedExactlyNumTimes) \{\par
6258                 s << Color::Yellow << {\cf22 "Failed exactly "} << tc->m_expected_failures\par
6259                   << {\cf22 " times as expected so marking it as not failed!\\n"};\par
6260             \}\par
6261             {\cf19 if}(st.failure_flags & TestCaseFailureReason::TooManyFailedAsserts) \{\par
6262                 s << Color::Red << {\cf22 "Aborting - too many failed asserts!\\n"};\par
6263             \}\par
6264             s << Color::None; {\cf20 // lgtm [cpp/useless-expression]}\par
6265         \}\par
6266 \par
6267         {\cf18 void} test_case_exception({\cf17 const} TestCaseException& e){\cf17  override }\{\par
6268             DOCTEST_LOCK_MUTEX(mutex)\par
6269             {\cf19 if}(tc->m_no_output)\par
6270                 {\cf19 return};\par
6271 \par
6272             logTestStart();\par
6273 \par
6274             file_line_to_stream(tc->m_file.c_str(), tc->m_line, {\cf22 " "});\par
6275             successOrFailColoredStringToStream({\cf17 false}, e.is_crash ? assertType::is_require :\par
6276                                                                    assertType::is_check);\par
6277             s << Color::Red << (e.is_crash ? {\cf22 "test case CRASHED: "} : {\cf22 "test case THREW exception: "})\par
6278               << Color::Cyan << e.error_string << {\cf22 "\\n"};\par
6279 \par
6280             {\cf18 int} num_stringified_contexts = get_num_stringified_contexts();\par
6281             {\cf19 if}(num_stringified_contexts) \{\par
6282                 {\cf17 auto} stringified_contexts = get_stringified_contexts();\par
6283                 s << Color::None << {\cf22 "  logged: "};\par
6284                 {\cf19 for}({\cf18 int} i = num_stringified_contexts; i > 0; --i) \{\par
6285                     s << (i == num_stringified_contexts ? {\cf22 ""} : {\cf22 "          "})\par
6286                       << stringified_contexts[i - 1] << {\cf22 "\\n"};\par
6287                 \}\par
6288             \}\par
6289             s << {\cf22 "\\n"} << Color::None;\par
6290         \}\par
6291 \par
6292         {\cf18 void} subcase_start({\cf17 const} SubcaseSignature& subc){\cf17  override }\{\par
6293             subcasesStack.push_back(subc);\par
6294             ++currentSubcaseLevel;\par
6295             hasLoggedCurrentTestStart = {\cf17 false};\par
6296         \}\par
6297 \par
6298         {\cf18 void} subcase_end(){\cf17  override }\{\par
6299             --currentSubcaseLevel;\par
6300             hasLoggedCurrentTestStart = {\cf17 false};\par
6301         \}\par
6302 \par
6303         {\cf18 void} log_assert({\cf17 const} AssertData& rb){\cf17  override }\{\par
6304             {\cf19 if}((!rb.m_failed && !opt.success) || tc->m_no_output)\par
6305                 {\cf19 return};\par
6306 \par
6307             DOCTEST_LOCK_MUTEX(mutex)\par
6308 \par
6309             logTestStart();\par
6310 \par
6311             file_line_to_stream(rb.m_file, rb.m_line, {\cf22 " "});\par
6312             successOrFailColoredStringToStream(!rb.m_failed, rb.m_at);\par
6313 \par
6314             fulltext_log_assert_to_stream(s, rb);\par
6315 \par
6316             log_contexts();\par
6317         \}\par
6318 \par
6319         {\cf18 void} log_message({\cf17 const} MessageData& mb){\cf17  override }\{\par
6320             {\cf19 if}(tc->m_no_output)\par
6321                 {\cf19 return};\par
6322 \par
6323             DOCTEST_LOCK_MUTEX(mutex)\par
6324 \par
6325             logTestStart();\par
6326 \par
6327             file_line_to_stream(mb.m_file, mb.m_line, {\cf22 " "});\par
6328             s << getSuccessOrFailColor({\cf17 false}, mb.m_severity)\par
6329               << getSuccessOrFailString(mb.m_severity & assertType::is_warn, mb.m_severity,\par
6330                                         {\cf22 "MESSAGE"}) << {\cf22 ": "};\par
6331             s << Color::None << mb.m_string << {\cf22 "\\n"};\par
6332             log_contexts();\par
6333         \}\par
6334 \par
6335         {\cf18 void} test_case_skipped({\cf17 const} TestCaseData&){\cf17  override }\{\}\par
6336     \};\par
6337 \par
6338     DOCTEST_REGISTER_REPORTER({\cf22 "console"}, 0, ConsoleReporter);\par
6339 \par
6340 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6341     {\cf17 struct }DebugOutputWindowReporter : {\cf17 public} ConsoleReporter\par
6342     \{\par
6343         DOCTEST_THREAD_LOCAL {\cf17 static} std::ostringstream oss;\par
6344 \par
6345         DebugOutputWindowReporter({\cf17 const} ContextOptions& co)\par
6346                 : ConsoleReporter(co, oss) \{\}\par
6347 \par
6348 {\cf21 #define DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(func, type, arg)                                    \\}\par
6349 {\cf21     void func(type arg) override \{                                                                 \\}\par
6350 {\cf21         bool with_col = g_no_colors;                                                               \\}\par
6351 {\cf21         g_no_colors   = false;                                                                     \\}\par
6352 {\cf21         ConsoleReporter::func(arg);                                                                \\}\par
6353 {\cf21         if(oss.tellp() != std::streampos\{\}) \{                                                      \\}\par
6354 {\cf21             DOCTEST_OUTPUT_DEBUG_STRING(oss.str().c_str());                                        \\}\par
6355 {\cf21             oss.str("");                                                                           \\}\par
6356 {\cf21         \}                                                                                          \\}\par
6357 {\cf21         g_no_colors = with_col;                                                                    \\}\par
6358 {\cf21     \}}\par
6359 \par
6360         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_start, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6361         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_run_end, {\cf17 const} TestRunStats&, in)\par
6362         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_start, {\cf17 const} TestCaseData&, in)\par
6363         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_reenter, {\cf17 const} TestCaseData&, in)\par
6364         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_end, {\cf17 const} CurrentTestCaseStats&, in)\par
6365         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_exception, {\cf17 const} TestCaseException&, in)\par
6366         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_start, {\cf17 const} SubcaseSignature&, in)\par
6367         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(subcase_end, DOCTEST_EMPTY, DOCTEST_EMPTY)\par
6368         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_assert, {\cf17 const} AssertData&, in)\par
6369         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(log_message, {\cf17 const} MessageData&, in)\par
6370         DOCTEST_DEBUG_OUTPUT_REPORTER_OVERRIDE(test_case_skipped, {\cf17 const} TestCaseData&, in)\par
6371     \};\par
6372 \par
6373     DOCTEST_THREAD_LOCAL std::ostringstream DebugOutputWindowReporter::oss;\par
6374 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6375 \par
6376     {\cf20 // the implementation of parseOption()}\par
6377     {\cf18 bool} parseOptionImpl({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value) \{\par
6378         {\cf20 // going from the end to the beginning and stopping on the first occurrence from the end}\par
6379         {\cf19 for}({\cf18 int} i = argc; i > 0; --i) \{\par
6380             {\cf17 auto} index = i - 1;\par
6381             {\cf17 auto} temp = std::strstr(argv[index], pattern);\par
6382             {\cf19 if}(temp && (value || strlen(temp) == strlen(pattern))) \{ \par
6383                 {\cf20 // eliminate matches in which the chars before the option are not '-'}\par
6384                 {\cf18 bool} noBadCharsFound = {\cf17 true};\par
6385                 {\cf17 auto} curr            = argv[index];\par
6386                 {\cf19 while}(curr != temp) \{\par
6387                     {\cf19 if}(*curr++ != {\cf23 '-'}) \{\par
6388                         noBadCharsFound = {\cf17 false};\par
6389                         {\cf19 break};\par
6390                     \}\par
6391                 \}\par
6392                 {\cf19 if}(noBadCharsFound && argv[index][0] == {\cf23 '-'}) \{\par
6393                     {\cf19 if}(value) \{\par
6394                         {\cf20 // parsing the value of an option}\par
6395                         temp += strlen(pattern);\par
6396                         {\cf17 const} {\cf18 unsigned} len = strlen(temp);\par
6397                         {\cf19 if}(len) \{\par
6398                             *value = temp;\par
6399                             {\cf19 return} {\cf17 true};\par
6400                         \}\par
6401                     \} {\cf19 else} \{\par
6402                         {\cf20 // just a flag - no value}\par
6403                         {\cf19 return} {\cf17 true};\par
6404                     \}\par
6405                 \}\par
6406             \}\par
6407         \}\par
6408         {\cf19 return} {\cf17 false};\par
6409     \}\par
6410 \par
6411     {\cf20 // parses an option and returns the string after the '=' character}\par
6412     {\cf18 bool} parseOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, String* value = {\cf17 nullptr},\par
6413                      {\cf17 const} String& defaultVal = String()) \{\par
6414         {\cf19 if}(value)\par
6415             *value = defaultVal;\par
6416 {\cf21 #ifndef DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6417         {\cf20 // offset (normally 3 for "dt-") to skip prefix}\par
6418         {\cf19 if}(parseOptionImpl(argc, argv, pattern + strlen(DOCTEST_CONFIG_OPTIONS_PREFIX), value))\par
6419             {\cf19 return} {\cf17 true};\par
6420 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_UNPREFIXED_OPTIONS}\par
6421         {\cf19 return} parseOptionImpl(argc, argv, pattern, value);\par
6422     \}\par
6423 \par
6424     {\cf20 // locates a flag on the command line}\par
6425     {\cf18 bool} parseFlag({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern) \{\par
6426         {\cf19 return} parseOption(argc, argv, pattern);\par
6427     \}\par
6428 \par
6429     {\cf20 // parses a comma separated list of words after a pattern in one of the arguments in argv}\par
6430     {\cf18 bool} parseCommaSepArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern,\par
6431                            std::vector<String>& res) \{\par
6432         String filtersString;\par
6433         {\cf19 if}(parseOption(argc, argv, pattern, &filtersString)) \{\par
6434             {\cf20 // tokenize with "," as a separator, unless escaped with backslash}\par
6435             std::ostringstream s;\par
6436             {\cf17 auto} flush = [&s, &res]() \{\par
6437                 {\cf17 auto} {\cf18 string} = s.str();\par
6438                 {\cf19 if}({\cf18 string}.size() > 0) \{\par
6439                     res.push_back({\cf18 string}.c_str());\par
6440                 \}\par
6441                 s.str({\cf22 ""});\par
6442             \};\par
6443 \par
6444             {\cf18 bool} seenBackslash = {\cf17 false};\par
6445             {\cf17 const} {\cf18 char}* current = filtersString.c_str();\par
6446             {\cf17 const} {\cf18 char}* end = current + strlen(current);\par
6447             {\cf19 while}(current != end) \{\par
6448                 {\cf18 char} character = *current++;\par
6449                 {\cf19 if}(seenBackslash) \{\par
6450                     seenBackslash = {\cf17 false};\par
6451                     {\cf19 if}(character == {\cf23 ','} || character == {\cf23 '\\\\'}) \{\par
6452                         s.put(character);\par
6453                         {\cf19 continue};\par
6454                     \}\par
6455                     s.put({\cf23 '\\\\'});\par
6456                 \}\par
6457                 {\cf19 if}(character == {\cf23 '\\\\'}) \{\par
6458                     seenBackslash = {\cf17 true};\par
6459                 \} {\cf19 else} {\cf19 if}(character == {\cf23 ','}) \{\par
6460                     flush();\par
6461                 \} {\cf19 else} \{\par
6462                     s.put(character);\par
6463                 \}\par
6464             \}\par
6465 \par
6466             {\cf19 if}(seenBackslash) \{\par
6467                 s.put({\cf23 '\\\\'});\par
6468             \}\par
6469             flush();\par
6470             {\cf19 return} {\cf17 true};\par
6471         \}\par
6472         {\cf19 return} {\cf17 false};\par
6473     \}\par
6474 \par
6475     {\cf17 enum} optionType\par
6476     \{\par
6477         option_bool,\par
6478         option_int\par
6479     \};\par
6480 \par
6481     {\cf20 // parses an int/bool option from the command line}\par
6482     {\cf18 bool} parseIntOption({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf17 const} {\cf18 char}* pattern, optionType type,\par
6483                         {\cf18 int}& res) \{\par
6484         String parsedValue;\par
6485         {\cf19 if}(!parseOption(argc, argv, pattern, &parsedValue))\par
6486             {\cf19 return} {\cf17 false};\par
6487 \par
6488         {\cf19 if}(type) \{\par
6489             {\cf20 // integer}\par
6490             {\cf20 // TODO: change this to use std::stoi or something else! currently it uses undefined behavior - assumes '0' on failed parse...}\par
6491             {\cf18 int} theInt = std::atoi(parsedValue.c_str());\par
6492             {\cf19 if} (theInt != 0) \{\par
6493                 res = theInt; \par
6494                 {\cf19 return} {\cf17 true};\par
6495             \}\par
6496         \} {\cf19 else} \{\par
6497             {\cf20 // boolean}\par
6498             {\cf17 const} {\cf18 char} positive[][5] = \{ {\cf22 "1"}, {\cf22 "true"}, {\cf22 "on"}, {\cf22 "yes"} \};  {\cf20 // 5 - strlen("true") + 1}\par
6499             {\cf17 const} {\cf18 char} negative[][6] = \{ {\cf22 "0"}, {\cf22 "false"}, {\cf22 "off"}, {\cf22 "no"} \}; {\cf20 // 6 - strlen("false") + 1}\par
6500 \par
6501             {\cf20 // if the value matches any of the positive/negative possibilities}\par
6502             {\cf19 for} ({\cf18 unsigned} i = 0; i < 4; i++) \{\par
6503                 {\cf19 if} (parsedValue.compare(positive[i], {\cf17 true}) == 0) \{\par
6504                     res = 1; \par
6505                     {\cf19 return} {\cf17 true};\par
6506                 \}\par
6507                 {\cf19 if} (parsedValue.compare(negative[i], {\cf17 true}) == 0) \{\par
6508                     res = 0; \par
6509                     {\cf19 return} {\cf17 true};\par
6510                 \}\par
6511             \}\par
6512         \}\par
6513         {\cf19 return} {\cf17 false};\par
6514     \}\par
6515 \} {\cf20 // namespace}\par
6516 \par
6517 Context::Context({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv)\par
6518         : p(new detail::ContextState) \{\par
6519     parseArgs(argc, argv, {\cf17 true});\par
6520     {\cf19 if}(argc)\par
6521         p->binary_name = argv[0];\par
6522 \}\par
6523 \par
6524 Context::~Context() \{\par
6525     {\cf19 if}(g_cs == p)\par
6526         g_cs = {\cf17 nullptr};\par
6527     {\cf17 delete} p;\par
6528 \}\par
6529 \par
6530 {\cf18 void} Context::applyCommandLine({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv) \{\par
6531     parseArgs(argc, argv);\par
6532     {\cf19 if}(argc)\par
6533         p->binary_name = argv[0];\par
6534 \}\par
6535 \par
6536 {\cf20 // parses args}\par
6537 {\cf18 void} Context::parseArgs({\cf18 int} argc, {\cf17 const} {\cf18 char}* {\cf17 const}* argv, {\cf18 bool} withDefaults) \{\par
6538     {\cf17 using namespace }detail;\par
6539 \par
6540     {\cf20 // clang-format off}\par
6541     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file="},        p->filters[0]);\par
6542     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sf="},                 p->filters[0]);\par
6543     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "source-file-exclude="},p->filters[1]);\par
6544     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sfe="},                p->filters[1]);\par
6545     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite="},         p->filters[2]);\par
6546     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ts="},                 p->filters[2]);\par
6547     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-suite-exclude="}, p->filters[3]);\par
6548     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tse="},                p->filters[3]);\par
6549     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case="},          p->filters[4]);\par
6550     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tc="},                 p->filters[4]);\par
6551     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "test-case-exclude="},  p->filters[5]);\par
6552     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "tce="},                p->filters[5]);\par
6553     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase="},            p->filters[6]);\par
6554     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sc="},                 p->filters[6]);\par
6555     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "subcase-exclude="},    p->filters[7]);\par
6556     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "sce="},                p->filters[7]);\par
6557     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "reporters="},          p->filters[8]);\par
6558     parseCommaSepArgs(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "r="},                  p->filters[8]);\par
6559     {\cf20 // clang-format on}\par
6560 \par
6561     {\cf18 int}    intRes = 0;\par
6562     String strRes;\par
6563 \par
6564 {\cf21 #define DOCTEST_PARSE_AS_BOOL_OR_FLAG(name, sname, var, default)                                   \\}\par
6565 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_bool, intRes) ||  \\}\par
6566 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_bool, intRes))   \\}\par
6567 {\cf21         p->var = static_cast<bool>(intRes);                                                        \\}\par
6568 {\cf21     else if(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name) ||                           \\}\par
6569 {\cf21             parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname))                            \\}\par
6570 {\cf21         p->var = true;                                                                             \\}\par
6571 {\cf21     else if(withDefaults)                                                                          \\}\par
6572 {\cf21     p->var = default}\par
6573 \par
6574 {\cf21 #define DOCTEST_PARSE_INT_OPTION(name, sname, var, default)                                        \\}\par
6575 {\cf21     if(parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", option_int, intRes) ||   \\}\par
6576 {\cf21        parseIntOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", option_int, intRes))    \\}\par
6577 {\cf21         p->var = intRes;                                                                           \\}\par
6578 {\cf21     else if(withDefaults)                                                                          \\}\par
6579 {\cf21     p->var = default}\par
6580 \par
6581 {\cf21 #define DOCTEST_PARSE_STR_OPTION(name, sname, var, default)                                        \\}\par
6582 {\cf21     if(parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX name "=", &strRes, default) ||        \\}\par
6583 {\cf21        parseOption(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX sname "=", &strRes, default) ||       \\}\par
6584 {\cf21        withDefaults)                                                                               \\}\par
6585 {\cf21     p->var = strRes}\par
6586 \par
6587     {\cf20 // clang-format off}\par
6588     DOCTEST_PARSE_STR_OPTION({\cf22 "out"}, {\cf22 "o"}, out, {\cf22 ""});\par
6589     DOCTEST_PARSE_STR_OPTION({\cf22 "order-by"}, {\cf22 "ob"}, order_by, {\cf22 "file"});\par
6590     DOCTEST_PARSE_INT_OPTION({\cf22 "rand-seed"}, {\cf22 "rs"}, rand_seed, 0);\par
6591 \par
6592     DOCTEST_PARSE_INT_OPTION({\cf22 "first"}, {\cf22 "f"}, first, 0);\par
6593     DOCTEST_PARSE_INT_OPTION({\cf22 "last"}, {\cf22 "l"}, last, UINT_MAX);\par
6594 \par
6595     DOCTEST_PARSE_INT_OPTION({\cf22 "abort-after"}, {\cf22 "aa"}, abort_after, 0);\par
6596     DOCTEST_PARSE_INT_OPTION({\cf22 "subcase-filter-levels"}, {\cf22 "scfl"}, subcase_filter_levels, INT_MAX);\par
6597 \par
6598     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "success"}, {\cf22 "s"}, success, {\cf17 false});\par
6599     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "case-sensitive"}, {\cf22 "cs"}, case_sensitive, {\cf17 false});\par
6600     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "exit"}, {\cf22 "e"}, exit, {\cf17 false});\par
6601     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "duration"}, {\cf22 "d"}, duration, {\cf17 false});\par
6602     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "minimal"}, {\cf22 "m"}, minimal, {\cf17 false});\par
6603     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "quiet"}, {\cf22 "q"}, quiet, {\cf17 false});\par
6604     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-throw"}, {\cf22 "nt"}, no_throw, {\cf17 false});\par
6605     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-exitcode"}, {\cf22 "ne"}, no_exitcode, {\cf17 false});\par
6606     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-run"}, {\cf22 "nr"}, no_run, {\cf17 false});\par
6607     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-intro"}, {\cf22 "ni"}, no_intro, {\cf17 false});\par
6608     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-version"}, {\cf22 "nv"}, no_version, {\cf17 false});\par
6609     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-colors"}, {\cf22 "nc"}, no_colors, {\cf17 false});\par
6610     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "force-colors"}, {\cf22 "fc"}, force_colors, {\cf17 false});\par
6611     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-breaks"}, {\cf22 "nb"}, no_breaks, {\cf17 false});\par
6612     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skip"}, {\cf22 "ns"}, no_skip, {\cf17 false});\par
6613     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "gnu-file-line"}, {\cf22 "gfl"}, gnu_file_line, !{\cf18 bool}(DOCTEST_MSVC));\par
6614     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-path-filenames"}, {\cf22 "npf"}, no_path_in_filenames, {\cf17 false});\par
6615     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-line-numbers"}, {\cf22 "nln"}, no_line_numbers, {\cf17 false});\par
6616     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-debug-output"}, {\cf22 "ndo"}, no_debug_output, {\cf17 false});\par
6617     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-skipped-summary"}, {\cf22 "nss"}, no_skipped_summary, {\cf17 false});\par
6618     DOCTEST_PARSE_AS_BOOL_OR_FLAG({\cf22 "no-time-in-output"}, {\cf22 "ntio"}, no_time_in_output, {\cf17 false});\par
6619     {\cf20 // clang-format on}\par
6620 \par
6621     {\cf19 if}(withDefaults) \{\par
6622         p->help             = {\cf17 false};\par
6623         p->version          = {\cf17 false};\par
6624         p->count            = {\cf17 false};\par
6625         p->list_test_cases  = {\cf17 false};\par
6626         p->list_test_suites = {\cf17 false};\par
6627         p->list_reporters   = {\cf17 false};\par
6628     \}\par
6629     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "help"}) ||\par
6630        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "h"}) ||\par
6631        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "?"})) \{\par
6632         p->help = {\cf17 true};\par
6633         p->exit = {\cf17 true};\par
6634     \}\par
6635     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "version"}) ||\par
6636        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "v"})) \{\par
6637         p->version = {\cf17 true};\par
6638         p->exit    = {\cf17 true};\par
6639     \}\par
6640     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "count"}) ||\par
6641        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "c"})) \{\par
6642         p->count = {\cf17 true};\par
6643         p->exit  = {\cf17 true};\par
6644     \}\par
6645     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-cases"}) ||\par
6646        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "ltc"})) \{\par
6647         p->list_test_cases = {\cf17 true};\par
6648         p->exit            = {\cf17 true};\par
6649     \}\par
6650     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-test-suites"}) ||\par
6651        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lts"})) \{\par
6652         p->list_test_suites = {\cf17 true};\par
6653         p->exit             = {\cf17 true};\par
6654     \}\par
6655     {\cf19 if}(parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "list-reporters"}) ||\par
6656        parseFlag(argc, argv, DOCTEST_CONFIG_OPTIONS_PREFIX {\cf22 "lr"})) \{\par
6657         p->list_reporters = {\cf17 true};\par
6658         p->exit           = {\cf17 true};\par
6659     \}\par
6660 \}\par
6661 \par
6662 {\cf20 // allows the user to add procedurally to the filters from the command line}\par
6663 {\cf18 void} Context::addFilter({\cf17 const} {\cf18 char}* filter, {\cf17 const} {\cf18 char}* value) \{ setOption(filter, value); \}\par
6664 \par
6665 {\cf20 // allows the user to clear all filters from the command line}\par
6666 {\cf18 void} Context::clearFilters() \{\par
6667     {\cf19 for}({\cf17 auto}& curr : p->filters)\par
6668         curr.clear();\par
6669 \}\par
6670 \par
6671 {\cf20 // allows the user to override procedurally the bool options from the command line}\par
6672 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 bool} value) \{\par
6673     setOption(option, value ? {\cf22 "true"} : {\cf22 "false"});\par
6674 \}\par
6675 \par
6676 {\cf20 // allows the user to override procedurally the int options from the command line}\par
6677 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf18 int} value) \{\par
6678     setOption(option, toString(value).c_str());\par
6679 \}\par
6680 \par
6681 {\cf20 // allows the user to override procedurally the string options from the command line}\par
6682 {\cf18 void} Context::setOption({\cf17 const} {\cf18 char}* option, {\cf17 const} {\cf18 char}* value) \{\par
6683     {\cf17 auto} argv   = String({\cf22 "-"}) + option + {\cf22 "="} + value;\par
6684     {\cf17 auto} lvalue = argv.c_str();\par
6685     parseArgs(1, &lvalue);\par
6686 \}\par
6687 \par
6688 {\cf20 // users should query this in their main() and exit the program if true}\par
6689 {\cf18 bool} Context::shouldExit() \{ {\cf19 return} p->exit; \}\par
6690 \par
6691 {\cf18 void} Context::setAsDefaultForAssertsOutOfTestCases() \{ g_cs = p; \}\par
6692 \par
6693 {\cf18 void} Context::setAssertHandler(detail::assert_handler ah) \{ p->ah = ah; \}\par
6694 \par
6695 {\cf18 void} Context::setCout(std::ostream* out) \{ p->cout = out; \}\par
6696 \par
6697 {\cf17 static} {\cf17 class }DiscardOStream : {\cf17 public} std::ostream\par
6698 \{\par
6699 {\cf17 private}:\par
6700     class : {\cf17 public} std::streambuf\par
6701     \{\par
6702     {\cf17 private}:\par
6703         {\cf20 // allowing some buffering decreases the amount of calls to overflow}\par
6704         {\cf18 char} buf[1024];\par
6705 \par
6706     {\cf17 protected}:\par
6707         std::streamsize xsputn({\cf17 const} char_type*, std::streamsize count){\cf17  override }\{ {\cf19 return} count; \}\par
6708 \par
6709         int_type overflow(int_type ch){\cf17  override }\{\par
6710             setp(std::begin(buf), std::end(buf));\par
6711             {\cf19 return} traits_type::not_eof(ch);\par
6712         \}\par
6713     \} discardBuf;\par
6714 \par
6715 {\cf17 public}:\par
6716     DiscardOStream()\par
6717             : std::ostream(&discardBuf) \{\}\par
6718 \} discardOut;\par
6719 \par
6720 {\cf20 // the main function that does all the filtering and test running}\par
6721 {\cf18 int} Context::run() \{\par
6722     {\cf17 using namespace }detail;\par
6723 \par
6724     {\cf20 // save the old context state in case such was setup - for using asserts out of a testing context}\par
6725     {\cf17 auto} old_cs = g_cs;\par
6726     {\cf20 // this is the current contest}\par
6727     g_cs               = p;\par
6728     is_running_in_test = {\cf17 true};\par
6729 \par
6730     g_no_colors = p->no_colors;\par
6731     p->resetRunData();\par
6732 \par
6733     std::fstream fstr;\par
6734     {\cf19 if}(p->cout == {\cf17 nullptr}) \{\par
6735         {\cf19 if}(p->quiet) \{\par
6736             p->cout = &discardOut;\par
6737         \} {\cf19 else} {\cf19 if}(p->out.size()) \{\par
6738             {\cf20 // to a file if specified}\par
6739             fstr.open(p->out.c_str(), std::fstream::out);\par
6740             p->cout = &fstr;\par
6741         \} {\cf19 else} \{\par
6742             {\cf20 // stdout by default}\par
6743             p->cout = &std::cout;\par
6744         \}\par
6745     \}\par
6746 \par
6747     FatalConditionHandler::allocateAltStackMem();\par
6748 \par
6749     {\cf17 auto} cleanup_and_return = [&]() \{\par
6750         FatalConditionHandler::freeAltStackMem();\par
6751 \par
6752         {\cf19 if}(fstr.is_open())\par
6753             fstr.close();\par
6754 \par
6755         {\cf20 // restore context}\par
6756         g_cs               = old_cs;\par
6757         is_running_in_test = {\cf17 false};\par
6758 \par
6759         {\cf20 // we have to free the reporters which were allocated when the run started}\par
6760         {\cf19 for}({\cf17 auto}& curr : p->reporters_currently_used)\par
6761             delete curr;\par
6762         p->reporters_currently_used.clear();\par
6763 \par
6764         {\cf19 if}(p->numTestCasesFailed && !p->no_exitcode)\par
6765             {\cf19 return} EXIT_FAILURE;\par
6766         {\cf19 return} EXIT_SUCCESS;\par
6767     \};\par
6768 \par
6769     {\cf20 // setup default reporter if none is given through the command line}\par
6770     {\cf19 if}(p->filters[8].empty())\par
6771         p->filters[8].push_back({\cf22 "console"});\par
6772 \par
6773     {\cf20 // check to see if any of the registered reporters has been selected}\par
6774     {\cf19 for}({\cf17 auto}& curr : getReporters()) \{\par
6775         {\cf19 if}(matchesAny(curr.first.second.c_str(), p->filters[8], {\cf17 false}, p->case_sensitive))\par
6776             p->reporters_currently_used.push_back(curr.second(*g_cs));\par
6777     \}\par
6778 \par
6779     {\cf20 // TODO: check if there is nothing in reporters_currently_used}\par
6780 \par
6781     {\cf20 // prepend all listeners}\par
6782     {\cf19 for}({\cf17 auto}& curr : getListeners())\par
6783         p->reporters_currently_used.insert(p->reporters_currently_used.begin(), curr.second(*g_cs));\par
6784 \par
6785 {\cf21 #ifdef DOCTEST_PLATFORM_WINDOWS}\par
6786     {\cf19 if}(isDebuggerActive() && p->no_debug_output == {\cf17 false})\par
6787         p->reporters_currently_used.push_back({\cf17 new} DebugOutputWindowReporter(*g_cs));\par
6788 {\cf21 #endif }{\cf20 // DOCTEST_PLATFORM_WINDOWS}\par
6789 \par
6790     {\cf20 // handle version, help and no_run}\par
6791     {\cf19 if}(p->no_run || p->version || p->help || p->list_reporters) \{\par
6792         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, QueryData());\par
6793 \par
6794         {\cf19 return} cleanup_and_return();\par
6795     \}\par
6796 \par
6797     std::vector<const TestCase*> testArray;\par
6798     {\cf19 for}({\cf17 auto}& curr : getRegisteredTests())\par
6799         testArray.push_back(&curr);\par
6800     p->numTestCases = testArray.size();\par
6801 \par
6802     {\cf20 // sort the collected records}\par
6803     {\cf19 if}(!testArray.empty()) \{\par
6804         {\cf19 if}(p->order_by.compare({\cf22 "file"}, {\cf17 true}) == 0) \{\par
6805             std::sort(testArray.begin(), testArray.end(), fileOrderComparator);\par
6806         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "suite"}, {\cf17 true}) == 0) \{\par
6807             std::sort(testArray.begin(), testArray.end(), suiteOrderComparator);\par
6808         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "name"}, {\cf17 true}) == 0) \{\par
6809             std::sort(testArray.begin(), testArray.end(), nameOrderComparator);\par
6810         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "rand"}, {\cf17 true}) == 0) \{\par
6811             std::srand(p->rand_seed);\par
6812 \par
6813             {\cf20 // random_shuffle implementation}\par
6814             {\cf17 const} {\cf17 auto} first = &testArray[0];\par
6815             {\cf19 for}({\cf18 size_t} i = testArray.size() - 1; i > 0; --i) \{\par
6816                 {\cf18 int} idxToSwap = std::rand() % (i + 1);\par
6817 \par
6818                 {\cf17 const} {\cf17 auto} temp = first[i];\par
6819 \par
6820                 first[i]         = first[idxToSwap];\par
6821                 first[idxToSwap] = temp;\par
6822             \}\par
6823         \} {\cf19 else} {\cf19 if}(p->order_by.compare({\cf22 "none"}, {\cf17 true}) == 0) \{\par
6824             {\cf20 // means no sorting - beneficial for death tests which call into the executable}\par
6825             {\cf20 // with a specific test case in mind - we don't want to slow down the startup times}\par
6826         \}\par
6827     \}\par
6828 \par
6829     std::set<String> testSuitesPassingFilt;\par
6830 \par
6831     {\cf18 bool}                             query_mode = p->count || p->list_test_cases || p->list_test_suites;\par
6832     std::vector<const TestCaseData*> queryResults;\par
6833 \par
6834     {\cf19 if}(!query_mode)\par
6835         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_start, DOCTEST_EMPTY);\par
6836 \par
6837     {\cf20 // invoke the registered functions if they match the filter criteria (or just count them)}\par
6838     {\cf19 for}({\cf17 auto}& curr : testArray) \{\par
6839         {\cf17 const} {\cf17 auto}& tc = *curr;\par
6840 \par
6841         {\cf18 bool} skip_me = {\cf17 false};\par
6842         {\cf19 if}(tc.m_skip && !p->no_skip)\par
6843             skip_me = {\cf17 true};\par
6844 \par
6845         {\cf19 if}(!matchesAny(tc.m_file.c_str(), p->filters[0], {\cf17 true}, p->case_sensitive))\par
6846             skip_me = {\cf17 true};\par
6847         {\cf19 if}(matchesAny(tc.m_file.c_str(), p->filters[1], {\cf17 false}, p->case_sensitive))\par
6848             skip_me = {\cf17 true};\par
6849         {\cf19 if}(!matchesAny(tc.m_test_suite, p->filters[2], {\cf17 true}, p->case_sensitive))\par
6850             skip_me = {\cf17 true};\par
6851         {\cf19 if}(matchesAny(tc.m_test_suite, p->filters[3], {\cf17 false}, p->case_sensitive))\par
6852             skip_me = {\cf17 true};\par
6853         {\cf19 if}(!matchesAny(tc.m_name, p->filters[4], {\cf17 true}, p->case_sensitive))\par
6854             skip_me = {\cf17 true};\par
6855         {\cf19 if}(matchesAny(tc.m_name, p->filters[5], {\cf17 false}, p->case_sensitive))\par
6856             skip_me = {\cf17 true};\par
6857 \par
6858         {\cf19 if}(!skip_me)\par
6859             p->numTestCasesPassingFilters++;\par
6860 \par
6861         {\cf20 // skip the test if it is not in the execution range}\par
6862         {\cf19 if}((p->last < p->numTestCasesPassingFilters && p->first <= p->last) ||\par
6863            (p->first > p->numTestCasesPassingFilters))\par
6864             skip_me = {\cf17 true};\par
6865 \par
6866         {\cf19 if}(skip_me) \{\par
6867             {\cf19 if}(!query_mode)\par
6868                 DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_skipped, tc);\par
6869             {\cf19 continue};\par
6870         \}\par
6871 \par
6872         {\cf20 // do not execute the test if we are to only count the number of filter passing tests}\par
6873         {\cf19 if}(p->count)\par
6874             {\cf19 continue};\par
6875 \par
6876         {\cf20 // print the name of the test and don't execute it}\par
6877         {\cf19 if}(p->list_test_cases) \{\par
6878             queryResults.push_back(&tc);\par
6879             {\cf19 continue};\par
6880         \}\par
6881 \par
6882         {\cf20 // print the name of the test suite if not done already and don't execute it}\par
6883         {\cf19 if}(p->list_test_suites) \{\par
6884             {\cf19 if}((testSuitesPassingFilt.count(tc.m_test_suite) == 0) && tc.m_test_suite[0] != {\cf23 '\\0'}) \{\par
6885                 queryResults.push_back(&tc);\par
6886                 testSuitesPassingFilt.insert(tc.m_test_suite);\par
6887                 p->numTestSuitesPassingFilters++;\par
6888             \}\par
6889             {\cf19 continue};\par
6890         \}\par
6891 \par
6892         {\cf20 // execute the test if it passes all the filtering}\par
6893         \{\par
6894             p->currentTest = &tc;\par
6895 \par
6896             p->failure_flags = TestCaseFailureReason::None;\par
6897             p->seconds       = 0;\par
6898 \par
6899             {\cf20 // reset atomic counters}\par
6900             p->numAssertsFailedCurrentTest_atomic = 0;\par
6901             p->numAssertsCurrentTest_atomic       = 0;\par
6902 \par
6903             p->fullyTraversedSubcases.clear();\par
6904 \par
6905             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_start, tc);\par
6906 \par
6907             p->timer.start();\par
6908             \par
6909             {\cf18 bool} run_test = {\cf17 true};\par
6910 \par
6911             {\cf19 do} \{\par
6912                 {\cf20 // reset some of the fields for subcases (except for the set of fully passed ones)}\par
6913                 p->reachedLeaf = {\cf17 false};\par
6914                 {\cf20 // May not be empty if previous subcase exited via exception.}\par
6915                 p->subcaseStack.clear();\par
6916                 p->currentSubcaseDepth = 0;\par
6917 \par
6918                 p->shouldLogCurrentException = {\cf17 true};\par
6919 \par
6920                 {\cf20 // reset stuff for logging with INFO()}\par
6921                 p->stringifiedContexts.clear();\par
6922 \par
6923 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6924                 {\cf19 try} \{\par
6925 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6926 {\cf20 // MSVC 2015 diagnoses fatalConditionHandler as unused (because reset() is a static method)}\par
6927 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4101) {\cf20 // unreferenced local variable}\par
6928                     FatalConditionHandler fatalConditionHandler; {\cf20 // Handle signals}\par
6929                     {\cf20 // execute the test}\par
6930                     tc.m_test();\par
6931                     fatalConditionHandler.reset();\par
6932 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
6933 {\cf21 #ifndef DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6934                 \} {\cf19 catch}({\cf17 const} TestFailureException&) \{\par
6935                     p->failure_flags |= TestCaseFailureReason::AssertFailure;\par
6936                 \} {\cf19 catch}(...) \{\par
6937                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_exception,\par
6938                                                       \{translateActiveException(), {\cf17 false}\});\par
6939                     p->failure_flags |= TestCaseFailureReason::Exception;\par
6940                 \}\par
6941 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_NO_EXCEPTIONS}\par
6942 \par
6943                 {\cf20 // exit this loop if enough assertions have failed - even if there are more subcases}\par
6944                 {\cf19 if}(p->abort_after > 0 &&\par
6945                    p->numAssertsFailed + p->numAssertsFailedCurrentTest_atomic >= p->abort_after) \{\par
6946                     run_test = {\cf17 false};\par
6947                     p->failure_flags |= TestCaseFailureReason::TooManyFailedAsserts;\par
6948                 \}\par
6949                 \par
6950                 {\cf19 if}(!p->nextSubcaseStack.empty() && run_test)\par
6951                     DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_reenter, tc);\par
6952                 {\cf19 if}(p->nextSubcaseStack.empty())\par
6953                     run_test = {\cf17 false};\par
6954             \} {\cf19 while}(run_test);\par
6955 \par
6956             p->finalizeTestCaseData();\par
6957 \par
6958             DOCTEST_ITERATE_THROUGH_REPORTERS(test_case_end, *g_cs);\par
6959 \par
6960             p->currentTest = {\cf17 nullptr};\par
6961 \par
6962             {\cf20 // stop executing tests if enough assertions have failed}\par
6963             {\cf19 if}(p->abort_after > 0 && p->numAssertsFailed >= p->abort_after)\par
6964                 {\cf19 break};\par
6965         \}\par
6966     \}\par
6967 \par
6968     {\cf19 if}(!query_mode) \{\par
6969         DOCTEST_ITERATE_THROUGH_REPORTERS(test_run_end, *g_cs);\par
6970     \} {\cf19 else} \{\par
6971         QueryData qdata;\par
6972         qdata.run_stats = g_cs;\par
6973         qdata.data      = queryResults.data();\par
6974         qdata.num_data  = unsigned(queryResults.size());\par
6975         DOCTEST_ITERATE_THROUGH_REPORTERS(report_query, qdata);\par
6976     \}\par
6977 \par
6978     {\cf19 return} cleanup_and_return();\par
6979 \}\par
6980 \par
6981 DOCTEST_DEFINE_INTERFACE(IReporter)\par
6982 \par
6983 {\cf18 int} IReporter::get_num_active_contexts() \{ {\cf19 return} detail::g_infoContexts.size(); \}\par
6984 {\cf17 const} IContextScope* {\cf17 const}* IReporter::get_active_contexts() \{\par
6985     {\cf19 return} get_num_active_contexts() ? &detail::g_infoContexts[0] : {\cf17 nullptr};\par
6986 \}\par
6987 \par
6988 {\cf18 int} IReporter::get_num_stringified_contexts() \{ {\cf19 return} detail::g_cs->stringifiedContexts.size(); \}\par
6989 {\cf17 const} String* IReporter::get_stringified_contexts() \{\par
6990     {\cf19 return} get_num_stringified_contexts() ? &detail::g_cs->stringifiedContexts[0] : {\cf17 nullptr};\par
6991 \}\par
6992 \par
6993 {\cf17 namespace }detail \{\par
6994     {\cf18 void} registerReporterImpl({\cf17 const} {\cf18 char}* name, {\cf18 int} priority, reporterCreatorFunc c, {\cf18 bool} isReporter) \{\par
6995         {\cf19 if}(isReporter)\par
6996             getReporters().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6997         {\cf19 else}\par
6998             getListeners().insert(reporterMap::value_type(reporterMap::key_type(priority, name), c));\par
6999     \}\par
7000 \} {\cf20 // namespace detail}\par
7001 \par
7002 \} {\cf20 // namespace doctest}\par
7003 \par
7004 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_DISABLE}\par
7005 \par
7006 {\cf21 #ifdef DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7007 DOCTEST_MSVC_SUPPRESS_WARNING_WITH_PUSH(4007) {\cf20 // 'function' : must be 'attribute' - see issue #182}\par
7008 int main({\cf18 int} argc, {\cf18 char}** argv) \{ {\cf19 return} doctest::Context(argc, argv).run(); \}\par
7009 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7010 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN}\par
7011 \par
7012 DOCTEST_CLANG_SUPPRESS_WARNING_POP\par
7013 DOCTEST_MSVC_SUPPRESS_WARNING_POP\par
7014 DOCTEST_GCC_SUPPRESS_WARNING_POP\par
7015 \par
7016 DOCTEST_SUPPRESS_COMMON_WARNINGS_POP\par
7017 \par
7018 {\cf21 #endif }{\cf20 // DOCTEST_LIBRARY_IMPLEMENTATION}\par
7019 {\cf21 #endif }{\cf20 // DOCTEST_CONFIG_IMPLEMENT}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par 
\pard\plain 
{\tc \v Sum\'E1rio}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
